#![no_main]
ziskos::entrypoint!(main);

use ziskos::{ecrecover, secp256k1_decompress};

// ../zisk/target/release/cargo-zisk build --release
// RUST_BACKTRACE=full ../zisk/target/release/ziskemu -x -e target/riscv64ima-polygon-ziskos-elf/release/ecrecover
fn main() {
    decompress_tests();

    // Run valid tests
    valid_tests();

    // Run invalid tests
    invalid_tests();
}

pub fn decompress_tests() {
    let x_bytes = [
        0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC, 0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B,
        0x07, 0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9, 0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8,
        0x17, 0x98,
    ];
    let y_is_odd = false;
    let (point, has_sqrt) = secp256k1_decompress(&x_bytes, y_is_odd);
    let y_bytes_expected = [
        0x48, 0x3A, 0xDA, 0x77, 0x26, 0xA3, 0xC4, 0x65, 0x5D, 0xA4, 0xFB, 0xFC, 0x0E, 0x11, 0x08,
        0xA8, 0xFD, 0x17, 0xB4, 0x48, 0xA6, 0x85, 0x54, 0x19, 0x9C, 0x47, 0xD0, 0x8F, 0xFB, 0x10,
        0xD4, 0xB8,
    ];
    assert_eq!(has_sqrt, true);
    assert_eq!(point, (x_bytes, y_bytes_expected));

    let x_bytes = [
        0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC, 0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B,
        0x07, 0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9, 0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8,
        0x17, 0x98,
    ];
    let y_is_odd = true;
    let (point, has_sqrt) = secp256k1_decompress(&x_bytes, y_is_odd);
    let y_bytes_expected = [
        0xB7, 0xC5, 0x25, 0x88, 0xD9, 0x5C, 0x3B, 0x9A, 0xA2, 0x5B, 0x04, 0x03, 0xF1, 0xEE, 0xF7,
        0x57, 0x02, 0xE8, 0x4B, 0xB7, 0x59, 0x7A, 0xAB, 0xE6, 0x63, 0xB8, 0x2F, 0x6F, 0x04, 0xEF,
        0x27, 0x77,
    ];
    assert_eq!(has_sqrt, true);
    assert_eq!(point, (x_bytes, y_bytes_expected));
}

pub fn valid_tests() {
    // Test 1
    let hash = [
        0xD9, 0xEB, 0xA1, 0x6E, 0xD0, 0xEC, 0xAE, 0x43, 0x2B, 0x71, 0xFE, 0x00, 0x8C, 0x98, 0xCC,
        0x87, 0x2B, 0xB4, 0xCC, 0x21, 0x4D, 0x32, 0x20, 0xA3, 0x6F, 0x36, 0x53, 0x26, 0xCF, 0x80,
        0x7D, 0x68,
    ];
    let sig = [
        0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC, 0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B,
        0x07, 0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9, 0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8,
        0x17, 0x98, 0x26, 0x5E, 0x99, 0xE4, 0x7A, 0xD3, 0x1B, 0xB2, 0xCA, 0xB9, 0x64, 0x6C, 0x50,
        0x45, 0x76, 0xB3, 0xAB, 0xC6, 0x93, 0x9A, 0x17, 0x10, 0xAF, 0xC0, 0x8C, 0xBF, 0x30, 0x34,
        0xD7, 0x32, 0x14, 0xB8, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xBC, 0x44, 0x67, 0x4A, 0xD5, 0x86, 0x8F, 0x64, 0x2E, 0xAD, 0x3F, 0xDF, 0x94, 0xE2, 0xD9,
        0xC9, 0x18, 0x5E, 0xAF, 0xB7,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 2
    let hash = [
        0xD9, 0xEB, 0xA1, 0x6E, 0xD0, 0xEC, 0xAE, 0x43, 0x2B, 0x71, 0xFE, 0x00, 0x8C, 0x98, 0xCC,
        0x87, 0x2B, 0xB4, 0xCC, 0x21, 0x4D, 0x32, 0x20, 0xA3, 0x6F, 0x36, 0x53, 0x26, 0xCF, 0x80,
        0x7D, 0x68,
    ];
    let sig = [
        0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC, 0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B,
        0x07, 0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9, 0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8,
        0x17, 0x98, 0x26, 0x5E, 0x99, 0xE4, 0x7A, 0xD3, 0x1B, 0xB2, 0xCA, 0xB9, 0x64, 0x6C, 0x50,
        0x45, 0x76, 0xB3, 0xAB, 0xC6, 0x93, 0x9A, 0x17, 0x10, 0xAF, 0xC0, 0x8C, 0xBF, 0x30, 0x34,
        0xD7, 0x32, 0x14, 0xB8, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xEE, 0x3F, 0xEF, 0xB3, 0x8D, 0x4E, 0x5C, 0x73, 0x37, 0x81, 0x8F, 0x63, 0x5D, 0xEE, 0x76,
        0x09, 0xF6, 0x7C, 0xFD, 0xB8,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 3
    let hash = [
        0xD9, 0xEB, 0xA1, 0x6E, 0xD0, 0xEC, 0xAE, 0x43, 0x2B, 0x71, 0xFE, 0x00, 0x8C, 0x98, 0xCC,
        0x87, 0x2B, 0xB4, 0xCC, 0x21, 0x4D, 0x32, 0x20, 0xA3, 0x6F, 0x36, 0x53, 0x26, 0xCF, 0x80,
        0x7D, 0x68,
    ];
    let sig = [
        0xDD, 0xD0, 0xA7, 0x29, 0x0A, 0xF9, 0x52, 0x60, 0x56, 0xB4, 0xE3, 0x5A, 0x07, 0x7B, 0x9A,
        0x11, 0xB5, 0x13, 0xAA, 0x00, 0x28, 0xEC, 0x6C, 0x98, 0x80, 0x94, 0x85, 0x44, 0x50, 0x8F,
        0x3C, 0x63, 0x26, 0x5E, 0x99, 0xE4, 0x7A, 0xD3, 0x1B, 0xB2, 0xCA, 0xB9, 0x64, 0x6C, 0x50,
        0x45, 0x76, 0xB3, 0xAB, 0xC6, 0x93, 0x9A, 0x17, 0x10, 0xAF, 0xC0, 0x8C, 0xBF, 0x30, 0x34,
        0xD7, 0x32, 0x14, 0xB8, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x14, 0x79, 0x16, 0x97, 0x26, 0x0E, 0x4C, 0x9A, 0x71, 0xF1, 0x84, 0x84, 0xC9, 0xF9, 0x97,
        0xB3, 0x08, 0xE5, 0x93, 0x25,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 4
    let hash = [
        0x3C, 0xC4, 0xCB, 0x05, 0x04, 0x78, 0xC4, 0x98, 0x77, 0x18, 0x8E, 0x4F, 0xBD, 0x02, 0x2F,
        0x35, 0xCC, 0xB4, 0x1C, 0xEE, 0x02, 0xD9, 0xD4, 0x41, 0x71, 0x94, 0xCB, 0xF7, 0xEB, 0xC1,
        0xEE, 0xBE,
    ];
    let sig = [
        0x7D, 0xFF, 0x8B, 0x06, 0xF4, 0x91, 0x4F, 0xF0, 0xBE, 0x0E, 0x02, 0xED, 0xF9, 0x67, 0xCE,
        0x8F, 0x13, 0x22, 0x4C, 0xB4, 0x81, 0x9E, 0x38, 0x33, 0xB7, 0x77, 0x86, 0x7D, 0xB6, 0x1F,
        0x8A, 0x62, 0x2B, 0xCF, 0x13, 0xB5, 0xE4, 0xF3, 0x4A, 0x04, 0xA7, 0x73, 0x44, 0xD5, 0x94,
        0x3E, 0x02, 0x28, 0xBA, 0x2E, 0x78, 0x75, 0x83, 0x03, 0x63, 0x25, 0x45, 0x0C, 0x88, 0x9D,
        0x59, 0x7A, 0x16, 0xC4, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xBE, 0xC8, 0x0D, 0x04, 0xA2, 0x4C, 0xD4, 0xD8, 0x11, 0x87, 0x6F, 0xF4, 0x0F, 0x31, 0x26,
        0x0C, 0x33, 0x9D, 0x63, 0xC2,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 5
    let hash = [
        0xEE, 0x43, 0xD5, 0x1B, 0xAA, 0x54, 0x83, 0x1B, 0xFD, 0x9B, 0x03, 0xC4, 0xB1, 0x7B, 0x59,
        0xA5, 0x94, 0x37, 0x8D, 0x77, 0x7E, 0x41, 0x80, 0x20, 0xC3, 0x35, 0x8F, 0x18, 0x22, 0xCE,
        0xC0, 0x7D,
    ];
    let sig = [
        0xEA, 0x67, 0x8B, 0x4B, 0x3E, 0xBD, 0xE1, 0xE8, 0x77, 0x40, 0x1B, 0x1B, 0xF6, 0x7F, 0xD5,
        0x9E, 0x17, 0xC0, 0xEB, 0x75, 0xE6, 0xDA, 0x8E, 0xCD, 0x9C, 0xC3, 0x86, 0x20, 0x09, 0x9E,
        0x0C, 0x65, 0x2B, 0x95, 0x43, 0x33, 0xCF, 0xE2, 0xB4, 0xBF, 0x97, 0xC4, 0xAB, 0xBC, 0xED,
        0xE0, 0x4A, 0x5E, 0xDD, 0xA0, 0x68, 0x8B, 0x9E, 0x96, 0x5A, 0x4B, 0xFF, 0x3D, 0x6A, 0x45,
        0xBE, 0xD2, 0xA6, 0xE8, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xD5, 0x71, 0xA2, 0x18, 0x0A, 0x86, 0x47, 0xE7, 0x7A, 0xDF, 0xC1, 0x09, 0xC4, 0x9B, 0xD2,
        0x13, 0x7C, 0x7A, 0x71, 0xB5,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 6
    let hash = [
        0xFD, 0x98, 0xB0, 0xBF, 0xC9, 0xEE, 0xCC, 0x81, 0x3B, 0x95, 0x82, 0x63, 0xC0, 0x8D, 0xB1,
        0x7C, 0x93, 0x2B, 0xFE, 0x1C, 0x2A, 0xE7, 0xC2, 0x1A, 0x12, 0xBB, 0x42, 0x86, 0x0D, 0x9D,
        0x9C, 0x1F,
    ];
    let sig = [
        0x86, 0xB2, 0xF6, 0xD4, 0xBA, 0xE0, 0xE1, 0xE1, 0x13, 0x9B, 0xC2, 0x93, 0x78, 0xFD, 0x24,
        0x3D, 0x33, 0xDE, 0x35, 0x82, 0x26, 0x52, 0x14, 0x4B, 0x0B, 0x04, 0xAF, 0x34, 0x6C, 0xBF,
        0x3A, 0xD2, 0x5E, 0xC4, 0xA8, 0x67, 0x2D, 0x44, 0xB2, 0x1B, 0xDC, 0x22, 0x03, 0xAB, 0x8A,
        0xDA, 0xB6, 0xAE, 0x53, 0xD4, 0xC5, 0x7A, 0x2D, 0x83, 0x20, 0x90, 0xCA, 0xB7, 0x10, 0xF2,
        0x66, 0x00, 0xE2, 0xFC, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x52, 0x85, 0x54, 0x36, 0xE4, 0x1C, 0x26, 0x71, 0x75, 0x9D, 0x54, 0x10, 0x3E, 0x71, 0xA3,
        0xD5, 0xFE, 0x27, 0x43, 0x9C,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 7
    let hash = [
        0xC4, 0x01, 0xC7, 0xD7, 0xBA, 0xA5, 0x68, 0xF5, 0x92, 0x80, 0x28, 0xDE, 0xF2, 0x81, 0x8E,
        0xC6, 0x2B, 0x70, 0xDB, 0x9B, 0x73, 0x8A, 0xB3, 0xF4, 0xD3, 0x63, 0x26, 0xDA, 0xC1, 0x78,
        0x39, 0xE5,
    ];
    let sig = [
        0x4A, 0x95, 0x89, 0x0F, 0x11, 0x02, 0xC6, 0xA6, 0x68, 0x48, 0x15, 0xF4, 0x27, 0x4D, 0x68,
        0xD6, 0x4D, 0x6D, 0xEB, 0x59, 0xE5, 0xD5, 0x24, 0xD1, 0xA6, 0x39, 0x42, 0x56, 0xDD, 0x18,
        0x8B, 0x33, 0x3E, 0x53, 0x61, 0x9F, 0xE2, 0xF4, 0xC6, 0x7A, 0xC8, 0xFF, 0x41, 0x03, 0xDA,
        0x07, 0x40, 0xFD, 0x7C, 0x91, 0x2B, 0xE5, 0xB1, 0x76, 0x32, 0x9A, 0x74, 0x76, 0x4B, 0xD7,
        0x90, 0xE4, 0x2F, 0x51, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xA4, 0xE2, 0x4C, 0x3E, 0xA4, 0x59, 0xD5, 0x04, 0x09, 0xDD, 0x31, 0xCF, 0x1C, 0x35, 0xA2,
        0x22, 0xAD, 0xA8, 0x89, 0xFA,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 8
    let hash = [
        0x60, 0x04, 0x9B, 0x23, 0x4E, 0x7F, 0xD8, 0x6B, 0xA5, 0x35, 0x46, 0x13, 0x06, 0x6D, 0x0D,
        0x67, 0xCC, 0xDD, 0x99, 0x3D, 0x53, 0x22, 0x65, 0x6C, 0x56, 0x56, 0x2D, 0x48, 0xC2, 0x08,
        0x00, 0x2A,
    ];
    let sig = [
        0xF0, 0x6F, 0xBF, 0xB0, 0x21, 0xB1, 0x85, 0xA5, 0x99, 0xEC, 0x35, 0xB0, 0xC4, 0xA8, 0x5F,
        0x5C, 0x32, 0x9A, 0xBE, 0xE4, 0xF9, 0x1C, 0x40, 0x27, 0xCB, 0x90, 0x21, 0x0C, 0x66, 0x86,
        0x8E, 0x99, 0x1E, 0x0E, 0x24, 0xCA, 0xB3, 0xE1, 0x19, 0xFE, 0xA5, 0x7B, 0x01, 0x2B, 0x25,
        0xBF, 0xD6, 0x5F, 0x71, 0x0F, 0xE5, 0x67, 0xA5, 0x3D, 0x1A, 0x41, 0x42, 0x08, 0xF0, 0x38,
        0x5F, 0x37, 0xBE, 0x1C, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x23, 0x02, 0xFD, 0xD6, 0xDB, 0x52, 0xD3, 0x2B, 0x84, 0xCC, 0x76, 0x48, 0xFB, 0x9D, 0x89,
        0x78, 0xA0, 0x05, 0xE3, 0x82,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 9
    let hash = [
        0xFD, 0xA8, 0x92, 0xE5, 0x4E, 0xF8, 0xD0, 0xFC, 0x5D, 0x34, 0xF3, 0xC7, 0x8F, 0xD9, 0x26,
        0x2E, 0xBC, 0x97, 0xC4, 0x48, 0xEE, 0xC7, 0x23, 0x48, 0x34, 0x0C, 0x90, 0x2F, 0xF8, 0xF8,
        0x2D, 0x86,
    ];
    let sig = [
        0xE9, 0x71, 0x3E, 0x52, 0xD8, 0xCA, 0x16, 0xC7, 0x72, 0x3E, 0xA7, 0x3F, 0xF8, 0x92, 0x44,
        0xD1, 0xC5, 0xBF, 0xE6, 0x61, 0x1F, 0x56, 0xD8, 0xA2, 0xCE, 0xBC, 0xF2, 0x5F, 0x54, 0x6C,
        0x0B, 0xB3, 0x62, 0x75, 0x66, 0x97, 0x9C, 0x5B, 0x6E, 0x3A, 0x5B, 0x8E, 0x06, 0xBA, 0x56,
        0xF2, 0x2E, 0xED, 0x36, 0x7A, 0x9B, 0x54, 0xED, 0x9C, 0x3C, 0x54, 0xD0, 0x1A, 0x29, 0x01,
        0x24, 0x35, 0xFE, 0x02, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xCC, 0x66, 0x5B, 0x2C, 0xAA, 0x43, 0x68, 0x4C, 0x99, 0xF0, 0xEB, 0x59, 0x75, 0x1D, 0xC1,
        0xA8, 0xC4, 0xDB, 0xD9, 0xEE,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 10
    let hash = [
        0x1D, 0xF5, 0xD6, 0xCD, 0x09, 0x99, 0x98, 0x48, 0xB7, 0x34, 0xEF, 0x91, 0xA3, 0x5A, 0x31,
        0x84, 0x0B, 0x6F, 0x4F, 0x7B, 0xC4, 0x2F, 0xA4, 0x00, 0x5E, 0xF4, 0x4A, 0x3A, 0x0D, 0xA7,
        0x5F, 0xD7,
    ];
    let sig = [
        0x8C, 0x66, 0x1A, 0x2E, 0x0A, 0xE1, 0xFF, 0xE7, 0x16, 0xD3, 0x4E, 0x6D, 0x1C, 0xEA, 0xCF,
        0xD7, 0x53, 0x26, 0xDA, 0x91, 0xBF, 0x3A, 0xF2, 0x25, 0xED, 0x67, 0x56, 0x02, 0xA0, 0x0E,
        0xBF, 0x21, 0x3D, 0xE2, 0x14, 0x52, 0xFD, 0x05, 0x47, 0x50, 0xAE, 0x68, 0x32, 0x6D, 0x77,
        0x81, 0xED, 0x90, 0x3B, 0x27, 0x8B, 0xB1, 0xAC, 0x1F, 0x52, 0xFB, 0x8F, 0x55, 0xE8, 0xA4,
        0xC9, 0x95, 0x40, 0x00, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x1F, 0x34, 0x35, 0x8A, 0x42, 0x3C, 0x2F, 0xED, 0x83, 0x90, 0x90, 0xDD, 0x94, 0x3A, 0x72,
        0x8D, 0xBD, 0x71, 0x1E, 0x62,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 11
    let hash = [
        0x84, 0x25, 0x4D, 0x72, 0xD3, 0xA1, 0x7A, 0x61, 0xA1, 0xFF, 0x7D, 0xBE, 0xF2, 0xCB, 0xB0,
        0x63, 0xF2, 0x91, 0x3A, 0x40, 0x7A, 0x15, 0xEE, 0x60, 0x12, 0x16, 0x8C, 0xE0, 0xCE, 0x5B,
        0xC5, 0x00,
    ];
    let sig = [
        0x49, 0x37, 0xD1, 0x5F, 0xDD, 0xE7, 0x3A, 0x18, 0x52, 0x0A, 0x70, 0xB8, 0xE8, 0xF6, 0xFB,
        0x05, 0xE9, 0xC1, 0x72, 0xD8, 0xB0, 0x4B, 0x02, 0xC0, 0x24, 0x6C, 0xD5, 0xC9, 0xFA, 0x76,
        0xFF, 0x97, 0x70, 0xAC, 0x18, 0x0D, 0x31, 0xA5, 0x33, 0x6B, 0xC9, 0x02, 0xE3, 0x17, 0xC6,
        0xB5, 0x85, 0x0B, 0x15, 0x1E, 0xA7, 0xA2, 0xCF, 0xF0, 0x59, 0x5C, 0x61, 0xD6, 0x7B, 0xF4,
        0x9D, 0x1F, 0xC2, 0x10, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x0C, 0x47, 0x0E, 0x08, 0x95, 0xBB, 0xE2, 0x2A, 0x5C, 0xFE, 0xD0, 0x60, 0x02, 0xE2, 0x9E,
        0x8A, 0xDC, 0xEB, 0x59, 0xE1,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 12
    let hash = [
        0xCB, 0xFB, 0x54, 0x77, 0xB2, 0x3D, 0x3F, 0x14, 0xE8, 0x21, 0x79, 0x98, 0x05, 0x06, 0x0A,
        0x4B, 0xE3, 0xDC, 0x7E, 0xC5, 0x1F, 0x00, 0x7A, 0xC7, 0x8B, 0x81, 0x09, 0x41, 0xA5, 0x69,
        0x37, 0x23,
    ];
    let sig = [
        0x46, 0x5E, 0x8A, 0x56, 0x6E, 0x29, 0xF9, 0x7B, 0x29, 0x98, 0x0B, 0x45, 0x8B, 0xFF, 0x07,
        0xCD, 0xEF, 0xF5, 0xE0, 0x20, 0xF3, 0x8D, 0x54, 0x1C, 0x3A, 0x98, 0x0E, 0xB4, 0x64, 0x2B,
        0x46, 0x06, 0x53, 0x1E, 0xAE, 0xEE, 0xEC, 0x12, 0x99, 0x8A, 0xF8, 0x11, 0xC4, 0x35, 0xA7,
        0x9A, 0x73, 0x7D, 0x3D, 0xBB, 0x74, 0x11, 0xED, 0x4D, 0x93, 0x70, 0x80, 0xB6, 0x20, 0x1A,
        0x46, 0x70, 0x3B, 0xF0, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x67, 0x77, 0xD2, 0x22, 0xB6, 0x9B, 0x69, 0xF4, 0x1E, 0xE3, 0xDB, 0xFC, 0xF6, 0xBA, 0xEE,
        0x33, 0x29, 0x99, 0xF3, 0x47,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 13
    let hash = [
        0xF2, 0x7F, 0xB8, 0x41, 0x4A, 0x5A, 0xAE, 0xD9, 0x47, 0xF9, 0x1F, 0xF4, 0x58, 0xEA, 0x71,
        0xF6, 0xEE, 0xD0, 0xB8, 0x94, 0x9D, 0x3D, 0xA5, 0x1A, 0xD7, 0x32, 0x50, 0x47, 0xAB, 0xA2,
        0xE0, 0x81,
    ];
    let sig = [
        0x49, 0x3B, 0x8C, 0xA6, 0xE0, 0x9C, 0x06, 0x45, 0x05, 0x08, 0xB8, 0xEA, 0xE8, 0x8B, 0xF8,
        0x10, 0x35, 0x48, 0xB7, 0x11, 0x35, 0xE1, 0xD8, 0x72, 0x1B, 0x93, 0x5A, 0x88, 0x22, 0xF2,
        0x88, 0x90, 0x4D, 0xEA, 0x23, 0x62, 0x97, 0x4B, 0xB2, 0x05, 0xC4, 0x8E, 0x92, 0xBD, 0x88,
        0x76, 0x1B, 0x45, 0x4F, 0x2F, 0x4E, 0x08, 0x5D, 0xFB, 0x9B, 0xEB, 0x07, 0x06, 0x58, 0x8B,
        0x6E, 0xB8, 0x52, 0xA8, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x1F, 0x56, 0xA9, 0xF3, 0xCA, 0x1F, 0x28, 0x49, 0x78, 0x47, 0x8D, 0x93, 0x63, 0xD2, 0xB3,
        0x45, 0xB2, 0x3B, 0x19, 0x8B,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 14
    let hash = [
        0x7D, 0x7E, 0x07, 0x3C, 0x17, 0xEB, 0x15, 0x9A, 0xD8, 0x37, 0x2F, 0x82, 0xF9, 0xFA, 0x70,
        0x0A, 0x77, 0xA8, 0xA0, 0x9D, 0xBF, 0xA7, 0xCC, 0xC2, 0x56, 0x15, 0x04, 0x99, 0x3B, 0xE9,
        0xCC, 0xCA,
    ];
    let sig = [
        0x8C, 0x23, 0x08, 0x1E, 0x82, 0x11, 0x02, 0x9C, 0xA6, 0x41, 0xFE, 0x88, 0x23, 0x53, 0x87,
        0xA5, 0x4D, 0x87, 0x5B, 0x2F, 0xD6, 0x4D, 0xF1, 0xDB, 0xE8, 0x7F, 0xB4, 0x38, 0x31, 0x6D,
        0xB7, 0x08, 0x41, 0xC8, 0xE2, 0xF7, 0x19, 0x66, 0xA6, 0x55, 0x3C, 0x03, 0xD9, 0x47, 0x71,
        0x45, 0x36, 0x67, 0x64, 0x39, 0x9A, 0x6A, 0xD2, 0x3C, 0x2E, 0xFD, 0xAB, 0xBD, 0xF7, 0x00,
        0x4D, 0x21, 0xA7, 0xB7, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x6A, 0x7C, 0x38, 0x04, 0xE5, 0x2D, 0x9B, 0x08, 0x97, 0x67, 0xEA, 0x5D, 0x26, 0x23, 0x2F,
        0x90, 0x96, 0xF7, 0xB5, 0x0E,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 15
    let hash = [
        0x8A, 0xEC, 0x58, 0x31, 0xF7, 0xB0, 0x2D, 0x4F, 0x71, 0x48, 0x78, 0xD3, 0x72, 0x99, 0x75,
        0xAF, 0xD5, 0x43, 0x5E, 0x61, 0xE7, 0x38, 0xA1, 0x19, 0xDD, 0xCA, 0x2E, 0x97, 0x77, 0xE0,
        0x41, 0x83,
    ];
    let sig = [
        0x49, 0xB0, 0x01, 0x8D, 0x05, 0xB6, 0xF3, 0x6D, 0x46, 0x13, 0x39, 0x63, 0x30, 0x82, 0xC8,
        0xA0, 0x32, 0x54, 0x3C, 0x4F, 0x4C, 0x5A, 0xE6, 0xAF, 0x56, 0xFF, 0x5E, 0x48, 0xFD, 0x94,
        0x33, 0x72, 0x34, 0xF0, 0x96, 0xB3, 0xEE, 0x06, 0xD0, 0x0F, 0x33, 0x06, 0x97, 0xBD, 0xDB,
        0xE5, 0xE2, 0x5D, 0x92, 0x07, 0xE5, 0xCC, 0xAC, 0x21, 0x4E, 0xB9, 0x4C, 0xE9, 0x6E, 0xD4,
        0x50, 0x73, 0x93, 0xC1, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xDD, 0x6F, 0x17, 0x8F, 0xA6, 0xED, 0x58, 0x59, 0x15, 0x43, 0x01, 0xC6, 0x86, 0xC3, 0xCD,
        0x12, 0x19, 0x2C, 0xCC, 0x0A,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 16
    let hash = [
        0xC2, 0xC0, 0xF5, 0xC0, 0x1B, 0x3E, 0x24, 0x4B, 0xD9, 0xF4, 0x0D, 0xA6, 0x27, 0xCF, 0xEF,
        0xBC, 0x45, 0xC5, 0x3E, 0x76, 0xF2, 0x67, 0x98, 0xCC, 0x19, 0x5D, 0xE6, 0x1E, 0x34, 0x38,
        0x58, 0x5F,
    ];
    let sig = [
        0x4A, 0x06, 0xE1, 0xF0, 0x01, 0x20, 0x17, 0xC6, 0x82, 0x94, 0x91, 0x1B, 0xE6, 0x69, 0xE9,
        0x53, 0xE0, 0x1C, 0x41, 0xF9, 0x7B, 0x31, 0xE4, 0xF6, 0x83, 0x0A, 0xF4, 0x20, 0x0D, 0x4B,
        0xF2, 0x53, 0x2E, 0xAF, 0xB3, 0x3F, 0xBB, 0x92, 0xB5, 0x12, 0x17, 0x58, 0x12, 0x97, 0x2C,
        0xE8, 0x9E, 0x54, 0xE5, 0x0F, 0x28, 0xEC, 0xF2, 0x7A, 0x05, 0x1B, 0x4F, 0x22, 0x91, 0xDA,
        0x2C, 0xF0, 0xE1, 0xF3, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x5F, 0xFD, 0x05, 0xD8, 0x56, 0x5F, 0xA5, 0x1B, 0xB1, 0xAE, 0x1E, 0x4C, 0x7B, 0x98, 0x0E,
        0x1C, 0x91, 0xD2, 0xC9, 0x39,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 17
    let hash = [
        0x14, 0x30, 0xFC, 0x99, 0x9D, 0x7B, 0xFA, 0x89, 0x54, 0x98, 0x3E, 0x43, 0xF8, 0x0A, 0x27,
        0xA0, 0x7E, 0xB4, 0x84, 0x50, 0x37, 0xBC, 0x34, 0x4F, 0xC1, 0x28, 0xB4, 0x53, 0xF7, 0x68,
        0x77, 0xA3,
    ];
    let sig = [
        0x88, 0x84, 0x3A, 0xEA, 0x48, 0xFF, 0xF6, 0x79, 0x0C, 0xB6, 0xF9, 0x65, 0x7E, 0x16, 0x50,
        0xE1, 0x38, 0x6A, 0xA7, 0x3A, 0x6B, 0xED, 0x50, 0xE8, 0xDB, 0x24, 0x67, 0xD0, 0x64, 0x45,
        0xBE, 0xD8, 0x77, 0x9C, 0xE0, 0x85, 0x13, 0x9A, 0x5F, 0xC4, 0x9F, 0x33, 0x43, 0x1C, 0x9D,
        0x47, 0x94, 0xA1, 0x67, 0x32, 0xD4, 0x97, 0x15, 0x85, 0x70, 0x69, 0x06, 0x62, 0xED, 0x77,
        0x9F, 0xB2, 0x2E, 0xAD, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xF3, 0x29, 0xE0, 0x7A, 0xFA, 0xDE, 0x0F, 0xB4, 0x5A, 0x59, 0x99, 0x93, 0xDF, 0x43, 0x13,
        0xDF, 0xAB, 0x5F, 0x80, 0xA6,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 18
    let hash = [
        0x8B, 0xC6, 0x61, 0x9E, 0xF1, 0x76, 0x97, 0x3B, 0x22, 0xE4, 0xA0, 0xF0, 0xF8, 0x1A, 0x6C,
        0xD5, 0xBA, 0xDF, 0x09, 0x1E, 0x45, 0x2F, 0x91, 0x0D, 0xE3, 0x81, 0x62, 0xB1, 0x8C, 0x2F,
        0x2F, 0xF6,
    ];
    let sig = [
        0x34, 0x7F, 0xAE, 0xBC, 0x1F, 0xC4, 0xC0, 0x14, 0x69, 0x2F, 0xFC, 0x72, 0x84, 0xFA, 0x28,
        0x59, 0x6D, 0x14, 0x94, 0xC2, 0x9F, 0x29, 0xCD, 0xC5, 0x2F, 0xA1, 0xC8, 0xD5, 0x7D, 0xED,
        0x6A, 0x5D, 0x59, 0x7A, 0x18, 0xDA, 0x2E, 0x6C, 0x3C, 0x1E, 0xAA, 0x56, 0xD9, 0x61, 0x1F,
        0x50, 0xBF, 0x3D, 0x16, 0x1A, 0x05, 0xE5, 0x42, 0xAF, 0xD2, 0x9C, 0xF4, 0x16, 0xB8, 0x0F,
        0x82, 0xEE, 0x5E, 0xF9, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x41, 0x15, 0x59, 0xB9, 0x90, 0xFD, 0x50, 0xF1, 0xDF, 0x20, 0xB4, 0xD3, 0x78, 0x0C, 0x41,
        0x85, 0xD1, 0x13, 0xA9, 0xEE,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 19
    let hash = [
        0xB3, 0xDC, 0x90, 0x53, 0x25, 0x69, 0xA7, 0x3A, 0xB8, 0xFC, 0x3D, 0x41, 0xD6, 0xDF, 0x17,
        0x68, 0x33, 0x13, 0x3B, 0xE5, 0xA6, 0x97, 0xF0, 0x76, 0x39, 0x2F, 0x51, 0x00, 0x1C, 0x71,
        0x50, 0x06,
    ];
    let sig = [
        0xAF, 0x45, 0x92, 0xA0, 0xEC, 0x76, 0xC8, 0x4B, 0xB5, 0x87, 0xB1, 0xBD, 0xD3, 0xB7, 0x7B,
        0x12, 0x07, 0xF7, 0xFD, 0x57, 0x2E, 0x11, 0x8F, 0x42, 0x78, 0xA8, 0x0E, 0xC7, 0xC8, 0x96,
        0x66, 0xB9, 0x0C, 0xB4, 0xBD, 0x62, 0xED, 0xD2, 0xD2, 0x86, 0xB8, 0x83, 0xD3, 0x20, 0x06,
        0xB7, 0x99, 0x53, 0x27, 0x37, 0xB5, 0xB9, 0x0E, 0xD4, 0xA0, 0x3C, 0xE0, 0xA6, 0x86, 0x8A,
        0x2F, 0x10, 0xED, 0xB6, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xB2, 0xE1, 0xA1, 0xFB, 0xFD, 0xAE, 0x07, 0x43, 0xF4, 0x53, 0x91, 0x66, 0x30, 0x9B, 0x72,
        0xBB, 0x73, 0x77, 0x16, 0xB1,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 20
    let hash = [
        0xC7, 0x36, 0x7F, 0xFE, 0xDB, 0x65, 0xFE, 0x02, 0x2F, 0xA0, 0x6A, 0x8C, 0x28, 0x55, 0xC6,
        0x95, 0x47, 0xCC, 0xA1, 0x9E, 0xE8, 0x28, 0xD6, 0x61, 0x5E, 0x5F, 0x7D, 0xEC, 0xAF, 0xCC,
        0xBD, 0xC8,
    ];
    let sig = [
        0xB7, 0xFD, 0x2F, 0xA9, 0x1D, 0xD0, 0xBA, 0x81, 0x6B, 0x37, 0xF4, 0xAD, 0x9B, 0x50, 0x7A,
        0xD3, 0xB3, 0x2E, 0xC2, 0xA4, 0x45, 0x54, 0x4F, 0xAB, 0xB0, 0xE2, 0x31, 0xC5, 0xAE, 0xEE,
        0xFB, 0x18, 0x24, 0x4C, 0x00, 0x4F, 0x8B, 0x78, 0xDC, 0x3A, 0x3C, 0x3D, 0xB9, 0xBD, 0xA9,
        0xB3, 0x9D, 0x6E, 0x6B, 0x11, 0xB9, 0x39, 0x7B, 0xAA, 0xF2, 0x9D, 0x05, 0x29, 0xB7, 0xBA,
        0xC9, 0x49, 0x07, 0x42, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x95, 0xDD, 0xAF, 0xE1, 0x7E, 0x55, 0x50, 0xFF, 0x8A, 0xC7, 0xB2, 0xEF, 0x9D, 0x36, 0x5D,
        0x06, 0x7A, 0xA7, 0xAE, 0x91,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 21
    let hash = [
        0x89, 0x8A, 0x01, 0x59, 0x48, 0xF4, 0xE1, 0x2F, 0xE7, 0x1B, 0xB3, 0xF6, 0x01, 0x54, 0x10,
        0xF3, 0x3D, 0x0B, 0x67, 0x84, 0x2B, 0x55, 0x15, 0x99, 0x76, 0x2B, 0x51, 0xFE, 0xCA, 0xD5,
        0x57, 0x7C,
    ];
    let sig = [
        0xA0, 0xD4, 0x27, 0x85, 0x6D, 0xB7, 0x21, 0x64, 0xAB, 0xC5, 0x96, 0x66, 0xE3, 0x4C, 0xD4,
        0xAC, 0xCB, 0x68, 0x9F, 0x18, 0x00, 0xF7, 0x13, 0x84, 0xD7, 0x97, 0xA7, 0x29, 0xC0, 0x03,
        0x59, 0x8B, 0x51, 0x4D, 0x41, 0xEC, 0xA7, 0x50, 0xEB, 0xE0, 0x3D, 0x75, 0xED, 0x71, 0x82,
        0xD8, 0x11, 0x68, 0xAF, 0x19, 0x87, 0x60, 0xE3, 0xAC, 0x50, 0x77, 0xC5, 0xD8, 0x8D, 0x1F,
        0x85, 0x65, 0x60, 0x39, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x9D, 0x39, 0xCF, 0xA3, 0xF2, 0xE9, 0x8C, 0xA1, 0x09, 0xC4, 0x5F, 0x28, 0x73, 0x54, 0x36,
        0x79, 0x8C, 0xBB, 0xDE, 0xF8,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 22
    let hash = [
        0xAD, 0xD4, 0x7D, 0x80, 0xDE, 0xCF, 0xC5, 0x00, 0x37, 0xD3, 0x74, 0x30, 0xCC, 0xDD, 0xA0,
        0x8B, 0x3D, 0x39, 0x83, 0x1E, 0x53, 0x55, 0xE9, 0x9B, 0xFE, 0x5E, 0x08, 0xE0, 0x05, 0x31,
        0x18, 0x2E,
    ];
    let sig = [
        0xF7, 0x4A, 0x32, 0xE6, 0x91, 0xA8, 0xE0, 0xEE, 0x1B, 0x55, 0xFA, 0x4A, 0xEE, 0xEB, 0xFB,
        0x3E, 0xED, 0x09, 0x11, 0x08, 0xCE, 0x03, 0xF7, 0xEF, 0x44, 0x98, 0x46, 0x04, 0x4F, 0x22,
        0x8D, 0x4A, 0x30, 0x8A, 0xF5, 0x0F, 0xEF, 0x22, 0x67, 0x3A, 0xE4, 0xA8, 0x3C, 0x5E, 0x80,
        0xC4, 0xF3, 0x16, 0x82, 0x94, 0x90, 0xB5, 0x7A, 0x56, 0x1C, 0x9F, 0x45, 0xA1, 0x57, 0x02,
        0x86, 0xD9, 0x4E, 0x41, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x4A, 0xB0, 0xC3, 0xD2, 0x4D, 0xFF, 0x7E, 0x98, 0xE1, 0x6E, 0xDD, 0x61, 0x26, 0x99, 0x97,
        0xD0, 0x89, 0xE9, 0x7C, 0x9F,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 23
    let hash = [
        0x8F, 0xC2, 0x75, 0x77, 0xB5, 0x29, 0x0A, 0x3A, 0xB0, 0xD3, 0x40, 0x79, 0x69, 0x12, 0x3C,
        0x71, 0x9C, 0x47, 0x5A, 0x28, 0xE6, 0x87, 0xD9, 0x43, 0xF8, 0x8A, 0xC5, 0xAB, 0xAD, 0xF8,
        0x34, 0x20,
    ];
    let sig = [
        0x8B, 0x9D, 0x9E, 0x9C, 0x42, 0x01, 0xB9, 0xB2, 0xD3, 0x51, 0xB5, 0xDD, 0xE3, 0x5C, 0x0E,
        0xBE, 0xFA, 0x54, 0x46, 0xC2, 0xDB, 0xDD, 0x5E, 0x30, 0xDC, 0xA0, 0x2A, 0xF6, 0x9D, 0x8C,
        0x29, 0xBD, 0x04, 0x7F, 0xB2, 0xBA, 0x1E, 0x4C, 0xC0, 0xA0, 0x59, 0xEE, 0x64, 0xAA, 0xE4,
        0x0D, 0x4B, 0xA4, 0x8E, 0x6D, 0x32, 0x65, 0x42, 0x6F, 0x60, 0x2B, 0xE2, 0x75, 0xD2, 0x86,
        0xE4, 0x59, 0x17, 0xF6, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xD0, 0x2C, 0x6A, 0xAB, 0x18, 0xD3, 0xF4, 0x0A, 0xA9, 0x94, 0xA5, 0xB7, 0xF3, 0xC2, 0xBE,
        0x14, 0xB3, 0x4E, 0xAB, 0x6E,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 24
    let hash = [
        0x25, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0x4F, 0x8A, 0xE3, 0xBD, 0x75, 0x35, 0x24, 0x8D, 0x0B, 0xD4, 0x48, 0x29, 0x8C,
        0xC2, 0xE2, 0x07, 0x1E, 0x56, 0x99, 0x2D, 0x07, 0x74, 0xDC, 0x34, 0x0C, 0x36, 0x8A, 0xE9,
        0x50, 0x85, 0x2A, 0xDA, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x34, 0xE3, 0x25, 0xD8, 0x02, 0x3E, 0xB9, 0x01, 0xC3, 0x97, 0x47, 0x33, 0x8C, 0x58, 0x7B,
        0x09, 0x8F, 0xB7, 0x5D, 0xF4,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 25
    let hash = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0x4F, 0x8A, 0xE3, 0xBD, 0x75, 0x35, 0x24, 0x8D, 0x0B, 0xD4, 0x48, 0x29, 0x8C,
        0xC2, 0xE2, 0x07, 0x1E, 0x56, 0x99, 0x2D, 0x07, 0x74, 0xDC, 0x34, 0x0C, 0x36, 0x8A, 0xE9,
        0x50, 0x85, 0x2A, 0xDA, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x2A, 0x55, 0x8C, 0x4C, 0xD6, 0x62, 0xE0, 0xB7, 0x4E, 0x28, 0x9D, 0x74, 0x6A, 0xEA, 0x2F,
        0x8C, 0xF8, 0xE5, 0x4F, 0x7C,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 26
    let hash = [
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFE, 0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36,
        0x41, 0x41,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0x4F, 0x8A, 0xE3, 0xBD, 0x75, 0x35, 0x24, 0x8D, 0x0B, 0xD4, 0x48, 0x29, 0x8C,
        0xC2, 0xE2, 0x07, 0x1E, 0x56, 0x99, 0x2D, 0x07, 0x74, 0xDC, 0x34, 0x0C, 0x36, 0x8A, 0xE9,
        0x50, 0x85, 0x2A, 0xDA, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x2A, 0x55, 0x8C, 0x4C, 0xD6, 0x62, 0xE0, 0xB7, 0x4E, 0x28, 0x9D, 0x74, 0x6A, 0xEA, 0x2F,
        0x8C, 0xF8, 0xE5, 0x4F, 0x7C,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 27
    let hash = [
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFE, 0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36,
        0x41, 0x40,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0x4F, 0x8A, 0xE3, 0xBD, 0x75, 0x35, 0x24, 0x8D, 0x0B, 0xD4, 0x48, 0x29, 0x8C,
        0xC2, 0xE2, 0x07, 0x1E, 0x56, 0x99, 0x2D, 0x07, 0x74, 0xDC, 0x34, 0x0C, 0x36, 0x8A, 0xE9,
        0x50, 0x85, 0x2A, 0xDA, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xC4, 0x1A, 0xBA, 0x9E, 0x06, 0xFA, 0xC6, 0x97, 0x66, 0x18, 0x82, 0x0D, 0x04, 0xD2, 0x47,
        0xFF, 0xD3, 0x8F, 0x62, 0xFF,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 28
    let hash = [
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFE, 0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36,
        0x41, 0x42,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0x4F, 0x8A, 0xE3, 0xBD, 0x75, 0x35, 0x24, 0x8D, 0x0B, 0xD4, 0x48, 0x29, 0x8C,
        0xC2, 0xE2, 0x07, 0x1E, 0x56, 0x99, 0x2D, 0x07, 0x74, 0xDC, 0x34, 0x0C, 0x36, 0x8A, 0xE9,
        0x50, 0x85, 0x2A, 0xDA, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x7A, 0x34, 0x3F, 0x50, 0xDD, 0x8F, 0xAF, 0xA7, 0x64, 0x06, 0xF6, 0xEE, 0x4D, 0xA1, 0x79,
        0x6F, 0xF9, 0xA0, 0x61, 0x09,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 29
    let hash = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0x4F, 0x8A, 0xE3, 0xBD, 0x75, 0x35, 0x24, 0x8D, 0x0B, 0xD4, 0x48, 0x29, 0x8C,
        0xC2, 0xE2, 0x07, 0x1E, 0x56, 0x99, 0x2D, 0x07, 0x74, 0xDC, 0x34, 0x0C, 0x36, 0x8A, 0xE9,
        0x50, 0x85, 0x2A, 0xDA, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x7A, 0x34, 0x3F, 0x50, 0xDD, 0x8F, 0xAF, 0xA7, 0x64, 0x06, 0xF6, 0xEE, 0x4D, 0xA1, 0x79,
        0x6F, 0xF9, 0xA0, 0x61, 0x09,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 30
    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0x4F, 0x8A, 0xE3, 0xBD, 0x75, 0x35, 0x24, 0x8D, 0x0B, 0xD4, 0x48, 0x29, 0x8C,
        0xC2, 0xE2, 0x07, 0x1E, 0x56, 0x99, 0x2D, 0x07, 0x74, 0xDC, 0x34, 0x0C, 0x36, 0x8A, 0xE9,
        0x50, 0x85, 0x2A, 0xDA, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xE0, 0x77, 0xFD, 0x3C, 0x95, 0x83, 0x03, 0xE3, 0x63, 0x09, 0xB9, 0xEE, 0x20, 0xAE, 0x9D,
        0x3D, 0x59, 0x81, 0x72, 0x32,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 38 s == (N-1)/2 + 1
    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x5D, 0x57, 0x6E, 0x73, 0x57, 0xA4, 0x50, 0x1D, 0xDF, 0xE9, 0x2F, 0x46,
        0x68, 0x1B, 0x20, 0xA1, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x4E, 0xF4, 0x45, 0xCA, 0xDD, 0x8B, 0xEE, 0x8A, 0x02, 0xBC, 0x79, 0xB3, 0x0A, 0x97, 0xE6,
        0xFE, 0x3A, 0xE3, 0xB7, 0xA3,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 39 s == N/2
    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x5D, 0x57, 0x6E, 0x73, 0x57, 0xA4, 0x50, 0x1D, 0xDF, 0xE9, 0x2F, 0x46,
        0x68, 0x1B, 0x20, 0xA0, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xB2, 0x9F, 0x65, 0xAA, 0x40, 0x16, 0x60, 0xDF, 0xA9, 0x6E, 0xCD, 0x7E, 0xB2, 0x81, 0x34,
        0xD8, 0x7E, 0x9A, 0x61, 0x8D,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 40
    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x5D, 0x57, 0x6E, 0x73, 0x57, 0xA4, 0x50, 0x1D, 0xDF, 0xE9, 0x2F, 0x46,
        0x68, 0x1B, 0x20, 0xA2, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xFE, 0x70, 0x6A, 0xA7, 0xFE, 0x34, 0x55, 0xF2, 0x9E, 0x0F, 0x55, 0x53, 0xD9, 0xC7, 0x80,
        0xBE, 0x3B, 0xD5, 0x45, 0x64,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 41
    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFE, 0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E, 0x8C,
        0xD0, 0x36, 0x41, 0x40, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xC8, 0x46, 0xE2, 0xE4, 0xAB, 0x85, 0xA7, 0x61, 0x04, 0x22, 0x65, 0xB9, 0xA8, 0xD9, 0x95,
        0x34, 0x54, 0x32, 0xA6, 0x0E,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 43
    let hash = [
        0x3C, 0xC4, 0xCB, 0x05, 0x04, 0x78, 0xC4, 0x98, 0x77, 0x18, 0x8E, 0x4F, 0xBD, 0x02, 0x2F,
        0x35, 0xCC, 0xB4, 0x1C, 0xEE, 0x02, 0xD9, 0xD4, 0x41, 0x71, 0x94, 0xCB, 0xF7, 0xEB, 0xC1,
        0xEE, 0xBE,
    ];
    let sig = [
        0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC, 0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B,
        0x07, 0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9, 0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8,
        0x17, 0x98, 0x2B, 0xCF, 0x13, 0xB5, 0xE4, 0xF3, 0x4A, 0x04, 0xA7, 0x73, 0x44, 0xD5, 0x94,
        0x3E, 0x02, 0x28, 0xBA, 0x2E, 0x78, 0x75, 0x83, 0x03, 0x63, 0x25, 0x45, 0x0C, 0x88, 0x9D,
        0x59, 0x7A, 0x16, 0xC4, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x3C, 0x8B, 0x5F, 0x24, 0x26, 0x54, 0x96, 0x58, 0xF4, 0x25, 0xFA, 0xD7, 0xE0, 0x61, 0xC5,
        0x00, 0x62, 0x6B, 0x39, 0xA3,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 44
    let hash = [
        0x3C, 0xC4, 0xCB, 0x05, 0x04, 0x78, 0xC4, 0x98, 0x77, 0x18, 0x8E, 0x4F, 0xBD, 0x02, 0x2F,
        0x35, 0xCC, 0xB4, 0x1C, 0xEE, 0x02, 0xD9, 0xD4, 0x41, 0x71, 0x94, 0xCB, 0xF7, 0xEB, 0xC1,
        0xEE, 0xBE,
    ];
    let sig = [
        0x79, 0xBE, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC, 0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B,
        0x07, 0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9, 0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8,
        0x17, 0x98, 0x2B, 0xCF, 0x13, 0xB5, 0xE4, 0xF3, 0x4A, 0x04, 0xA7, 0x73, 0x44, 0xD5, 0x94,
        0x3E, 0x02, 0x28, 0xBA, 0x2E, 0x78, 0x75, 0x83, 0x03, 0x63, 0x25, 0x45, 0x0C, 0x88, 0x9D,
        0x59, 0x7A, 0x16, 0xC4, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x68, 0x75, 0x26, 0xAD, 0x23, 0x3C, 0x19, 0xB0, 0xA9, 0xB2, 0xEB, 0x8C, 0x96, 0xD1, 0xA4,
        0x56, 0x03, 0xF3, 0x91, 0x9E,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 45
    let hash = [
        0x3C, 0xC4, 0xCB, 0x05, 0x04, 0x78, 0xC4, 0x98, 0x77, 0x18, 0x8E, 0x4F, 0xBD, 0x02, 0x2F,
        0x35, 0xCC, 0xB4, 0x1C, 0xEE, 0x02, 0xD9, 0xD4, 0x41, 0x71, 0x94, 0xCB, 0xF7, 0xEB, 0xC1,
        0xEE, 0xC0,
    ];
    let sig = [
        0xC6, 0x04, 0x7F, 0x94, 0x41, 0xED, 0x7D, 0x6D, 0x30, 0x45, 0x40, 0x6E, 0x95, 0xC0, 0x7C,
        0xD8, 0x5C, 0x77, 0x8E, 0x4B, 0x8C, 0xEF, 0x3C, 0xA7, 0xAB, 0xAC, 0x09, 0xB9, 0x5C, 0x70,
        0x9E, 0xE5, 0x2B, 0xCF, 0x13, 0xB5, 0xE4, 0xF3, 0x4A, 0x04, 0xA7, 0x73, 0x44, 0xD5, 0x94,
        0x3E, 0x02, 0x28, 0xBA, 0x2E, 0x78, 0x75, 0x83, 0x03, 0x63, 0x25, 0x45, 0x0C, 0x88, 0x9D,
        0x59, 0x7A, 0x16, 0xC8, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x89, 0xFE, 0xA1, 0x98, 0xBD, 0x4A, 0x0E, 0xFB, 0x63, 0xF3, 0x6B, 0x5A, 0x04, 0xC9, 0x93,
        0xCC, 0xA3, 0xA1, 0x89, 0x1D,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 46
    let hash = [
        0x3C, 0xC4, 0xCB, 0x05, 0x04, 0x78, 0xC4, 0x98, 0x77, 0x18, 0x8E, 0x4F, 0xBD, 0x02, 0x2F,
        0x35, 0xCC, 0xB4, 0x1C, 0xEE, 0x02, 0xD9, 0xD4, 0x41, 0x71, 0x94, 0xCB, 0xF7, 0xEB, 0xC1,
        0xEE, 0xC0,
    ];
    let sig = [
        0xC6, 0x04, 0x7F, 0x94, 0x41, 0xED, 0x7D, 0x6D, 0x30, 0x45, 0x40, 0x6E, 0x95, 0xC0, 0x7C,
        0xD8, 0x5C, 0x77, 0x8E, 0x4B, 0x8C, 0xEF, 0x3C, 0xA7, 0xAB, 0xAC, 0x09, 0xB9, 0x5C, 0x70,
        0x9E, 0xE5, 0x2B, 0xCF, 0x13, 0xB5, 0xE4, 0xF3, 0x4A, 0x04, 0xA7, 0x73, 0x44, 0xD5, 0x94,
        0x3E, 0x02, 0x28, 0xBA, 0x2E, 0x78, 0x75, 0x83, 0x03, 0x63, 0x25, 0x45, 0x0C, 0x88, 0x9D,
        0x59, 0x7A, 0x16, 0xC8, 0x01,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0xC6, 0x13, 0x18, 0x2E, 0x8D, 0xA0, 0x92, 0x20, 0x17, 0x65, 0xF8, 0x52, 0xE3, 0xD6, 0xFB,
        0xEC, 0x4D, 0x28, 0x14, 0x32,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 47
    let hash = [
        0x3C, 0xC4, 0xCB, 0x05, 0x04, 0x78, 0xC4, 0x98, 0x77, 0x18, 0x8E, 0x4F, 0xBD, 0x02, 0x2F,
        0x35, 0xCC, 0xB4, 0x1C, 0xEE, 0x02, 0xD9, 0xD4, 0x41, 0x71, 0x94, 0xCB, 0xF7, 0xEB, 0xC1,
        0xEE, 0xC1,
    ];
    let sig = [
        0xC6, 0x04, 0x7F, 0x94, 0x41, 0xED, 0x7D, 0x6D, 0x30, 0x45, 0x40, 0x6E, 0x95, 0xC0, 0x7C,
        0xD8, 0x5C, 0x77, 0x8E, 0x4B, 0x8C, 0xEF, 0x3C, 0xA7, 0xAB, 0xAC, 0x09, 0xB9, 0x5C, 0x70,
        0x9E, 0xE5, 0x2B, 0xCF, 0x13, 0xB5, 0xE4, 0xF3, 0x4A, 0x04, 0xA7, 0x73, 0x44, 0xD5, 0x94,
        0x3E, 0x02, 0x28, 0xBA, 0x2E, 0x78, 0x75, 0x83, 0x03, 0x63, 0x25, 0x45, 0x0C, 0x88, 0x9D,
        0x59, 0x7A, 0x16, 0xC8, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x17, 0x72, 0xBF, 0x1C, 0xFA, 0x31, 0x0F, 0xDC, 0xA3, 0x61, 0xEE, 0x65, 0x82, 0x5A, 0x74,
        0x01, 0x3E, 0xEA, 0xA1, 0x7E,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 48
    let hash = [
        0x3C, 0xC4, 0xCB, 0x05, 0x04, 0x78, 0xC4, 0x98, 0x77, 0x18, 0x8E, 0x4F, 0xBD, 0x02, 0x2F,
        0x35, 0xCC, 0xB4, 0x1C, 0xEE, 0x02, 0xD9, 0xD4, 0x41, 0x71, 0x94, 0xCB, 0xF7, 0xEB, 0xC1,
        0xEE, 0xBE,
    ];
    let sig = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x17, 0x98, 0x2B, 0xCF, 0x13, 0xB5, 0xE4, 0xF3, 0x4A, 0x04, 0xA7, 0x73, 0x44, 0xD5, 0x94,
        0x3E, 0x02, 0x28, 0xBA, 0x2E, 0x78, 0x75, 0x83, 0x03, 0x63, 0x25, 0x45, 0x0C, 0x88, 0x9D,
        0x59, 0x7A, 0x16, 0xC4, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x94, 0x46, 0xD3, 0x7B, 0x3A, 0xAE, 0xDC, 0x97, 0xB2, 0xA8, 0xA9, 0x43, 0x79, 0x98, 0xBA,
        0x57, 0x87, 0xA2, 0xD5, 0xCB,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 49
    let hash = [
        0x3C, 0xC4, 0xCB, 0x05, 0x04, 0x78, 0xC4, 0x98, 0x77, 0x18, 0x8E, 0x4F, 0xBD, 0x02, 0x2F,
        0x35, 0xCC, 0xB4, 0x1C, 0xEE, 0x02, 0xD9, 0xD4, 0x41, 0x71, 0x94, 0xCB, 0xF7, 0xEB, 0xC1,
        0xEE, 0xBE,
    ];
    let sig = [
        0x00, 0x1E, 0x66, 0x7E, 0xF9, 0xDC, 0xBB, 0xAC, 0x55, 0xA0, 0x62, 0x95, 0xCE, 0x87, 0x0B,
        0x07, 0x02, 0x9B, 0xFC, 0xDB, 0x2D, 0xCE, 0x28, 0xD9, 0x59, 0xF2, 0x81, 0x5B, 0x16, 0xF8,
        0x17, 0x98, 0x2B, 0xCF, 0x13, 0xB5, 0xE4, 0xF3, 0x4A, 0x04, 0xA7, 0x73, 0x44, 0xD5, 0x94,
        0x3E, 0x02, 0x28, 0xBA, 0x2E, 0x78, 0x75, 0x83, 0x03, 0x63, 0x25, 0x45, 0x0C, 0x88, 0x9D,
        0x59, 0x7A, 0x16, 0xC4, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x4C, 0x90, 0x56, 0x36, 0x74, 0xAB, 0x8D, 0xE6, 0xF7, 0x73, 0x14, 0x75, 0xA0, 0x1A, 0x2B,
        0xD0, 0x9F, 0xD7, 0xB4, 0xB1,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);

    // Test 50
    let hash = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x3E, 0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36,
        0x41, 0x42,
    ];
    let sig = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xBF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0x00,
    ];
    let (addr, error_code) = ecrecover(&sig, &hash);
    let addr_expected = [
        0x07, 0xE3, 0x8C, 0x83, 0x26, 0xCE, 0xDA, 0xEE, 0x22, 0x62, 0xB2, 0x8B, 0xD1, 0x92, 0x3D,
        0x6A, 0xD4, 0xCB, 0x8E, 0xE0,
    ];
    assert_eq!(error_code, 0);
    assert_eq!(addr, addr_expected);
}

pub fn invalid_tests() {
    // r == 0
    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x4F, 0x8A, 0xE3, 0xBD, 0x75, 0x35, 0x24, 0x8D, 0x0B, 0xD4, 0x48, 0x29, 0x8C,
        0xC2, 0xE2, 0x07, 0x1E, 0x56, 0x99, 0x2D, 0x07, 0x74, 0xDC, 0x34, 0x0C, 0x36, 0x8A, 0xE9,
        0x50, 0x85, 0x2A, 0xDA, 0x01,
    ];
    let (_, error_code) = ecrecover(&sig, &hash);
    assert_eq!(error_code, 1);

    // r == N
    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFE, 0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36,
        0x41, 0x41, 0x4F, 0x8A, 0xE3, 0xBD, 0x75, 0x35, 0x24, 0x8D, 0x0B, 0xD4, 0x48, 0x29, 0x8C,
        0xC2, 0xE2, 0x07, 0x1E, 0x56, 0x99, 0x2D, 0x07, 0x74, 0xDC, 0x34, 0x0C, 0x36, 0x8A, 0xE9,
        0x50, 0x85, 0x2A, 0xDA, 0x01,
    ];
    let (_, error_code) = ecrecover(&sig, &hash);
    assert_eq!(error_code, 2);

    // r > N
    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFE, 0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E, 0x8C, 0xD0, 0x36,
        0x41, 0x42, 0x4F, 0x8A, 0xE3, 0xBD, 0x75, 0x35, 0x24, 0x8D, 0x0B, 0xD4, 0x48, 0x29, 0x8C,
        0xC2, 0xE2, 0x07, 0x1E, 0x56, 0x99, 0x2D, 0x07, 0x74, 0xDC, 0x34, 0x0C, 0x36, 0x8A, 0xE9,
        0x50, 0x85, 0x2A, 0xDA, 0x01,
    ];
    let (_, error_code) = ecrecover(&sig, &hash);
    assert_eq!(error_code, 2);

    // s == 0 (precompiled and tx)
    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01,
    ];
    let (_, error_code) = ecrecover(&sig, &hash);
    assert_eq!(error_code, 3);

    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x01,
    ];
    let (_, error_code) = ecrecover(&sig, &hash);
    assert_eq!(error_code, 3);

    // s == N (precompiled and tx)
    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFE, 0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E, 0x8C,
        0xD0, 0x36, 0x41, 0x41, 0x01,
    ];
    let (_, error_code) = ecrecover(&sig, &hash);
    assert_eq!(error_code, 4);

    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFE, 0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E, 0x8C,
        0xD0, 0x36, 0x41, 0x41, 0x01,
    ];
    let (_, error_code) = ecrecover(&sig, &hash);
    assert_eq!(error_code, 4);

    // s == N + 1 (precompiled and tx)
    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFE, 0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E, 0x8C,
        0xD0, 0x36, 0x41, 0x42, 0x01,
    ];
    let (_, error_code) = ecrecover(&sig, &hash);
    assert_eq!(error_code, 4);

    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFE, 0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E, 0x8C,
        0xD0, 0x36, 0x41, 0x42, 0x01,
    ];
    let (_, error_code) = ecrecover(&sig, &hash);
    assert_eq!(error_code, 4);

    // v > 1
    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x92, 0x42, 0x68, 0x5B, 0xF1, 0x61, 0x79, 0x3C, 0xC2, 0x56, 0x03, 0xC2, 0x31, 0xBC, 0x2F,
        0x56, 0x8E, 0xB6, 0x30, 0xEA, 0x16, 0xAA, 0x13, 0x7D, 0x26, 0x64, 0xAC, 0x80, 0x38, 0x82,
        0x56, 0x08, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFE, 0xBA, 0xAE, 0xDC, 0xE6, 0xAF, 0x48, 0xA0, 0x3B, 0xBF, 0xD2, 0x5E, 0x8C,
        0xD0, 0x36, 0x41, 0x40, 0x02,
    ];
    let (_, error_code) = ecrecover(&sig, &hash);
    assert_eq!(error_code, 5);

    // r is not a valid x-coordinate
    let hash = [
        0x45, 0x6E, 0x9A, 0xEA, 0x5E, 0x19, 0x7A, 0x1F, 0x1A, 0xF7, 0xA3, 0xE8, 0x5A, 0x32, 0x12,
        0xFA, 0x40, 0x49, 0xA3, 0xBA, 0x34, 0xC2, 0x28, 0x9B, 0x4C, 0x86, 0x0F, 0xC0, 0xB0, 0xC6,
        0x4E, 0xF3,
    ];
    let sig = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x05, 0x4F, 0x8A, 0xE3, 0xBD, 0x75, 0x35, 0x24, 0x8D, 0x0B, 0xD4, 0x48, 0x29, 0x8C,
        0xC2, 0xE2, 0x07, 0x1E, 0x56, 0x99, 0x2D, 0x07, 0x74, 0xDC, 0x34, 0x0C, 0x36, 0x8A, 0xE9,
        0x50, 0x85, 0x2A, 0xDA, 0x01,
    ];
    let (_, error_code) = ecrecover(&sig, &hash);
    assert_eq!(error_code, 6);

    // pk = point at infinity
    let hash = [
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x01,
    ];
    let sig = [
        0xC6, 0x04, 0x7F, 0x94, 0x41, 0xED, 0x7D, 0x6D, 0x30, 0x45, 0x40, 0x6E, 0x95, 0xC0, 0x7C,
        0xD8, 0x5C, 0x77, 0x8E, 0x4B, 0x8C, 0xEF, 0x3C, 0xA7, 0xAB, 0xAC, 0x09, 0xB9, 0x5C, 0x70,
        0x9E, 0xE5, 0x7F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x5D, 0x57, 0x6E, 0x73, 0x57, 0xA4, 0x50, 0x1D, 0xDF, 0xE9, 0x2F, 0x46,
        0x68, 0x1B, 0x20, 0xA1, 0x00,
    ];
    let (_, error_code) = ecrecover(&sig, &hash);
    assert_eq!(error_code, 7);
}
