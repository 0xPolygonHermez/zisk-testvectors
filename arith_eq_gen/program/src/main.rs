#![no_main]
ziskos::entrypoint!(main);

use ziskos::read_input;
use ziskos::syscalls::{
    arith256::*, arith256_mod::*, point256::*, secp256k1_add::*, secp256k1_dbl::*,
};

fn main() {
    // Get the input from ziskos
    let _input: Vec<u8> = read_input();

    let mut p1 = SyscallPoint256 {
        x: [0, 0, 0, 0],
        y: [0, 0, 0, 0],
    };
    let p2 = SyscallPoint256 {
        x: [0, 0, 0, 0],
        y: [0, 0, 0, 0],
    };
    let mut params = SyscallSecp256k1AddParams {
        p1: &mut p1,
        p2: &p2,
    };
    // secp256k1_add test rows: 0-15

    let mut p1 = SyscallPoint256 {
        x: [
            6481385041966929816,
            188021827762530521,
            6170039885052185351,
            8772561819708210092,
        ],
        y: [
            11261198710074299576,
            18237243440184513561,
            6747795201694173352,
            5204712524664259685,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            12370272968204394213,
            6662950628856118439,
            3478257130916576472,
            14268669794154544493,
        ],
        y: [
            2550217892273579306,
            17867523981857706209,
            11800983642684844782,
            1936944757666071353,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            9656264143134537465,
            13056436995607206320,
            5274928500377997865,
            17956003453681058576,
        ],
        y: [
            7834571707967399538,
            7278003473310950171,
            1144820191972553558,
            4075611493812267028,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 16-31

    let mut p1 = SyscallPoint256 {
        x: [
            3388248522597430614,
            9436808338628714891,
            2325328641075066323,
            18444909905599983268,
        ],
        y: [
            4361468193159901847,
            16033079614159971488,
            17563640529965925728,
            12543219280952145440,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            5550006413009698729,
            2930477944108794843,
            4206160142528515078,
            11862148329463583523,
        ],
        y: [
            7472242686678486130,
            6550614526735030299,
            16155668332989636091,
            14732040278589264792,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            13491366187209133817,
            9787663170891684295,
            15066831866609717056,
            16222008669425868485,
        ],
        y: [
            10828095770060190560,
            15914172361422008262,
            17539250198297628983,
            3506387567980440284,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 32-47

    let mut p1 = SyscallPoint256 {
        x: [
            14245154385136969818,
            7529161239585360219,
            1568254326717236787,
            14992788640288429595,
        ],
        y: [
            7711599709454213927,
            8728974837485694290,
            12156980350441740309,
            12246219763152707799,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            13491366187209133817,
            9787663170891684295,
            15066831866609717056,
            16222008669425868485,
        ],
        y: [
            10828095770060190560,
            15914172361422008262,
            17539250198297628983,
            3506387567980440284,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            13822370467126228980,
            2506116985832354287,
            9022235008297346450,
            15397375212876642037,
        ],
        y: [
            1787767364889970620,
            10161053720274063512,
            4877735586038743837,
            1162801841474012042,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 48-63

    let mut p1 = SyscallPoint256 {
        x: [
            361059452381750990,
            7508086908927522708,
            9998163320986307337,
            18334932765985551316,
        ],
        y: [
            10920898125377357247,
            134132599253277986,
            15252363593060096385,
            7517033372555823720,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            13822370467126228980,
            2506116985832354287,
            9022235008297346450,
            15397375212876642037,
        ],
        y: [
            1787767364889970620,
            10161053720274063512,
            4877735586038743837,
            1162801841474012042,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            5162560989827175816,
            16402521221305440318,
            3171626711978951353,
            17965666173449799390,
        ],
        y: [
            14722103743709784799,
            2214560160701558786,
            17158889244957832243,
            161006794594479835,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 64-79

    let mut p1 = SyscallPoint256 {
        x: [
            11229849546581927363,
            18183172613498203073,
            12988774327542766411,
            7983249766513717373,
        ],
        y: [
            5299100104091797096,
            4200004925846514740,
            6426451471226140064,
            15348588267406231312,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            5162560989827175816,
            16402521221305440318,
            3171626711978951353,
            17965666173449799390,
        ],
        y: [
            14722103743709784799,
            2214560160701558786,
            17158889244957832243,
            161006794594479835,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            5852346876279720151,
            12443874794687512882,
            12245491628790112107,
            1861861903343037182,
        ],
        y: [
            12461825173258948930,
            736104182521454076,
            1041363746078943805,
            2457324180629681371,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 80-95

    let mut p1 = SyscallPoint256 {
        x: [
            4869300263515369699,
            11686477369051177892,
            10351046573905852206,
            4543710797049982351,
        ],
        y: [
            14628406147340517455,
            10736903920457307044,
            16792687194968752563,
            14656639356436790417,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            5852346876279720151,
            12443874794687512882,
            12245491628790112107,
            1861861903343037182,
        ],
        y: [
            12461825173258948930,
            736104182521454076,
            1041363746078943805,
            2457324180629681371,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            269858136879743061,
            4111365287215060192,
            9052968481472801665,
            713258727124895890,
        ],
        y: [
            2254907716061116340,
            17921068610847361503,
            15955208585682828903,
            12784054924380092928,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 96-111

    let mut p1 = SyscallPoint256 {
        x: [
            14391060156941997906,
            16682396899684982862,
            9308341629085326058,
            15537658789411800629,
        ],
        y: [
            13528856402216537844,
            855755022726772546,
            17794446170121208933,
            10459452768711114802,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            269858136879743061,
            4111365287215060192,
            9052968481472801665,
            713258727124895890,
        ],
        y: [
            2254907716061116340,
            17921068610847361503,
            15955208585682828903,
            12784054924380092928,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            9582940641673426435,
            1186477552418578423,
            11448072416566699141,
            206687144183628328,
        ],
        y: [
            15542266276306060178,
            2004272385792900881,
            5996941556387902280,
            1780552388856869273,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 112-127

    let mut p1 = SyscallPoint256 {
        x: [
            12180186410187710597,
            13074317468773359492,
            1212500563603673519,
            3766037359670906174,
        ],
        y: [
            7869060398548210392,
            110983775202227839,
            5723666432541990313,
            7357327491894833029,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            9582940641673426435,
            1186477552418578423,
            11448072416566699141,
            206687144183628328,
        ],
        y: [
            15542266276306060178,
            2004272385792900881,
            5996941556387902280,
            1780552388856869273,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            13041071917170456817,
            16406377190915707657,
            14889059541729264028,
            3234355663149661257,
        ],
        y: [
            15822955659836146615,
            6310589687302593,
            8658486813739320610,
            817024074903823074,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 128-143

    let mut p1 = SyscallPoint256 {
        x: [
            18229459384247684602,
            684707198064386436,
            980149713513319584,
            9395299577453190220,
        ],
        y: [
            3877591415008278378,
            6320499931082966136,
            7421617926466391860,
            9510922786123587150,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            13041071917170456817,
            16406377190915707657,
            14889059541729264028,
            3234355663149661257,
        ],
        y: [
            15822955659836146615,
            6310589687302593,
            8658486813739320610,
            817024074903823074,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            11163181480235840359,
            14096725224313550807,
            16102908571542620524,
            12354825009720789442,
        ],
        y: [
            14430857626809263081,
            14227595315061545635,
            5150125880527090062,
            18070129506915093305,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 144-159

    let mut p1 = SyscallPoint256 {
        x: [
            15095153298253046284,
            5303204884433242329,
            14271294903557756800,
            1608814916597982061,
        ],
        y: [
            7828074314403099341,
            84151435424685138,
            16932014280599564316,
            231980500341718906,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            11163181480235840359,
            14096725224313550807,
            16102908571542620524,
            12354825009720789442,
        ],
        y: [
            14430857626809263081,
            14227595315061545635,
            5150125880527090062,
            18070129506915093305,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            18141523963158533489,
            15595433983440287811,
            4352313414564922948,
            15304126723928210086,
        ],
        y: [
            6323912894755555605,
            12678016417103873055,
            3343686957378346688,
            25737814545654128,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 160-175

    let mut p1 = SyscallPoint256 {
        x: [
            5175809867597589453,
            6112508711071501135,
            6960504755495188287,
            15320934750850643004,
        ],
        y: [
            16603242195010847682,
            1341035381658710065,
            15548816972008125270,
            374330460415019277,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            18141523963158533489,
            15595433983440287811,
            4352313414564922948,
            15304126723928210086,
        ],
        y: [
            6323912894755555605,
            12678016417103873055,
            3343686957378346688,
            25737814545654128,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            1094065303696208448,
            16344354570360019767,
            13827564859011217877,
            12903184145084862300,
        ],
        y: [
            1245072108431029466,
            4737598162911875980,
            13654603555467546707,
            16744524669146169731,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 176-191

    let mut p1 = SyscallPoint256 {
        x: [
            6049190514384470666,
            1382238135566132255,
            1028123464921783413,
            6887276088214724213,
        ],
        y: [
            13829158347396631936,
            10117019307876977412,
            16568876609164211038,
            2790195167144050408,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            1094065303696208448,
            16344354570360019767,
            13827564859011217877,
            12903184145084862300,
        ],
        y: [
            1245072108431029466,
            4737598162911875980,
            13654603555467546707,
            16744524669146169731,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            4108648498588573775,
            9184144659800820744,
            8139982771501597765,
            11878897445941668857,
        ],
        y: [
            8010775560317714567,
            13207243562382678217,
            2069000135717376221,
            4306849699615995068,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 192-207

    let mut p1 = SyscallPoint256 {
        x: [
            7329600635844956694,
            4572057379606856554,
            1336260601171668306,
            15741542477464055028,
        ],
        y: [
            15775320700018001266,
            16837481790980148954,
            16076128951343087558,
            8356605334306084336,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            4108648498588573775,
            9184144659800820744,
            8139982771501597765,
            11878897445941668857,
        ],
        y: [
            8010775560317714567,
            13207243562382678217,
            2069000135717376221,
            4306849699615995068,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            17316478588240273279,
            17194587335252601303,
            15974886568808980373,
            4936814799599649201,
        ],
        y: [
            3904859781770592503,
            4885989130086194703,
            7579208590447118834,
            17635874452452737167,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 208-223

    let mut p1 = SyscallPoint256 {
        x: [
            10738044202431724224,
            1807366078262717190,
            1397443900249519886,
            10750357262808598172,
        ],
        y: [
            5155141259007419145,
            16310686023055039592,
            3809253083837576160,
            10321177611541094882,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            17316478588240273279,
            17194587335252601303,
            15974886568808980373,
            4936814799599649201,
        ],
        y: [
            3904859781770592503,
            4885989130086194703,
            7579208590447118834,
            17635874452452737167,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            1322065686598805203,
            6418129315048375838,
            7657541131051921320,
            17000681850086764716,
        ],
        y: [
            11047335463743714399,
            15610730330979148736,
            12364327458721030102,
            6652440655968728349,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 224-239

    let mut p1 = SyscallPoint256 {
        x: [
            463945003823832207,
            17474371098211739570,
            8001206879091110576,
            7475415578589698301,
        ],
        y: [
            6140739010600260313,
            14814938377153462974,
            11729983352586442387,
            8834749270810554244,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            1322065686598805203,
            6418129315048375838,
            7657541131051921320,
            17000681850086764716,
        ],
        y: [
            11047335463743714399,
            15610730330979148736,
            12364327458721030102,
            6652440655968728349,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            5713950615561495609,
            8041683058359059296,
            6009619030851677590,
            11357010413961933117,
        ],
        y: [
            12322365804966655193,
            14786421845530355111,
            4150882367077942388,
            15692732944913612157,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 240-255

    let mut p1 = SyscallPoint256 {
        x: [
            1295273892355154746,
            10129401683319168165,
            16093208732893648950,
            9888537620415219562,
        ],
        y: [
            7473736272472650821,
            11833745278707362626,
            17587576923453685554,
            14821718792216889502,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            5713950615561495609,
            8041683058359059296,
            6009619030851677590,
            11357010413961933117,
        ],
        y: [
            12322365804966655193,
            14786421845530355111,
            4150882367077942388,
            15692732944913612157,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            14112459023686954070,
            11765332665235294233,
            14923047166356253834,
            349093140243986112,
        ],
        y: [
            183628878045041348,
            4528548779057507129,
            13328074435666583347,
            14956768888758149683,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 256-271

    let mut p1 = SyscallPoint256 {
        x: [
            5442901514494762440,
            8068579949080609849,
            13440047785991771202,
            4913779344553672626,
        ],
        y: [
            3591977695608775603,
            11991442826445074000,
            18345839140001742551,
            10858391194666493688,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            14112459023686954070,
            11765332665235294233,
            14923047166356253834,
            349093140243986112,
        ],
        y: [
            183628878045041348,
            4528548779057507129,
            13328074435666583347,
            14956768888758149683,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            3062268612412726218,
            13392392407157940631,
            1411355184559711880,
            7985517814817512039,
        ],
        y: [
            4059251560375655144,
            6177606110121084199,
            4934273323312877493,
            366493205583397036,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 272-287

    let mut p1 = SyscallPoint256 {
        x: [
            4518765836368931242,
            7498818245279601483,
            13227717385055713490,
            16516969123953977005,
        ],
        y: [
            14175714478368387599,
            8050551974340866446,
            6586817248383241729,
            13366640209916572701,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            3062268612412726218,
            13392392407157940631,
            1411355184559711880,
            7985517814817512039,
        ],
        y: [
            4059251560375655144,
            6177606110121084199,
            4934273323312877493,
            366493205583397036,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            17575772300310138614,
            12431318927032221146,
            1460974789748516701,
            7883053580443548504,
        ],
        y: [
            9402541537984038308,
            18417754886573459057,
            4838423572481299259,
            15464509280828210181,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 288-303

    let mut p1 = SyscallPoint256 {
        x: [
            1940266508063891926,
            9984431616774062814,
            14093435390931967825,
            10637489008200751856,
        ],
        y: [
            16671943631316568944,
            10956117075848626050,
            11333022928271928324,
            16044983857828047118,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            17575772300310138614,
            12431318927032221146,
            1460974789748516701,
            7883053580443548504,
        ],
        y: [
            9402541537984038308,
            18417754886573459057,
            4838423572481299259,
            15464509280828210181,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            453874718208435914,
            991410516929405062,
            12123956665232519916,
            1116912005956542124,
        ],
        y: [
            5278792877088150769,
            14265231743380201299,
            2188645538782029408,
            13049382658328688434,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 304-319

    let mut p1 = SyscallPoint256 {
        x: [
            103041066207797471,
            5493182318505324371,
            541988339736127904,
            18286371861815636627,
        ],
        y: [
            17320919250874839455,
            8916760230381345237,
            16419967297028024504,
            2967218390301391698,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            453874718208435914,
            991410516929405062,
            12123956665232519916,
            1116912005956542124,
        ],
        y: [
            5278792877088150769,
            14265231743380201299,
            2188645538782029408,
            13049382658328688434,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            15159292604162686267,
            4730897740130147445,
            2071708234608980775,
            2131074080975141377,
        ],
        y: [
            9986330608556583152,
            14990185093737273450,
            14653762477376165914,
            1721459030046704998,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 320-335

    let mut p1 = SyscallPoint256 {
        x: [
            11574995974176117469,
            4414766936180469986,
            822679711507871630,
            8082199340442924335,
        ],
        y: [
            8222665182974650663,
            5177706092917081916,
            9067527580370240428,
            12749403413602153426,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            15159292604162686267,
            4730897740130147445,
            2071708234608980775,
            2131074080975141377,
        ],
        y: [
            9986330608556583152,
            14990185093737273450,
            14653762477376165914,
            1721459030046704998,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            13607899488517933402,
            5016059786498563456,
            5865386345088109455,
            3417186468862129292,
        ],
        y: [
            9933816199243592665,
            15192022654306330566,
            14491455573580872657,
            7364464128872969602,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 336-351

    let mut p1 = SyscallPoint256 {
        x: [
            15914243312412917186,
            15938066163142370148,
            5377971646883909246,
            17594455620906282567,
        ],
        y: [
            9362984259423688701,
            5482376278183694118,
            8717509125378925098,
            6291593226033725548,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            13607899488517933402,
            5016059786498563456,
            5865386345088109455,
            3417186468862129292,
        ],
        y: [
            9933816199243592665,
            15192022654306330566,
            14491455573580872657,
            7364464128872969602,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            4596637296931902290,
            5179284164833778328,
            5216904698233134048,
            3681576032549449949,
        ],
        y: [
            824082266476420257,
            605445595205419274,
            11578697185493671634,
            5863029753408550077,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 352-367

    let mut p1 = SyscallPoint256 {
        x: [
            4064169351091944918,
            5275808506650400396,
            14581098963839811052,
            3661373076866028107,
        ],
        y: [
            2737419666888123184,
            8794840480950624395,
            7063906367485990430,
            2415172074288609096,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            4596637296931902290,
            5179284164833778328,
            5216904698233134048,
            3681576032549449949,
        ],
        y: [
            824082266476420257,
            605445595205419274,
            11578697185493671634,
            5863029753408550077,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            216749545875972051,
            14058683194214034595,
            8352508619592551943,
            7203297682875879833,
        ],
        y: [
            1947837471752781879,
            15222269456860444980,
            16073304233080531074,
            9489451335855890382,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 368-383

    let mut p1 = SyscallPoint256 {
        x: [
            14872935670260899089,
            2498150643347925719,
            3733789054294541208,
            3824915211200202980,
        ],
        y: [
            6041292206277746165,
            10629888326564814526,
            17241135201711791871,
            9919233498831486648,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            216749545875972051,
            14058683194214034595,
            8352508619592551943,
            7203297682875879833,
        ],
        y: [
            1947837471752781879,
            15222269456860444980,
            16073304233080531074,
            9489451335855890382,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            8274876590141192350,
            95720123198723902,
            11090921260126014511,
            18095513945798992136,
        ],
        y: [
            6456369218473469706,
            3764627666486703286,
            9920020696404400423,
            6886645070032807292,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 384-399

    let mut p1 = SyscallPoint256 {
        x: [
            2695369873367973041,
            6294381136496828691,
            55775141394128843,
            7916937762851965652,
        ],
        y: [
            6331297647387634484,
            9273615160470511347,
            6672627684444104360,
            10486908704690529309,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            8274876590141192350,
            95720123198723902,
            11090921260126014511,
            18095513945798992136,
        ],
        y: [
            6456369218473469706,
            3764627666486703286,
            9920020696404400423,
            6886645070032807292,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            3501977551190874843,
            18299905126105441486,
            81834563298698649,
            5883038862270701221,
        ],
        y: [
            12537815785366635759,
            8008905523423489286,
            16380012217031625002,
            8631380985805656403,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 400-415

    let mut p1 = SyscallPoint256 {
        x: [
            5551767817086649981,
            4652370938384087758,
            3180093489577292009,
            10939354481072644386,
        ],
        y: [
            8751339588051317754,
            15735493227336269005,
            285915284228834847,
            9914480167209927372,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            3501977551190874843,
            18299905126105441486,
            81834563298698649,
            5883038862270701221,
        ],
        y: [
            12537815785366635759,
            8008905523423489286,
            16380012217031625002,
            8631380985805656403,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            18432287065923338713,
            5166766174961492788,
            1828793822852732212,
            13593841263226959975,
        ],
        y: [
            13896199101075208059,
            7062918950905956787,
            10963824917458864486,
            6520641051279386208,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 416-431

    let mut p1 = SyscallPoint256 {
        x: [
            14747068561044356076,
            10067230293567012455,
            17145682334294447914,
            3301079946884626365,
        ],
        y: [
            4499950505480655381,
            3977469822236581688,
            7345521315408168692,
            5105891058512077842,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            18432287065923338713,
            5166766174961492788,
            1828793822852732212,
            13593841263226959975,
        ],
        y: [
            13896199101075208059,
            7062918950905956787,
            10963824917458864486,
            6520641051279386208,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            8154615983424653897,
            7131836204146226003,
            15125915807250983712,
            16046912909942911914,
        ],
        y: [
            14721215721826705832,
            13213131517761040548,
            3455368700193666818,
            16176486201532394492,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 432-447

    let mut p1 = SyscallPoint256 {
        x: [
            1715052357432876570,
            9216418127752606358,
            17410964304851308150,
            2012054922371974568,
        ],
        y: [
            6338501016427430979,
            7499484979756890478,
            9978213532082457359,
            16381956913317963367,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            8154615983424653897,
            7131836204146226003,
            15125915807250983712,
            16046912909942911914,
        ],
        y: [
            14721215721826705832,
            13213131517761040548,
            3455368700193666818,
            16176486201532394492,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            10200771866082422070,
            15233400556993348024,
            1677199273022126766,
            16964552336732726619,
        ],
        y: [
            6243170004544308305,
            8844542287127595426,
            16359998086380573183,
            7016508127393210429,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 448-463

    let mut p1 = SyscallPoint256 {
        x: [
            17579371235244829931,
            8333242141519641328,
            3963088586427754516,
            4862346220812031056,
        ],
        y: [
            8314696884216234465,
            9737362729761478530,
            7618118829915412479,
            833565746329731887,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            10200771866082422070,
            15233400556993348024,
            1677199273022126766,
            16964552336732726619,
        ],
        y: [
            6243170004544308305,
            8844542287127595426,
            16359998086380573183,
            7016508127393210429,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            13855740576624240462,
            9310705850978512737,
            4315766627569668515,
            10763185061552723532,
        ],
        y: [
            8191496754499051172,
            13704118876820223148,
            8447513748640383780,
            14444170809305060500,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 464-479

    let mut p1 = SyscallPoint256 {
        x: [
            5520741925075747051,
            4734665894730203687,
            5313709858873347010,
            13299253594783667420,
        ],
        y: [
            1981332928802481742,
            14631503625348278887,
            5125823036125390694,
            8008746776286910607,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            13855740576624240462,
            9310705850978512737,
            4315766627569668515,
            10763185061552723532,
        ],
        y: [
            8191496754499051172,
            13704118876820223148,
            8447513748640383780,
            14444170809305060500,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            5180260000801893250,
            5576654165372914908,
            1309148430045953829,
            925958165987619575,
        ],
        y: [
            3499584381566724447,
            169741299846781908,
            11124353840197093508,
            14200096245096926612,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 480-495

    let mut p1 = SyscallPoint256 {
        x: [
            13391171581992757170,
            6822370424887535011,
            17525401371839857760,
            2758603646549901816,
        ],
        y: [
            10604421022012418612,
            6212954835810956803,
            10317515620428406552,
            11391251302118933656,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            5180260000801893250,
            5576654165372914908,
            1309148430045953829,
            925958165987619575,
        ],
        y: [
            3499584381566724447,
            169741299846781908,
            11124353840197093508,
            14200096245096926612,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            14735888330011328251,
            5573972878576151961,
            13852378029340426220,
            13379388281851196555,
        ],
        y: [
            5137151605102109369,
            1197419595926441242,
            5302579665649846651,
            1060689601918635210,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 496-511

    let mut p1 = SyscallPoint256 {
        x: [
            10849403525780439829,
            11289614090998189679,
            2181572784496621666,
            12368387090914152994,
        ],
        y: [
            17987381282621225994,
            4593589374930006840,
            7193780182280506735,
            11594338602946289371,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            14735888330011328251,
            5573972878576151961,
            13852378029340426220,
            13379388281851196555,
        ],
        y: [
            5137151605102109369,
            1197419595926441242,
            5302579665649846651,
            1060689601918635210,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            13071452706259432000,
            1561342327798404440,
            2239552469396240275,
            9360860172121362935,
        ],
        y: [
            4122765418885251096,
            12618215134047766937,
            2320148166506938950,
            14013265817654152112,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 512-527

    let mut p1 = SyscallPoint256 {
        x: [
            11293234787830732212,
            10553344111901552358,
            17115243093740210829,
            1218520766286310857,
        ],
        y: [
            3813394437315896717,
            5522971576380385928,
            5573108632631713653,
            14306307654481731650,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            13071452706259432000,
            1561342327798404440,
            2239552469396240275,
            9360860172121362935,
        ],
        y: [
            4122765418885251096,
            12618215134047766937,
            2320148166506938950,
            14013265817654152112,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            10006229491154365947,
            6727618987860397178,
            7046542328338385748,
            16187852099038820861,
        ],
        y: [
            8378464541065074023,
            9247520640360376019,
            12552124350768504496,
            10165896236998650687,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 528-543

    let mut p1 = SyscallPoint256 {
        x: [
            1108637335817030272,
            5576108730364894324,
            12789268458268260803,
            13164402591290150053,
        ],
        y: [
            13172185654463695363,
            11284352376475883246,
            11911495718141245140,
            18079188421163464222,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            10006229491154365947,
            6727618987860397178,
            7046542328338385748,
            16187852099038820861,
        ],
        y: [
            8378464541065074023,
            9247520640360376019,
            12552124350768504496,
            10165896236998650687,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            11623169190403283598,
            17068669642374506562,
            4141402140827765446,
            2179648726488660013,
        ],
        y: [
            10115867639754326390,
            12025547697042875110,
            852173907725251029,
            3386588260483922704,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 544-559

    let mut p1 = SyscallPoint256 {
        x: [
            12090657614458806996,
            8817177143830552897,
            503021151671951994,
            3861342605456894666,
        ],
        y: [
            11604268610577650434,
            15006137691171346865,
            13820669395044698774,
            17752030043910038985,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            11623169190403283598,
            17068669642374506562,
            4141402140827765446,
            2179648726488660013,
        ],
        y: [
            10115867639754326390,
            12025547697042875110,
            852173907725251029,
            3386588260483922704,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            1035927317643819034,
            17353136055061049415,
            4268115939027386742,
            4026602638594710033,
        ],
        y: [
            16871059498234949738,
            2233439322816396226,
            14062996002823185792,
            5651450137595941616,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 560-575

    let mut p1 = SyscallPoint256 {
        x: [
            18017764961173110055,
            4926752439929326690,
            14997611895299651099,
            11445686286449633356,
        ],
        y: [
            6445410683928888408,
            10711851183156513076,
            17182838910183961172,
            13128425468190650090,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            1035927317643819034,
            17353136055061049415,
            4268115939027386742,
            4026602638594710033,
        ],
        y: [
            16871059498234949738,
            2233439322816396226,
            14062996002823185792,
            5651450137595941616,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            1067311716169660418,
            1034337825024216295,
            3213517253338680327,
            3641775450275733519,
        ],
        y: [
            9683032282477615234,
            10904467368722975470,
            6951686410473066757,
            13391864800403857424,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 576-591

    let mut p1 = SyscallPoint256 {
        x: [
            6311271162047532419,
            7031687393186167137,
            7663647010047551963,
            12100037248868124140,
        ],
        y: [
            10826716363625643729,
            5162120399752083737,
            14977221076717961291,
            7063074885427487445,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            1067311716169660418,
            1034337825024216295,
            3213517253338680327,
            3641775450275733519,
        ],
        y: [
            9683032282477615234,
            10904467368722975470,
            6951686410473066757,
            13391864800403857424,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            13487453941517569908,
            243098374521548216,
            2229066818043626511,
            12491200930566995719,
        ],
        y: [
            9572133749335449565,
            16063873362822101876,
            11899161690482435933,
            15517155185699180930,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 592-607

    let mut p1 = SyscallPoint256 {
        x: [
            17476293204481810149,
            15730797396350667795,
            7360633096409230958,
            15317641942788415928,
        ],
        y: [
            7362722182936827048,
            1932374696440073692,
            17135174711157390174,
            152007121579973923,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            13487453941517569908,
            243098374521548216,
            2229066818043626511,
            12491200930566995719,
        ],
        y: [
            9572133749335449565,
            16063873362822101876,
            11899161690482435933,
            15517155185699180930,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            6840554336969258264,
            367545887029918008,
            4557615043444161796,
            11067145729364594586,
        ],
        y: [
            8985482730765902468,
            12212411486575038577,
            2524436988336709056,
            7603926967023226665,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 608-623

    let mut p1 = SyscallPoint256 {
        x: [
            5984682183816926538,
            12311996661131431934,
            5135883420287673068,
            9903195440301724064,
        ],
        y: [
            15460751836961650911,
            16575598903605598172,
            15736188084217256945,
            4036390641650549932,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            6840554336969258264,
            367545887029918008,
            4557615043444161796,
            11067145729364594586,
        ],
        y: [
            8985482730765902468,
            12212411486575038577,
            2524436988336709056,
            7603926967023226665,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            8069978617523194485,
            10040017498880799709,
            4070240834111844240,
            14397567833749315177,
        ],
        y: [
            2408303731189624197,
            18095238845897882862,
            9128836378019859423,
            2118495997885755559,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 624-639

    let mut p1 = SyscallPoint256 {
        x: [
            9513710291490163238,
            9077994736731300711,
            14586069155036100770,
            1275567076589399404,
        ],
        y: [
            15254394179475184984,
            4300413298620210498,
            10148128438355415995,
            7292206992328756304,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            8069978617523194485,
            10040017498880799709,
            4070240834111844240,
            14397567833749315177,
        ],
        y: [
            2408303731189624197,
            18095238845897882862,
            9128836378019859423,
            2118495997885755559,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            5313036004776658223,
            5748518594214101917,
            15965375769301489567,
            2394109371143714419,
        ],
        y: [
            17120705537189757149,
            10411841749873587876,
            3281661694091576154,
            5012240766734575141,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 640-655

    let mut p1 = SyscallPoint256 {
        x: [
            545887436851369351,
            6828787688065214038,
            3784847408168804653,
            5801960250918850699,
        ],
        y: [
            7960650550461533833,
            6752854485708698976,
            7033117147444881223,
            3794673124853157169,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            5313036004776658223,
            5748518594214101917,
            15965375769301489567,
            2394109371143714419,
        ],
        y: [
            17120705537189757149,
            10411841749873587876,
            3281661694091576154,
            5012240766734575141,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            10874910764848192175,
            9020727903069138557,
            5772256171017100028,
            1250219299188327156,
        ],
        y: [
            12796806836320033030,
            16993477809206151124,
            4672779604748745663,
            13049568263257569021,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 656-671

    let mut p1 = SyscallPoint256 {
        x: [
            545887436851369351,
            6828787688065214038,
            3784847408168804653,
            5801960250918850699,
        ],
        y: [
            7960650550461533833,
            6752854485708698976,
            7033117147444881223,
            3794673124853157169,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            545887436851369351,
            6828787688065214038,
            3784847408168804653,
            15025332287773626507,
        ],
        y: [
            17120705537189757149,
            10411841749873587876,
            3281661694091576154,
            5012240766734575141,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            2314528374966098503,
            2889063032665862748,
            8748168253325326142,
            7477973783986122508,
        ],
        y: [
            3180169149017043874,
            2251189934630892016,
            14075773856299550074,
            3978469940125499659,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 672-687

    let mut p1 = SyscallPoint256 {
        x: [
            545887436851369351,
            6828787688065214038,
            3784847408168804653,
            5801960250918850699,
        ],
        y: [
            7960650550461533833,
            6752854485708698976,
            7033117147444881223,
            3794673124853157169,
        ],
    };
    let p2 = SyscallPoint256 {
        x: [
            545887435628795271,
            6828787688065214038,
            3784847408168804653,
            5801960250918850699,
        ],
        y: [
            17120705537189757149,
            10411841749873587876,
            3281661694091576154,
            5012240766734575141,
        ],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [
            16302535435195808843,
            8543364680260097415,
            14908508942232280741,
            15497036330728249576,
        ],
        y: [
            6141349181170948100,
            1750840565155776462,
            5517384897023788690,
            9517308371755837438,
        ],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_dbl test rows: 688-703

    let mut p1 = SyscallPoint256 {
        x: [
            3388248522597430614,
            9436808338628714891,
            2325328641075066323,
            18444909905599983268,
        ],
        y: [
            4361468193159901847,
            16033079614159971488,
            17563640529965925728,
            12543219280952145440,
        ],
    };
/*
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            14245154385136969818,
            7529161239585360219,
            1568254326717236787,
            14992788640288429595,
        ],
        y: [
            7711599709454213927,
            8728974837485694290,
            12156980350441740309,
            12246219763152707799,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);
*/
    // secp256k1_dbl test rows: 704-719

    let mut p1 = SyscallPoint256 {
        x: [
            14245154385136969818,
            7529161239585360219,
            1568254326717236787,
            14992788640288429595,
        ],
        y: [
            7711599709454213927,
            8728974837485694290,
            12156980350441740309,
            12246219763152707799,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            361059452381750990,
            7508086908927522708,
            9998163320986307337,
            18334932765985551316,
        ],
        y: [
            10920898125377357247,
            134132599253277986,
            15252363593060096385,
            7517033372555823720,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 720-735

    let mut p1 = SyscallPoint256 {
        x: [
            361059452381750990,
            7508086908927522708,
            9998163320986307337,
            18334932765985551316,
        ],
        y: [
            10920898125377357247,
            134132599253277986,
            15252363593060096385,
            7517033372555823720,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            11229849546581927363,
            18183172613498203073,
            12988774327542766411,
            7983249766513717373,
        ],
        y: [
            5299100104091797096,
            4200004925846514740,
            6426451471226140064,
            15348588267406231312,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 736-751

    let mut p1 = SyscallPoint256 {
        x: [
            11229849546581927363,
            18183172613498203073,
            12988774327542766411,
            7983249766513717373,
        ],
        y: [
            5299100104091797096,
            4200004925846514740,
            6426451471226140064,
            15348588267406231312,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            4869300263515369699,
            11686477369051177892,
            10351046573905852206,
            4543710797049982351,
        ],
        y: [
            14628406147340517455,
            10736903920457307044,
            16792687194968752563,
            14656639356436790417,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 752-767

    let mut p1 = SyscallPoint256 {
        x: [
            4869300263515369699,
            11686477369051177892,
            10351046573905852206,
            4543710797049982351,
        ],
        y: [
            14628406147340517455,
            10736903920457307044,
            16792687194968752563,
            14656639356436790417,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            14391060156941997906,
            16682396899684982862,
            9308341629085326058,
            15537658789411800629,
        ],
        y: [
            13528856402216537844,
            855755022726772546,
            17794446170121208933,
            10459452768711114802,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 768-783

    let mut p1 = SyscallPoint256 {
        x: [
            14391060156941997906,
            16682396899684982862,
            9308341629085326058,
            15537658789411800629,
        ],
        y: [
            13528856402216537844,
            855755022726772546,
            17794446170121208933,
            10459452768711114802,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            12180186410187710597,
            13074317468773359492,
            1212500563603673519,
            3766037359670906174,
        ],
        y: [
            7869060398548210392,
            110983775202227839,
            5723666432541990313,
            7357327491894833029,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 784-799

    let mut p1 = SyscallPoint256 {
        x: [
            12180186410187710597,
            13074317468773359492,
            1212500563603673519,
            3766037359670906174,
        ],
        y: [
            7869060398548210392,
            110983775202227839,
            5723666432541990313,
            7357327491894833029,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            18229459384247684602,
            684707198064386436,
            980149713513319584,
            9395299577453190220,
        ],
        y: [
            3877591415008278378,
            6320499931082966136,
            7421617926466391860,
            9510922786123587150,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 800-815

    let mut p1 = SyscallPoint256 {
        x: [
            18229459384247684602,
            684707198064386436,
            980149713513319584,
            9395299577453190220,
        ],
        y: [
            3877591415008278378,
            6320499931082966136,
            7421617926466391860,
            9510922786123587150,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            15095153298253046284,
            5303204884433242329,
            14271294903557756800,
            1608814916597982061,
        ],
        y: [
            7828074314403099341,
            84151435424685138,
            16932014280599564316,
            231980500341718906,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 816-831

    let mut p1 = SyscallPoint256 {
        x: [
            15095153298253046284,
            5303204884433242329,
            14271294903557756800,
            1608814916597982061,
        ],
        y: [
            7828074314403099341,
            84151435424685138,
            16932014280599564316,
            231980500341718906,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            5175809867597589453,
            6112508711071501135,
            6960504755495188287,
            15320934750850643004,
        ],
        y: [
            16603242195010847682,
            1341035381658710065,
            15548816972008125270,
            374330460415019277,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 832-847

    let mut p1 = SyscallPoint256 {
        x: [
            5175809867597589453,
            6112508711071501135,
            6960504755495188287,
            15320934750850643004,
        ],
        y: [
            16603242195010847682,
            1341035381658710065,
            15548816972008125270,
            374330460415019277,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            6049190514384470666,
            1382238135566132255,
            1028123464921783413,
            6887276088214724213,
        ],
        y: [
            13829158347396631936,
            10117019307876977412,
            16568876609164211038,
            2790195167144050408,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 848-863

    let mut p1 = SyscallPoint256 {
        x: [
            6049190514384470666,
            1382238135566132255,
            1028123464921783413,
            6887276088214724213,
        ],
        y: [
            13829158347396631936,
            10117019307876977412,
            16568876609164211038,
            2790195167144050408,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            7329600635844956694,
            4572057379606856554,
            1336260601171668306,
            15741542477464055028,
        ],
        y: [
            15775320700018001266,
            16837481790980148954,
            16076128951343087558,
            8356605334306084336,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 864-879

    let mut p1 = SyscallPoint256 {
        x: [
            7329600635844956694,
            4572057379606856554,
            1336260601171668306,
            15741542477464055028,
        ],
        y: [
            15775320700018001266,
            16837481790980148954,
            16076128951343087558,
            8356605334306084336,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            10738044202431724224,
            1807366078262717190,
            1397443900249519886,
            10750357262808598172,
        ],
        y: [
            5155141259007419145,
            16310686023055039592,
            3809253083837576160,
            10321177611541094882,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 880-895

    let mut p1 = SyscallPoint256 {
        x: [
            10738044202431724224,
            1807366078262717190,
            1397443900249519886,
            10750357262808598172,
        ],
        y: [
            5155141259007419145,
            16310686023055039592,
            3809253083837576160,
            10321177611541094882,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            463945003823832207,
            17474371098211739570,
            8001206879091110576,
            7475415578589698301,
        ],
        y: [
            6140739010600260313,
            14814938377153462974,
            11729983352586442387,
            8834749270810554244,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 896-911

    let mut p1 = SyscallPoint256 {
        x: [
            463945003823832207,
            17474371098211739570,
            8001206879091110576,
            7475415578589698301,
        ],
        y: [
            6140739010600260313,
            14814938377153462974,
            11729983352586442387,
            8834749270810554244,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            1295273892355154746,
            10129401683319168165,
            16093208732893648950,
            9888537620415219562,
        ],
        y: [
            7473736272472650821,
            11833745278707362626,
            17587576923453685554,
            14821718792216889502,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 912-927

    let mut p1 = SyscallPoint256 {
        x: [
            1295273892355154746,
            10129401683319168165,
            16093208732893648950,
            9888537620415219562,
        ],
        y: [
            7473736272472650821,
            11833745278707362626,
            17587576923453685554,
            14821718792216889502,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            5442901514494762440,
            8068579949080609849,
            13440047785991771202,
            4913779344553672626,
        ],
        y: [
            3591977695608775603,
            11991442826445074000,
            18345839140001742551,
            10858391194666493688,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 928-943

    let mut p1 = SyscallPoint256 {
        x: [
            5442901514494762440,
            8068579949080609849,
            13440047785991771202,
            4913779344553672626,
        ],
        y: [
            3591977695608775603,
            11991442826445074000,
            18345839140001742551,
            10858391194666493688,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            4518765836368931242,
            7498818245279601483,
            13227717385055713490,
            16516969123953977005,
        ],
        y: [
            14175714478368387599,
            8050551974340866446,
            6586817248383241729,
            13366640209916572701,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 944-959

    let mut p1 = SyscallPoint256 {
        x: [
            4518765836368931242,
            7498818245279601483,
            13227717385055713490,
            16516969123953977005,
        ],
        y: [
            14175714478368387599,
            8050551974340866446,
            6586817248383241729,
            13366640209916572701,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            1940266508063891926,
            9984431616774062814,
            14093435390931967825,
            10637489008200751856,
        ],
        y: [
            16671943631316568944,
            10956117075848626050,
            11333022928271928324,
            16044983857828047118,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 960-975

    let mut p1 = SyscallPoint256 {
        x: [
            1940266508063891926,
            9984431616774062814,
            14093435390931967825,
            10637489008200751856,
        ],
        y: [
            16671943631316568944,
            10956117075848626050,
            11333022928271928324,
            16044983857828047118,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            103041066207797471,
            5493182318505324371,
            541988339736127904,
            18286371861815636627,
        ],
        y: [
            17320919250874839455,
            8916760230381345237,
            16419967297028024504,
            2967218390301391698,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 976-991

    let mut p1 = SyscallPoint256 {
        x: [
            103041066207797471,
            5493182318505324371,
            541988339736127904,
            18286371861815636627,
        ],
        y: [
            17320919250874839455,
            8916760230381345237,
            16419967297028024504,
            2967218390301391698,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            11574995974176117469,
            4414766936180469986,
            822679711507871630,
            8082199340442924335,
        ],
        y: [
            8222665182974650663,
            5177706092917081916,
            9067527580370240428,
            12749403413602153426,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 992-1007

    let mut p1 = SyscallPoint256 {
        x: [
            11574995974176117469,
            4414766936180469986,
            822679711507871630,
            8082199340442924335,
        ],
        y: [
            8222665182974650663,
            5177706092917081916,
            9067527580370240428,
            12749403413602153426,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            15914243312412917186,
            15938066163142370148,
            5377971646883909246,
            17594455620906282567,
        ],
        y: [
            9362984259423688701,
            5482376278183694118,
            8717509125378925098,
            6291593226033725548,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1008-1023

    let mut p1 = SyscallPoint256 {
        x: [
            15914243312412917186,
            15938066163142370148,
            5377971646883909246,
            17594455620906282567,
        ],
        y: [
            9362984259423688701,
            5482376278183694118,
            8717509125378925098,
            6291593226033725548,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            4064169351091944918,
            5275808506650400396,
            14581098963839811052,
            3661373076866028107,
        ],
        y: [
            2737419666888123184,
            8794840480950624395,
            7063906367485990430,
            2415172074288609096,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1024-1039

    let mut p1 = SyscallPoint256 {
        x: [
            4064169351091944918,
            5275808506650400396,
            14581098963839811052,
            3661373076866028107,
        ],
        y: [
            2737419666888123184,
            8794840480950624395,
            7063906367485990430,
            2415172074288609096,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            14872935670260899089,
            2498150643347925719,
            3733789054294541208,
            3824915211200202980,
        ],
        y: [
            6041292206277746165,
            10629888326564814526,
            17241135201711791871,
            9919233498831486648,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1040-1055

    let mut p1 = SyscallPoint256 {
        x: [
            14872935670260899089,
            2498150643347925719,
            3733789054294541208,
            3824915211200202980,
        ],
        y: [
            6041292206277746165,
            10629888326564814526,
            17241135201711791871,
            9919233498831486648,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            2695369873367973041,
            6294381136496828691,
            55775141394128843,
            7916937762851965652,
        ],
        y: [
            6331297647387634484,
            9273615160470511347,
            6672627684444104360,
            10486908704690529309,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1056-1071

    let mut p1 = SyscallPoint256 {
        x: [
            2695369873367973041,
            6294381136496828691,
            55775141394128843,
            7916937762851965652,
        ],
        y: [
            6331297647387634484,
            9273615160470511347,
            6672627684444104360,
            10486908704690529309,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            5551767817086649981,
            4652370938384087758,
            3180093489577292009,
            10939354481072644386,
        ],
        y: [
            8751339588051317754,
            15735493227336269005,
            285915284228834847,
            9914480167209927372,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1072-1087

    let mut p1 = SyscallPoint256 {
        x: [
            5551767817086649981,
            4652370938384087758,
            3180093489577292009,
            10939354481072644386,
        ],
        y: [
            8751339588051317754,
            15735493227336269005,
            285915284228834847,
            9914480167209927372,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            14747068561044356076,
            10067230293567012455,
            17145682334294447914,
            3301079946884626365,
        ],
        y: [
            4499950505480655381,
            3977469822236581688,
            7345521315408168692,
            5105891058512077842,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1088-1103

    let mut p1 = SyscallPoint256 {
        x: [
            14747068561044356076,
            10067230293567012455,
            17145682334294447914,
            3301079946884626365,
        ],
        y: [
            4499950505480655381,
            3977469822236581688,
            7345521315408168692,
            5105891058512077842,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            1715052357432876570,
            9216418127752606358,
            17410964304851308150,
            2012054922371974568,
        ],
        y: [
            6338501016427430979,
            7499484979756890478,
            9978213532082457359,
            16381956913317963367,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1104-1119

    let mut p1 = SyscallPoint256 {
        x: [
            1715052357432876570,
            9216418127752606358,
            17410964304851308150,
            2012054922371974568,
        ],
        y: [
            6338501016427430979,
            7499484979756890478,
            9978213532082457359,
            16381956913317963367,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            17579371235244829931,
            8333242141519641328,
            3963088586427754516,
            4862346220812031056,
        ],
        y: [
            8314696884216234465,
            9737362729761478530,
            7618118829915412479,
            833565746329731887,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1120-1135

    let mut p1 = SyscallPoint256 {
        x: [
            17579371235244829931,
            8333242141519641328,
            3963088586427754516,
            4862346220812031056,
        ],
        y: [
            8314696884216234465,
            9737362729761478530,
            7618118829915412479,
            833565746329731887,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            5520741925075747051,
            4734665894730203687,
            5313709858873347010,
            13299253594783667420,
        ],
        y: [
            1981332928802481742,
            14631503625348278887,
            5125823036125390694,
            8008746776286910607,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1136-1151

    let mut p1 = SyscallPoint256 {
        x: [
            5520741925075747051,
            4734665894730203687,
            5313709858873347010,
            13299253594783667420,
        ],
        y: [
            1981332928802481742,
            14631503625348278887,
            5125823036125390694,
            8008746776286910607,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            13391171581992757170,
            6822370424887535011,
            17525401371839857760,
            2758603646549901816,
        ],
        y: [
            10604421022012418612,
            6212954835810956803,
            10317515620428406552,
            11391251302118933656,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1152-1167

    let mut p1 = SyscallPoint256 {
        x: [
            13391171581992757170,
            6822370424887535011,
            17525401371839857760,
            2758603646549901816,
        ],
        y: [
            10604421022012418612,
            6212954835810956803,
            10317515620428406552,
            11391251302118933656,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            10849403525780439829,
            11289614090998189679,
            2181572784496621666,
            12368387090914152994,
        ],
        y: [
            17987381282621225994,
            4593589374930006840,
            7193780182280506735,
            11594338602946289371,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1168-1183

    let mut p1 = SyscallPoint256 {
        x: [
            10849403525780439829,
            11289614090998189679,
            2181572784496621666,
            12368387090914152994,
        ],
        y: [
            17987381282621225994,
            4593589374930006840,
            7193780182280506735,
            11594338602946289371,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            11293234787830732212,
            10553344111901552358,
            17115243093740210829,
            1218520766286310857,
        ],
        y: [
            3813394437315896717,
            5522971576380385928,
            5573108632631713653,
            14306307654481731650,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1184-1199

    let mut p1 = SyscallPoint256 {
        x: [
            11293234787830732212,
            10553344111901552358,
            17115243093740210829,
            1218520766286310857,
        ],
        y: [
            3813394437315896717,
            5522971576380385928,
            5573108632631713653,
            14306307654481731650,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            1108637335817030272,
            5576108730364894324,
            12789268458268260803,
            13164402591290150053,
        ],
        y: [
            13172185654463695363,
            11284352376475883246,
            11911495718141245140,
            18079188421163464222,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1200-1215

    let mut p1 = SyscallPoint256 {
        x: [
            1108637335817030272,
            5576108730364894324,
            12789268458268260803,
            13164402591290150053,
        ],
        y: [
            13172185654463695363,
            11284352376475883246,
            11911495718141245140,
            18079188421163464222,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            12090657614458806996,
            8817177143830552897,
            503021151671951994,
            3861342605456894666,
        ],
        y: [
            11604268610577650434,
            15006137691171346865,
            13820669395044698774,
            17752030043910038985,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1216-1231

    let mut p1 = SyscallPoint256 {
        x: [
            12090657614458806996,
            8817177143830552897,
            503021151671951994,
            3861342605456894666,
        ],
        y: [
            11604268610577650434,
            15006137691171346865,
            13820669395044698774,
            17752030043910038985,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            18017764961173110055,
            4926752439929326690,
            14997611895299651099,
            11445686286449633356,
        ],
        y: [
            6445410683928888408,
            10711851183156513076,
            17182838910183961172,
            13128425468190650090,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1232-1247

    let mut p1 = SyscallPoint256 {
        x: [
            18017764961173110055,
            4926752439929326690,
            14997611895299651099,
            11445686286449633356,
        ],
        y: [
            6445410683928888408,
            10711851183156513076,
            17182838910183961172,
            13128425468190650090,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            6311271162047532419,
            7031687393186167137,
            7663647010047551963,
            12100037248868124140,
        ],
        y: [
            10826716363625643729,
            5162120399752083737,
            14977221076717961291,
            7063074885427487445,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1248-1263

    let mut p1 = SyscallPoint256 {
        x: [
            6311271162047532419,
            7031687393186167137,
            7663647010047551963,
            12100037248868124140,
        ],
        y: [
            10826716363625643729,
            5162120399752083737,
            14977221076717961291,
            7063074885427487445,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            17476293204481810149,
            15730797396350667795,
            7360633096409230958,
            15317641942788415928,
        ],
        y: [
            7362722182936827048,
            1932374696440073692,
            17135174711157390174,
            152007121579973923,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1264-1279

    let mut p1 = SyscallPoint256 {
        x: [
            17476293204481810149,
            15730797396350667795,
            7360633096409230958,
            15317641942788415928,
        ],
        y: [
            7362722182936827048,
            1932374696440073692,
            17135174711157390174,
            152007121579973923,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            5984682183816926538,
            12311996661131431934,
            5135883420287673068,
            9903195440301724064,
        ],
        y: [
            15460751836961650911,
            16575598903605598172,
            15736188084217256945,
            4036390641650549932,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1280-1295

    let mut p1 = SyscallPoint256 {
        x: [
            5984682183816926538,
            12311996661131431934,
            5135883420287673068,
            9903195440301724064,
        ],
        y: [
            15460751836961650911,
            16575598903605598172,
            15736188084217256945,
            4036390641650549932,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            9513710291490163238,
            9077994736731300711,
            14586069155036100770,
            1275567076589399404,
        ],
        y: [
            15254394179475184984,
            4300413298620210498,
            10148128438355415995,
            7292206992328756304,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1296-1311

    let mut p1 = SyscallPoint256 {
        x: [
            9513710291490163238,
            9077994736731300711,
            14586069155036100770,
            1275567076589399404,
        ],
        y: [
            15254394179475184984,
            4300413298620210498,
            10148128438355415995,
            7292206992328756304,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            545887436851369351,
            6828787688065214038,
            3784847408168804653,
            5801960250918850699,
        ],
        y: [
            7960650550461533833,
            6752854485708698976,
            7033117147444881223,
            3794673124853157169,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1312-1327

    let mut p1 = SyscallPoint256 {
        x: [
            545887436851369351,
            6828787688065214038,
            3784847408168804653,
            5801960250918850699,
        ],
        y: [
            7960650550461533833,
            6752854485708698976,
            7033117147444881223,
            3794673124853157169,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            5550006413009698729,
            2930477944108794843,
            4206160142528515078,
            11862148329463583523,
        ],
        y: [
            7472242686678486130,
            6550614526735030299,
            16155668332989636091,
            14732040278589264792,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1328-1343

    let mut p1 = SyscallPoint256 {
        x: [
            545887436851369351,
            6828787688065214038,
            3784847408168804653,
            5801960250918850699,
        ],
        y: [
            7960650550461533833,
            6752854485708698976,
            7033117147444881223,
            3794673124853157169,
        ],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [
            5550006413009698729,
            2930477944108794843,
            4206160142528515078,
            11862148329463583523,
        ],
        y: [
            7472242686678486130,
            6550614526735030299,
            16155668332989636091,
            14732040278589264792,
        ],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    let mut a: [u64; 4] = [0, 0, 0, 0];
    let mut b: [u64; 4] = [0, 0, 0, 0];
    let mut c: [u64; 4] = [0, 0, 0, 0];
    let mut dl: [u64; 4] = [0, 0, 0, 0];
    let mut dh: [u64; 4] = [0, 0, 0, 0];

    let mut params = SyscallArith256Params {
        a: &mut a,
        b: &mut b,
        c: &mut c,
        dh: &mut dh,
        dl: &mut dl,
    };

    // arith256 test rows: 1344-1359

    params.a = &[3, 0, 0, 0];
    params.b = &[2, 0, 0, 0];
    params.c = &[5, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [11, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1360-1375

    params.a = &[256, 0, 0, 0];
    params.b = &[256, 0, 0, 0];
    params.c = &[1, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [65537, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1376-1391

    params.a = &[3000, 0, 0, 0];
    params.b = &[2000, 0, 0, 0];
    params.c = &[5000, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [6005000, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1392-1407

    params.a = &[3000000, 0, 0, 0];
    params.b = &[2000000, 0, 0, 0];
    params.c = &[5000000, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [6000005000000, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1408-1423

    params.a = &[3000, 0, 0, 0];
    params.b = &[0, 0, 0, 0];
    params.c = &[5000, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [5000, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1424-1439

    params.a = &[0, 0, 0, 9223372036854775808];
    params.b = &[2, 0, 0, 0];
    params.c = &[0, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [1, 0, 0, 0];
    let expected_dl: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1440-1455

    params.a = &[
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ];
    params.b = &[
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ];
    params.c = &[
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ];
    let expected_dl: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1456-1471

    params.a = &[
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ];
    params.b = &[1, 0, 0, 0];
    params.c = &[
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [1, 0, 0, 0];
    let expected_dl: [u64; 4] = [
        18446744073709551614,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1472-1487

    params.a = &[7713719039128253086, 115615546558, 0, 0];
    params.b = &[10656898944539337297, 2453633705698497226, 159552453, 0];
    params.c = &[1, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
        18446744073709551615,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1488-1503

    params.a = &[0, 0, 0, 0];
    params.b = &[
        5641043740449624970,
        17935565655897260830,
        10919558233487242038,
        3259728400919159662,
    ];
    params.c = &[
        2042438716905720142,
        2988730285248943925,
        4435704583584765532,
        1114014320886393554,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [
        2042438716905720142,
        2988730285248943925,
        4435704583584765532,
        1114014320886393554,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1504-1519

    params.a = &[
        14543826280514596025,
        9925309151025471942,
        15693957349391226432,
        1303992629676031264,
    ];
    params.b = &[0, 0, 0, 0];
    params.c = &[
        8758098300086079933,
        8458090185970427871,
        5608800379645947347,
        3254741872956128470,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [
        8758098300086079933,
        8458090185970427871,
        5608800379645947347,
        3254741872956128470,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1520-1535

    params.a = &[
        16263600177686926934,
        1070520514103037330,
        3378925449179257950,
        3052531337687770504,
    ];
    params.b = &[
        7203210682968997592,
        1683754083127282338,
        5544086711222400467,
        2169034962190395798,
    ];
    params.c = &[0, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        4920193930127254026,
        12651897792310999332,
        15756748985538480733,
        358927687627160255,
    ];
    let expected_dl: [u64; 4] = [
        8652960039961832592,
        12927669010041577485,
        186790233820823996,
        4193027692932975106,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1536-1551

    params.a = &[
        4332616871279656262,
        10917124144477883021,
        13281191951274694749,
        3486998266802970665,
    ];
    params.b = &[
        4332616871279656262,
        10917124144477883021,
        13281191951274694749,
        3486998266802970665,
    ];
    params.c = &[
        4332616871279656262,
        10917124144477883021,
        13281191951274694749,
        3486998266802970665,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        2805173416851059596,
        12685379358730704390,
        6456595594210759196,
        659149217016364956,
    ];
    let expected_dl: [u64; 4] = [
        18389266602179718250,
        1045007305792878195,
        10520359139510940287,
        15277423945471533726,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1552-1567

    params.a = &[
        9819458333704307595,
        11176360309338589902,
        1111937373424751652,
        477786268695237371,
    ];
    params.b = &[
        13183940047792697716,
        10000972142865538197,
        8486938725896642681,
        2407454493133493604,
    ];
    params.c = &[
        4616769939934698446,
        11233501844785449581,
        15435476716815871205,
        257386334936440478,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        13767190121689476520,
        8180501038057058095,
        10787668698697595931,
        62355106935493271,
    ];
    let expected_dl: [u64; 4] = [
        2966147972534030794,
        14236193498970964075,
        9032432248339320385,
        9039414898496554729,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1568-1583

    params.a = &[
        18322129971448504228,
        1931565055368554727,
        4329275120939973020,
        12978697249981708710,
    ];
    params.b = &[
        280285223898405502,
        11284537880113667004,
        1081332520087288237,
        13072869521125875881,
    ];
    params.c = &[
        10747199766730330840,
        7794942346027476440,
        9925182310152147232,
        2506352177963258844,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        2915064742398828162,
        13497111676907046358,
        11533134330377006094,
        9197764929422936304,
    ];
    let expected_dl: [u64; 4] = [
        8567555132443528592,
        4413536587579917121,
        15525761641803697026,
        7375841439625782474,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1584-1599

    params.a = &[
        3601750688034868637,
        11098567879892209091,
        7853054493001661040,
        13127796090247981965,
    ];
    params.b = &[
        6450262964717846419,
        6206609616313831266,
        9102905784272360915,
        34732001983190336,
    ];
    params.c = &[
        13756415383517927123,
        5969167424200594595,
        11472493900790927461,
        10161930015752951061,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        1142448829767690416,
        12893764248253524065,
        16461049376350285663,
        24717350553545190,
    ];
    let expected_dl: [u64; 4] = [
        786030360820878074,
        10547436729874534204,
        14317391299827766634,
        3869960813368558602,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1600-1615

    params.a = &[
        9819458333704307595,
        11176360309338589902,
        1111937373424751652,
        477786268695237371,
    ];
    params.b = &[
        13183940047792697716,
        10000972142865538197,
        8486938725896642681,
        2407454493133493604,
    ];
    params.c = &[
        4616769939934698446,
        11233501844785449581,
        15435476716815871205,
        257386334936440478,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        13767190121689476520,
        8180501038057058095,
        10787668698697595931,
        62355106935493271,
    ];
    let expected_dl: [u64; 4] = [
        2966147972534030794,
        14236193498970964075,
        9032432248339320385,
        9039414898496554729,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1616-1631

    params.a = &[
        18183646675237997858,
        5913221654135725266,
        17004692625211814591,
        3035855206098274375,
    ];
    params.b = &[
        3815866324375555432,
        14662508343725318569,
        12256559516963360580,
        3331835286132085115,
    ];
    params.c = &[
        10680278636993256106,
        4812199420528396217,
        9545827554963751537,
        1694214479444147175,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        11710853863803600850,
        18391770452823106496,
        3335851138642602120,
        548333595286441921,
    ];
    let expected_dl: [u64; 4] = [
        5045461017808906874,
        16256148593343272435,
        16431119418264968873,
        4607304688942990376,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1632-1647

    params.a = &[
        14699522009175466360,
        11292225231260079918,
        12582817354618069472,
        2778240163156501704,
    ];
    params.b = &[
        14480032510786034726,
        7480003072321104223,
        1473877341807557712,
        2130521741231527403,
    ];
    params.c = &[
        4417907801686297355,
        4846544247752331473,
        6679274100623874803,
        456596546189276312,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        17941566077044267147,
        942742814844597660,
        6745108453302082356,
        320875111961004726,
    ];
    let expected_dl: [u64; 4] = [
        7297425682003354331,
        5961782815478584844,
        7750380610128238341,
        2252978709107933634,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1648-1663

    params.a = &[
        824538892198020416,
        1283184167359828537,
        3302650312620060185,
        1668607930946766365,
    ];
    params.b = &[
        15992270325266652171,
        244875674963749358,
        16263365658449982185,
        1009731516739052561,
    ];
    params.c = &[
        15029516448026007800,
        17584874768126114656,
        15015380991638676598,
        1031683227781833221,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        12049004044701019445,
        475563049094645182,
        2626306304469407688,
        91335685594453864,
    ];
    let expected_dl: [u64; 4] = [
        7399793004524163768,
        12412931489802804564,
        5975542197948186163,
        12225294084083706661,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1664-1679

    params.a = &[
        10915932687312257019,
        14233946165038456235,
        1876757076466232141,
        2076699543628163449,
    ];
    params.b = &[
        16860477699524267357,
        16339470532078613786,
        18262037762087167615,
        2278840021002137163,
    ];
    params.c = &[
        4444768305875197474,
        1939922989497411867,
        4214143816538787860,
        199856975344428270,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        9133399237091422853,
        8764338955411059823,
        1396169034942836388,
        256547497634635773,
    ];
    let expected_dl: [u64; 4] = [
        10380609131116583761,
        13484704121849969925,
        2893271877616049675,
        2329960432030967557,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1680-1695

    params.a = &[
        16309166084141857452,
        9809239868572571135,
        17798590001567589395,
        392134240976170952,
    ];
    params.b = &[
        5621663831382770427,
        17130837217801050487,
        15171331323744008816,
        2274912516172977562,
    ];
    params.c = &[
        6330576003640702598,
        10187177508499355552,
        2162002880016689336,
        1701055434502454977,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        1695030648842173568,
        2557875980344829879,
        17536610177559952956,
        48359270842168222,
    ];
    let expected_dl: [u64; 4] = [
        857299831180105002,
        17185712846273419885,
        12702389114230039187,
        11635640292219264917,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1696-1711

    params.a = &[
        14533180969308295304,
        15121196567945333062,
        4122092302346196175,
        22116339228426949,
    ];
    params.b = &[
        16483324805901717203,
        18393952827148097689,
        8231368508345815366,
        1607401212644271174,
    ];
    params.c = &[
        8463282738341103067,
        2967457933044332033,
        4676291696582175467,
        3288997381478435379,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        13935278472984479548,
        21581279228334666,
        8415675991825411096,
        1927160172709906,
    ];
    let expected_dl: [u64; 4] = [
        4011259815493162483,
        9569014989288692352,
        5432734981949033185,
        12346885909656755315,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1712-1727

    params.a = &[
        1552441276585533365,
        14380987881094484584,
        17148433926179488449,
        3103348277562900476,
    ];
    params.b = &[
        3607635386551753131,
        12073442209700630885,
        1210144169000380915,
        3445928647902604400,
    ];
    params.c = &[
        8577567489996952073,
        1415993803136667909,
        5856414073842050221,
        2600260715055878473,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        3798051534132069030,
        9201456459030708830,
        6533660738218263030,
        579718387773062795,
    ];
    let expected_dl: [u64; 4] = [
        12447936204358937840,
        16589259119206248492,
        11274326848600662637,
        6981364893452544481,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1728-1743

    params.a = &[
        14085307310069053384,
        1313323579751204585,
        2230069526089941229,
        1318948901456383028,
    ];
    params.b = &[
        15746949163550439651,
        11469107117602407345,
        4268298800428165798,
        1491530148446061347,
    ];
    params.c = &[
        2439604640165946174,
        8802471795462665784,
        16196845910038099790,
        2650363650529992213,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        3534637649847741171,
        7299526022291431728,
        6034446249566918840,
        106644947364220876,
    ];
    let expected_dl: [u64; 4] = [
        256349604355889558,
        3220143636565549075,
        13775613494325210539,
        9124052010478233060,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1744-1759

    params.a = &[
        7894415325517401629,
        6208933359299202927,
        5310537751821163315,
        3347590468685507572,
    ];
    params.b = &[
        18167574372806497787,
        3382742257014476574,
        14102026903974844419,
        3249677631575321162,
    ];
    params.c = &[
        6550702927005300678,
        5200508652508272258,
        14628177090059000521,
        818099213527558581,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        8524318219397626410,
        17032758725496279318,
        13996088335842411883,
        589729538301899767,
    ];
    let expected_dl: [u64; 4] = [
        18413696389611138869,
        5850738641225425712,
        13835927216744258706,
        4072188601118047154,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1760-1775

    params.a = &[
        13981651947569222700,
        3540900621375102018,
        13287653658183285971,
        1243049703052596388,
    ];
    params.b = &[
        4522079574557097203,
        15223085964013319536,
        4163384081032712963,
        1897124140102238721,
    ];
    params.c = &[
        8484639459381010211,
        7011310773972233473,
        16158615368361125457,
        1177999319848184147,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        3811536305311278330,
        4051355591301262293,
        15830684234031590970,
        127839340622118441,
    ];
    let expected_dl: [u64; 4] = [
        16698190416501298407,
        11790156726582432063,
        8992685523755047723,
        9598396682485581277,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1776-1791

    params.a = &[
        13970229013151504741,
        8476296752562947313,
        11810450538887363942,
        511990551865481398,
    ];
    params.b = &[
        11990850244716481796,
        14558188671963395327,
        9424388055416098482,
        1459171711273467932,
    ];
    params.c = &[
        16528603495754341937,
        8893271371239080203,
        9406449307822347647,
        250213327518958686,
    ];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [
        4910774022637574197,
        12870152955407492665,
        17746475360205808972,
        40499403403452059,
    ];
    let expected_dl: [u64; 4] = [
        3242244678432810181,
        2099669192879440901,
        14496343886419199978,
        10002311647969911313,
    ];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    let mut a: [u64; 4] = [0, 0, 0, 0];
    let mut b: [u64; 4] = [0, 0, 0, 0];
    let mut c: [u64; 4] = [0, 0, 0, 0];
    let mut module: [u64; 4] = [0, 0, 0, 0];
    let mut d: [u64; 4] = [0, 0, 0, 0];

    let mut params = SyscallArith256ModParams {
        a: &mut a,
        b: &mut b,
        c: &mut c,
        module: &mut module,
        d: &mut d,
    };

    // arith256_mod test rows: 1792-1807

    params.a = &[0, 0, 0, 0];
    params.b = &[0, 0, 0, 0];
    params.c = &[0, 0, 0, 0];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1808-1823

    params.a = &[1, 0, 0, 0];
    params.b = &[0, 0, 0, 0];
    params.c = &[0, 0, 0, 0];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1824-1839

    params.a = &[0, 0, 0, 0];
    params.b = &[1, 0, 0, 0];
    params.c = &[0, 0, 0, 0];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1840-1855

    params.a = &[0, 0, 0, 0];
    params.b = &[0, 0, 0, 0];
    params.c = &[1, 0, 0, 0];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1856-1871

    params.a = &[
        9819458333704307595,
        11176360309338589902,
        1111937373424751652,
        477786268695237371,
    ];
    params.b = &[
        13183940047792697716,
        10000972142865538197,
        8486938725896642681,
        2407454493133493604,
    ];
    params.c = &[
        4616769939934698446,
        11233501844785449581,
        15435476716815871205,
        257386334936440478,
    ];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1872-1887

    params.a = &[
        18322129971448504228,
        1931565055368554727,
        4329275120939973020,
        12978697249981708710,
    ];
    params.b = &[
        280285223898405502,
        11284537880113667004,
        1081332520087288237,
        13072869521125875881,
    ];
    params.c = &[
        10747199766730330840,
        7794942346027476440,
        9925182310152147232,
        2506352177963258844,
    ];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1888-1903

    params.a = &[
        3601750688034868637,
        11098567879892209091,
        7853054493001661040,
        13127796090247981965,
    ];
    params.b = &[
        6450262964717846419,
        6206609616313831266,
        9102905784272360915,
        34732001983190336,
    ];
    params.c = &[
        13756415383517927123,
        5969167424200594595,
        11472493900790927461,
        10161930015752951061,
    ];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1904-1919

    params.a = &[
        9819458333704307595,
        11176360309338589902,
        1111937373424751652,
        477786268695237371,
    ];
    params.b = &[
        13183940047792697716,
        10000972142865538197,
        8486938725896642681,
        2407454493133493604,
    ];
    params.c = &[
        4616769939934698446,
        11233501844785449581,
        15435476716815871205,
        257386334936440478,
    ];
    params.module = &[
        16619467820888189833,
        10877150673258265262,
        10728815452881265760,
        216848425711951146,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        6969085588596054193,
        17294800763519702586,
        2297270722269116445,
        64363319618284025,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1920-1935

    params.a = &[
        18183646675237997858,
        5913221654135725266,
        17004692625211814591,
        3035855206098274375,
    ];
    params.b = &[
        3815866324375555432,
        14662508343725318569,
        12256559516963360580,
        3331835286132085115,
    ];
    params.c = &[
        10680278636993256106,
        4812199420528396217,
        9545827554963751537,
        1694214479444147175,
    ];
    params.module = &[
        14290265255325312041,
        3221449844989985051,
        14117926452509689807,
        1705773849242759208,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        14724416497411134620,
        15447058202389846889,
        17464262260375210745,
        1102516654797031963,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1936-1951

    params.a = &[
        14699522009175466360,
        11292225231260079918,
        12582817354618069472,
        2778240163156501704,
    ];
    params.b = &[
        14480032510786034726,
        7480003072321104223,
        1473877341807557712,
        2130521741231527403,
    ];
    params.c = &[
        4417907801686297355,
        4846544247752331473,
        6679274100623874803,
        456596546189276312,
    ];
    params.module = &[
        17554725009932780152,
        4603450452032535347,
        15021622684256251808,
        2789050017287097416,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        5139371364774813843,
        4123843497394979153,
        5587963375085951119,
        1601387994715989365,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1952-1967

    params.a = &[
        824538892198020416,
        1283184167359828537,
        3302650312620060185,
        1668607930946766365,
    ];
    params.b = &[
        15992270325266652171,
        244875674963749358,
        16263365658449982185,
        1009731516739052561,
    ];
    params.c = &[
        15029516448026007800,
        17584874768126114656,
        15015380991638676598,
        1031683227781833221,
    ];
    params.module = &[
        16986943764165354890,
        14412505814284476410,
        16592960690212983967,
        972386731777229000,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        2328234509455951846,
        3625611611412616383,
        12246451855854867035,
        339551502582366576,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1968-1983

    params.a = &[
        10915932687312257019,
        14233946165038456235,
        1876757076466232141,
        2076699543628163449,
    ];
    params.b = &[
        16860477699524267357,
        16339470532078613786,
        18262037762087167615,
        2278840021002137163,
    ];
    params.c = &[
        4444768305875197474,
        1939922989497411867,
        4214143816538787860,
        199856975344428270,
    ];
    params.module = &[
        15690993799012359266,
        13925548266012435130,
        3272366628288741674,
        3483440725996556673,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        17044858325470885851,
        17884162890535599815,
        11834017901293318921,
        3036567093482370445,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1984-1999

    params.a = &[
        16309166084141857452,
        9809239868572571135,
        17798590001567589395,
        392134240976170952,
    ];
    params.b = &[
        5621663831382770427,
        17130837217801050487,
        15171331323744008816,
        2274912516172977562,
    ];
    params.c = &[
        6330576003640702598,
        10187177508499355552,
        2162002880016689336,
        1701055434502454977,
    ];
    params.module = &[
        6042457498590366555,
        3929315885146284526,
        11720228675087261929,
        960276666354821767,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        14410141474911749754,
        17019551091793440719,
        9841036973109907299,
        270889429155754241,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2000-2015

    params.a = &[
        14533180969308295304,
        15121196567945333062,
        4122092302346196175,
        22116339228426949,
    ];
    params.b = &[
        16483324805901717203,
        18393952827148097689,
        8231368508345815366,
        1607401212644271174,
    ];
    params.c = &[
        8463282738341103067,
        2967457933044332033,
        4676291696582175467,
        3288997381478435379,
    ];
    params.module = &[
        14517856955707246743,
        6909717146772162154,
        4225348332245104118,
        251109779456144592,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        4763933176239486312,
        5800120547297740758,
        18415418338610646318,
        66468322114194979,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2016-2031

    params.a = &[
        1552441276585533365,
        14380987881094484584,
        17148433926179488449,
        3103348277562900476,
    ];
    params.b = &[
        3607635386551753131,
        12073442209700630885,
        1210144169000380915,
        3445928647902604400,
    ];
    params.c = &[
        8577567489996952073,
        1415993803136667909,
        5856414073842050221,
        2600260715055878473,
    ];
    params.module = &[
        6213571909784689117,
        6086935747297776195,
        589455143744304937,
        1339041837956071838,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        10687539600612385234,
        13529445508220421442,
        17401340882628433339,
        689568644776373272,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2032-2047

    params.a = &[
        14085307310069053384,
        1313323579751204585,
        2230069526089941229,
        1318948901456383028,
    ];
    params.b = &[
        15746949163550439651,
        11469107117602407345,
        4268298800428165798,
        1491530148446061347,
    ];
    params.c = &[
        2439604640165946174,
        8802471795462665784,
        16196845910038099790,
        2650363650529992213,
    ];
    params.module = &[
        3592895757868207738,
        11105631678955540198,
        9197205780301054125,
        3418225828951993858,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        6745622268140103172,
        5912865753703323101,
        7312459677893958849,
        1903135534741160267,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2048-2063

    params.a = &[
        7894415325517401629,
        6208933359299202927,
        5310537751821163315,
        3347590468685507572,
    ];
    params.b = &[
        18167574372806497787,
        3382742257014476574,
        14102026903974844419,
        3249677631575321162,
    ];
    params.c = &[
        6550702927005300678,
        5200508652508272258,
        14628177090059000521,
        818099213527558581,
    ];
    params.module = &[
        7054306415440348267,
        14567819963952156007,
        4465768169752394732,
        1228538945855076105,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        10966464611923472817,
        4021213191024813726,
        2457113499103756917,
        870595216135483619,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2064-2079

    params.a = &[
        13981651947569222700,
        3540900621375102018,
        13287653658183285971,
        1243049703052596388,
    ];
    params.b = &[
        4522079574557097203,
        15223085964013319536,
        4163384081032712963,
        1897124140102238721,
    ];
    params.c = &[
        8484639459381010211,
        7011310773972233473,
        16158615368361125457,
        1177999319848184147,
    ];
    params.module = &[
        7304236200783344061,
        5292418479036885921,
        6694470597827982082,
        916507037960048990,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        12228301495889953910,
        10774745575034942662,
        6018576667479930433,
        427975101709100386,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2080-2095

    params.a = &[
        13970229013151504741,
        8476296752562947313,
        11810450538887363942,
        511990551865481398,
    ];
    params.b = &[
        11990850244716481796,
        14558188671963395327,
        9424388055416098482,
        1459171711273467932,
    ];
    params.c = &[
        16528603495754341937,
        8893271371239080203,
        9406449307822347647,
        250213327518958686,
    ];
    params.module = &[
        17875918351627132749,
        3264646250175604994,
        4721293699900829255,
        482440734473027493,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        6554798537177776941,
        1991947186318904955,
        10029122483581743702,
        201825843517986662,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2096-2111

    params.a = &[0, 0, 0, 0];
    params.b = &[
        5641043740449624970,
        17935565655897260830,
        10919558233487242038,
        3259728400919159662,
    ];
    params.c = &[
        2042438716905720142,
        2988730285248943925,
        4435704583584765532,
        1114014320886393554,
    ];
    params.module = &[
        2760980708294393707,
        372860918073165892,
        9122612075875888799,
        219633912322601253,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        6684279249143303223,
        1124425694883114464,
        14162876425333976385,
        15844759273387286,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2112-2127

    params.a = &[
        14543826280514596025,
        9925309151025471942,
        15693957349391226432,
        1303992629676031264,
    ];
    params.b = &[0, 0, 0, 0];
    params.c = &[
        8758098300086079933,
        8458090185970427871,
        5608800379645947347,
        3254741872956128470,
    ];
    params.module = &[
        17860359904402995876,
        210711486840455477,
        13545863734865992770,
        478428012731885078,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        12276403315925414373,
        7193821264927695003,
        16567338338997748807,
        384173796564817997,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2128-2143

    params.a = &[
        16263600177686926934,
        1070520514103037330,
        3378925449179257950,
        3052531337687770504,
    ];
    params.b = &[
        7203210682968997592,
        1683754083127282338,
        5544086711222400467,
        2169034962190395798,
    ];
    params.c = &[0, 0, 0, 0];
    params.module = &[
        8023954341856169226,
        7388703250239832174,
        14581628861610779812,
        1463541573151624535,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [
        10766147760862618552,
        17068920724662870862,
        9174344223129520445,
        62162162692712926,
    ];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2144-2159

    params.a = &[
        4332616871279656262,
        10917124144477883021,
        13281191951274694749,
        3486998266802970665,
    ];
    params.b = &[
        4332616871279656262,
        10917124144477883021,
        13281191951274694749,
        3486998266802970665,
    ];
    params.c = &[
        4332616871279656262,
        10917124144477883021,
        13281191951274694749,
        3486998266802970665,
    ];
    params.module = &[
        4332616871279656262,
        10917124144477883021,
        13281191951274694749,
        3486998266802970665,
    ];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    println!("Success");
}

