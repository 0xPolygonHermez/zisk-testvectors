#![no_main]
#![cfg(all(target_os = "zkvm", target_vendor = "zisk"))]
ziskos::entrypoint!(main);

use ziskos::{
    arith256::*, arith256_mod::*, bn254_complex_add::*, bn254_complex_mul::*, bn254_complex_sub::*,
    bn254_curve_add::*, bn254_curve_dbl::*, complex256::*, point256::*, secp256k1_add::*,
    secp256k1_dbl::*, secp256r1_add::*, secp256r1_dbl::*,
};

fn main() {
    let mut p1 = SyscallPoint256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let p2 = SyscallPoint256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let mut params = SyscallSecp256k1AddParams { p1: &mut p1, p2: &p2 };
    // secp256k1_add test rows: 0-15

    let mut p1 = SyscallPoint256 {
        x: [6481385041966929816, 188021827762530521, 6170039885052185351, 8772561819708210092],
        y: [11261198710074299576, 18237243440184513561, 6747795201694173352, 5204712524664259685],
    };
    let p2 = SyscallPoint256 {
        x: [12370272968204394213, 6662950628856118439, 3478257130916576472, 14268669794154544493],
        y: [2550217892273579306, 17867523981857706209, 11800983642684844782, 1936944757666071353],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [9656264143134537465, 13056436995607206320, 5274928500377997865, 17956003453681058576],
        y: [7834571707967399538, 7278003473310950171, 1144820191972553558, 4075611493812267028],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 16-31

    let mut p1 = SyscallPoint256 {
        x: [3388248522597430614, 9436808338628714891, 2325328641075066323, 18444909905599983268],
        y: [4361468193159901847, 16033079614159971488, 17563640529965925728, 12543219280952145440],
    };
    let p2 = SyscallPoint256 {
        x: [5550006413009698729, 2930477944108794843, 4206160142528515078, 11862148329463583523],
        y: [7472242686678486130, 6550614526735030299, 16155668332989636091, 14732040278589264792],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13491366187209133817, 9787663170891684295, 15066831866609717056, 16222008669425868485],
        y: [10828095770060190560, 15914172361422008262, 17539250198297628983, 3506387567980440284],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 32-47

    let mut p1 = SyscallPoint256 {
        x: [14245154385136969818, 7529161239585360219, 1568254326717236787, 14992788640288429595],
        y: [7711599709454213927, 8728974837485694290, 12156980350441740309, 12246219763152707799],
    };
    let p2 = SyscallPoint256 {
        x: [13491366187209133817, 9787663170891684295, 15066831866609717056, 16222008669425868485],
        y: [10828095770060190560, 15914172361422008262, 17539250198297628983, 3506387567980440284],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13822370467126228980, 2506116985832354287, 9022235008297346450, 15397375212876642037],
        y: [1787767364889970620, 10161053720274063512, 4877735586038743837, 1162801841474012042],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 48-63

    let mut p1 = SyscallPoint256 {
        x: [361059452381750990, 7508086908927522708, 9998163320986307337, 18334932765985551316],
        y: [10920898125377357247, 134132599253277986, 15252363593060096385, 7517033372555823720],
    };
    let p2 = SyscallPoint256 {
        x: [13822370467126228980, 2506116985832354287, 9022235008297346450, 15397375212876642037],
        y: [1787767364889970620, 10161053720274063512, 4877735586038743837, 1162801841474012042],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5162560989827175816, 16402521221305440318, 3171626711978951353, 17965666173449799390],
        y: [14722103743709784799, 2214560160701558786, 17158889244957832243, 161006794594479835],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 64-79

    let mut p1 = SyscallPoint256 {
        x: [11229849546581927363, 18183172613498203073, 12988774327542766411, 7983249766513717373],
        y: [5299100104091797096, 4200004925846514740, 6426451471226140064, 15348588267406231312],
    };
    let p2 = SyscallPoint256 {
        x: [5162560989827175816, 16402521221305440318, 3171626711978951353, 17965666173449799390],
        y: [14722103743709784799, 2214560160701558786, 17158889244957832243, 161006794594479835],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5852346876279720151, 12443874794687512882, 12245491628790112107, 1861861903343037182],
        y: [12461825173258948930, 736104182521454076, 1041363746078943805, 2457324180629681371],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 80-95

    let mut p1 = SyscallPoint256 {
        x: [4869300263515369699, 11686477369051177892, 10351046573905852206, 4543710797049982351],
        y: [14628406147340517455, 10736903920457307044, 16792687194968752563, 14656639356436790417],
    };
    let p2 = SyscallPoint256 {
        x: [5852346876279720151, 12443874794687512882, 12245491628790112107, 1861861903343037182],
        y: [12461825173258948930, 736104182521454076, 1041363746078943805, 2457324180629681371],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [269858136879743061, 4111365287215060192, 9052968481472801665, 713258727124895890],
        y: [2254907716061116340, 17921068610847361503, 15955208585682828903, 12784054924380092928],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 96-111

    let mut p1 = SyscallPoint256 {
        x: [14391060156941997906, 16682396899684982862, 9308341629085326058, 15537658789411800629],
        y: [13528856402216537844, 855755022726772546, 17794446170121208933, 10459452768711114802],
    };
    let p2 = SyscallPoint256 {
        x: [269858136879743061, 4111365287215060192, 9052968481472801665, 713258727124895890],
        y: [2254907716061116340, 17921068610847361503, 15955208585682828903, 12784054924380092928],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [9582940641673426435, 1186477552418578423, 11448072416566699141, 206687144183628328],
        y: [15542266276306060178, 2004272385792900881, 5996941556387902280, 1780552388856869273],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 112-127

    let mut p1 = SyscallPoint256 {
        x: [12180186410187710597, 13074317468773359492, 1212500563603673519, 3766037359670906174],
        y: [7869060398548210392, 110983775202227839, 5723666432541990313, 7357327491894833029],
    };
    let p2 = SyscallPoint256 {
        x: [9582940641673426435, 1186477552418578423, 11448072416566699141, 206687144183628328],
        y: [15542266276306060178, 2004272385792900881, 5996941556387902280, 1780552388856869273],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13041071917170456817, 16406377190915707657, 14889059541729264028, 3234355663149661257],
        y: [15822955659836146615, 6310589687302593, 8658486813739320610, 817024074903823074],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 128-143

    let mut p1 = SyscallPoint256 {
        x: [18229459384247684602, 684707198064386436, 980149713513319584, 9395299577453190220],
        y: [3877591415008278378, 6320499931082966136, 7421617926466391860, 9510922786123587150],
    };
    let p2 = SyscallPoint256 {
        x: [13041071917170456817, 16406377190915707657, 14889059541729264028, 3234355663149661257],
        y: [15822955659836146615, 6310589687302593, 8658486813739320610, 817024074903823074],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [11163181480235840359, 14096725224313550807, 16102908571542620524, 12354825009720789442],
        y: [14430857626809263081, 14227595315061545635, 5150125880527090062, 18070129506915093305],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 144-159

    let mut p1 = SyscallPoint256 {
        x: [15095153298253046284, 5303204884433242329, 14271294903557756800, 1608814916597982061],
        y: [7828074314403099341, 84151435424685138, 16932014280599564316, 231980500341718906],
    };
    let p2 = SyscallPoint256 {
        x: [11163181480235840359, 14096725224313550807, 16102908571542620524, 12354825009720789442],
        y: [14430857626809263081, 14227595315061545635, 5150125880527090062, 18070129506915093305],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [18141523963158533489, 15595433983440287811, 4352313414564922948, 15304126723928210086],
        y: [6323912894755555605, 12678016417103873055, 3343686957378346688, 25737814545654128],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 160-175

    let mut p1 = SyscallPoint256 {
        x: [5175809867597589453, 6112508711071501135, 6960504755495188287, 15320934750850643004],
        y: [16603242195010847682, 1341035381658710065, 15548816972008125270, 374330460415019277],
    };
    let p2 = SyscallPoint256 {
        x: [18141523963158533489, 15595433983440287811, 4352313414564922948, 15304126723928210086],
        y: [6323912894755555605, 12678016417103873055, 3343686957378346688, 25737814545654128],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1094065303696208448, 16344354570360019767, 13827564859011217877, 12903184145084862300],
        y: [1245072108431029466, 4737598162911875980, 13654603555467546707, 16744524669146169731],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 176-191

    let mut p1 = SyscallPoint256 {
        x: [6049190514384470666, 1382238135566132255, 1028123464921783413, 6887276088214724213],
        y: [13829158347396631936, 10117019307876977412, 16568876609164211038, 2790195167144050408],
    };
    let p2 = SyscallPoint256 {
        x: [1094065303696208448, 16344354570360019767, 13827564859011217877, 12903184145084862300],
        y: [1245072108431029466, 4737598162911875980, 13654603555467546707, 16744524669146169731],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [4108648498588573775, 9184144659800820744, 8139982771501597765, 11878897445941668857],
        y: [8010775560317714567, 13207243562382678217, 2069000135717376221, 4306849699615995068],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 192-207

    let mut p1 = SyscallPoint256 {
        x: [7329600635844956694, 4572057379606856554, 1336260601171668306, 15741542477464055028],
        y: [15775320700018001266, 16837481790980148954, 16076128951343087558, 8356605334306084336],
    };
    let p2 = SyscallPoint256 {
        x: [4108648498588573775, 9184144659800820744, 8139982771501597765, 11878897445941668857],
        y: [8010775560317714567, 13207243562382678217, 2069000135717376221, 4306849699615995068],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [17316478588240273279, 17194587335252601303, 15974886568808980373, 4936814799599649201],
        y: [3904859781770592503, 4885989130086194703, 7579208590447118834, 17635874452452737167],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 208-223

    let mut p1 = SyscallPoint256 {
        x: [10738044202431724224, 1807366078262717190, 1397443900249519886, 10750357262808598172],
        y: [5155141259007419145, 16310686023055039592, 3809253083837576160, 10321177611541094882],
    };
    let p2 = SyscallPoint256 {
        x: [17316478588240273279, 17194587335252601303, 15974886568808980373, 4936814799599649201],
        y: [3904859781770592503, 4885989130086194703, 7579208590447118834, 17635874452452737167],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1322065686598805203, 6418129315048375838, 7657541131051921320, 17000681850086764716],
        y: [11047335463743714399, 15610730330979148736, 12364327458721030102, 6652440655968728349],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 224-239

    let mut p1 = SyscallPoint256 {
        x: [463945003823832207, 17474371098211739570, 8001206879091110576, 7475415578589698301],
        y: [6140739010600260313, 14814938377153462974, 11729983352586442387, 8834749270810554244],
    };
    let p2 = SyscallPoint256 {
        x: [1322065686598805203, 6418129315048375838, 7657541131051921320, 17000681850086764716],
        y: [11047335463743714399, 15610730330979148736, 12364327458721030102, 6652440655968728349],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5713950615561495609, 8041683058359059296, 6009619030851677590, 11357010413961933117],
        y: [12322365804966655193, 14786421845530355111, 4150882367077942388, 15692732944913612157],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 240-255

    let mut p1 = SyscallPoint256 {
        x: [1295273892355154746, 10129401683319168165, 16093208732893648950, 9888537620415219562],
        y: [7473736272472650821, 11833745278707362626, 17587576923453685554, 14821718792216889502],
    };
    let p2 = SyscallPoint256 {
        x: [5713950615561495609, 8041683058359059296, 6009619030851677590, 11357010413961933117],
        y: [12322365804966655193, 14786421845530355111, 4150882367077942388, 15692732944913612157],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [14112459023686954070, 11765332665235294233, 14923047166356253834, 349093140243986112],
        y: [183628878045041348, 4528548779057507129, 13328074435666583347, 14956768888758149683],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 256-271

    let mut p1 = SyscallPoint256 {
        x: [5442901514494762440, 8068579949080609849, 13440047785991771202, 4913779344553672626],
        y: [3591977695608775603, 11991442826445074000, 18345839140001742551, 10858391194666493688],
    };
    let p2 = SyscallPoint256 {
        x: [14112459023686954070, 11765332665235294233, 14923047166356253834, 349093140243986112],
        y: [183628878045041348, 4528548779057507129, 13328074435666583347, 14956768888758149683],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [3062268612412726218, 13392392407157940631, 1411355184559711880, 7985517814817512039],
        y: [4059251560375655144, 6177606110121084199, 4934273323312877493, 366493205583397036],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 272-287

    let mut p1 = SyscallPoint256 {
        x: [4518765836368931242, 7498818245279601483, 13227717385055713490, 16516969123953977005],
        y: [14175714478368387599, 8050551974340866446, 6586817248383241729, 13366640209916572701],
    };
    let p2 = SyscallPoint256 {
        x: [3062268612412726218, 13392392407157940631, 1411355184559711880, 7985517814817512039],
        y: [4059251560375655144, 6177606110121084199, 4934273323312877493, 366493205583397036],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [17575772300310138614, 12431318927032221146, 1460974789748516701, 7883053580443548504],
        y: [9402541537984038308, 18417754886573459057, 4838423572481299259, 15464509280828210181],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 288-303

    let mut p1 = SyscallPoint256 {
        x: [1940266508063891926, 9984431616774062814, 14093435390931967825, 10637489008200751856],
        y: [16671943631316568944, 10956117075848626050, 11333022928271928324, 16044983857828047118],
    };
    let p2 = SyscallPoint256 {
        x: [17575772300310138614, 12431318927032221146, 1460974789748516701, 7883053580443548504],
        y: [9402541537984038308, 18417754886573459057, 4838423572481299259, 15464509280828210181],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [453874718208435914, 991410516929405062, 12123956665232519916, 1116912005956542124],
        y: [5278792877088150769, 14265231743380201299, 2188645538782029408, 13049382658328688434],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 304-319

    let mut p1 = SyscallPoint256 {
        x: [103041066207797471, 5493182318505324371, 541988339736127904, 18286371861815636627],
        y: [17320919250874839455, 8916760230381345237, 16419967297028024504, 2967218390301391698],
    };
    let p2 = SyscallPoint256 {
        x: [453874718208435914, 991410516929405062, 12123956665232519916, 1116912005956542124],
        y: [5278792877088150769, 14265231743380201299, 2188645538782029408, 13049382658328688434],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [15159292604162686267, 4730897740130147445, 2071708234608980775, 2131074080975141377],
        y: [9986330608556583152, 14990185093737273450, 14653762477376165914, 1721459030046704998],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 320-335

    let mut p1 = SyscallPoint256 {
        x: [11574995974176117469, 4414766936180469986, 822679711507871630, 8082199340442924335],
        y: [8222665182974650663, 5177706092917081916, 9067527580370240428, 12749403413602153426],
    };
    let p2 = SyscallPoint256 {
        x: [15159292604162686267, 4730897740130147445, 2071708234608980775, 2131074080975141377],
        y: [9986330608556583152, 14990185093737273450, 14653762477376165914, 1721459030046704998],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13607899488517933402, 5016059786498563456, 5865386345088109455, 3417186468862129292],
        y: [9933816199243592665, 15192022654306330566, 14491455573580872657, 7364464128872969602],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 336-351

    let mut p1 = SyscallPoint256 {
        x: [15914243312412917186, 15938066163142370148, 5377971646883909246, 17594455620906282567],
        y: [9362984259423688701, 5482376278183694118, 8717509125378925098, 6291593226033725548],
    };
    let p2 = SyscallPoint256 {
        x: [13607899488517933402, 5016059786498563456, 5865386345088109455, 3417186468862129292],
        y: [9933816199243592665, 15192022654306330566, 14491455573580872657, 7364464128872969602],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [4596637296931902290, 5179284164833778328, 5216904698233134048, 3681576032549449949],
        y: [824082266476420257, 605445595205419274, 11578697185493671634, 5863029753408550077],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 352-367

    let mut p1 = SyscallPoint256 {
        x: [4064169351091944918, 5275808506650400396, 14581098963839811052, 3661373076866028107],
        y: [2737419666888123184, 8794840480950624395, 7063906367485990430, 2415172074288609096],
    };
    let p2 = SyscallPoint256 {
        x: [4596637296931902290, 5179284164833778328, 5216904698233134048, 3681576032549449949],
        y: [824082266476420257, 605445595205419274, 11578697185493671634, 5863029753408550077],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [216749545875972051, 14058683194214034595, 8352508619592551943, 7203297682875879833],
        y: [1947837471752781879, 15222269456860444980, 16073304233080531074, 9489451335855890382],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 368-383

    let mut p1 = SyscallPoint256 {
        x: [14872935670260899089, 2498150643347925719, 3733789054294541208, 3824915211200202980],
        y: [6041292206277746165, 10629888326564814526, 17241135201711791871, 9919233498831486648],
    };
    let p2 = SyscallPoint256 {
        x: [216749545875972051, 14058683194214034595, 8352508619592551943, 7203297682875879833],
        y: [1947837471752781879, 15222269456860444980, 16073304233080531074, 9489451335855890382],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8274876590141192350, 95720123198723902, 11090921260126014511, 18095513945798992136],
        y: [6456369218473469706, 3764627666486703286, 9920020696404400423, 6886645070032807292],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 384-399

    let mut p1 = SyscallPoint256 {
        x: [2695369873367973041, 6294381136496828691, 55775141394128843, 7916937762851965652],
        y: [6331297647387634484, 9273615160470511347, 6672627684444104360, 10486908704690529309],
    };
    let p2 = SyscallPoint256 {
        x: [8274876590141192350, 95720123198723902, 11090921260126014511, 18095513945798992136],
        y: [6456369218473469706, 3764627666486703286, 9920020696404400423, 6886645070032807292],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [3501977551190874843, 18299905126105441486, 81834563298698649, 5883038862270701221],
        y: [12537815785366635759, 8008905523423489286, 16380012217031625002, 8631380985805656403],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 400-415

    let mut p1 = SyscallPoint256 {
        x: [5551767817086649981, 4652370938384087758, 3180093489577292009, 10939354481072644386],
        y: [8751339588051317754, 15735493227336269005, 285915284228834847, 9914480167209927372],
    };
    let p2 = SyscallPoint256 {
        x: [3501977551190874843, 18299905126105441486, 81834563298698649, 5883038862270701221],
        y: [12537815785366635759, 8008905523423489286, 16380012217031625002, 8631380985805656403],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [18432287065923338713, 5166766174961492788, 1828793822852732212, 13593841263226959975],
        y: [13896199101075208059, 7062918950905956787, 10963824917458864486, 6520641051279386208],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 416-431

    let mut p1 = SyscallPoint256 {
        x: [14747068561044356076, 10067230293567012455, 17145682334294447914, 3301079946884626365],
        y: [4499950505480655381, 3977469822236581688, 7345521315408168692, 5105891058512077842],
    };
    let p2 = SyscallPoint256 {
        x: [18432287065923338713, 5166766174961492788, 1828793822852732212, 13593841263226959975],
        y: [13896199101075208059, 7062918950905956787, 10963824917458864486, 6520641051279386208],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8154615983424653897, 7131836204146226003, 15125915807250983712, 16046912909942911914],
        y: [14721215721826705832, 13213131517761040548, 3455368700193666818, 16176486201532394492],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 432-447

    let mut p1 = SyscallPoint256 {
        x: [1715052357432876570, 9216418127752606358, 17410964304851308150, 2012054922371974568],
        y: [6338501016427430979, 7499484979756890478, 9978213532082457359, 16381956913317963367],
    };
    let p2 = SyscallPoint256 {
        x: [8154615983424653897, 7131836204146226003, 15125915807250983712, 16046912909942911914],
        y: [14721215721826705832, 13213131517761040548, 3455368700193666818, 16176486201532394492],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [10200771866082422070, 15233400556993348024, 1677199273022126766, 16964552336732726619],
        y: [6243170004544308305, 8844542287127595426, 16359998086380573183, 7016508127393210429],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 448-463

    let mut p1 = SyscallPoint256 {
        x: [17579371235244829931, 8333242141519641328, 3963088586427754516, 4862346220812031056],
        y: [8314696884216234465, 9737362729761478530, 7618118829915412479, 833565746329731887],
    };
    let p2 = SyscallPoint256 {
        x: [10200771866082422070, 15233400556993348024, 1677199273022126766, 16964552336732726619],
        y: [6243170004544308305, 8844542287127595426, 16359998086380573183, 7016508127393210429],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13855740576624240462, 9310705850978512737, 4315766627569668515, 10763185061552723532],
        y: [8191496754499051172, 13704118876820223148, 8447513748640383780, 14444170809305060500],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 464-479

    let mut p1 = SyscallPoint256 {
        x: [5520741925075747051, 4734665894730203687, 5313709858873347010, 13299253594783667420],
        y: [1981332928802481742, 14631503625348278887, 5125823036125390694, 8008746776286910607],
    };
    let p2 = SyscallPoint256 {
        x: [13855740576624240462, 9310705850978512737, 4315766627569668515, 10763185061552723532],
        y: [8191496754499051172, 13704118876820223148, 8447513748640383780, 14444170809305060500],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5180260000801893250, 5576654165372914908, 1309148430045953829, 925958165987619575],
        y: [3499584381566724447, 169741299846781908, 11124353840197093508, 14200096245096926612],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 480-495

    let mut p1 = SyscallPoint256 {
        x: [13391171581992757170, 6822370424887535011, 17525401371839857760, 2758603646549901816],
        y: [10604421022012418612, 6212954835810956803, 10317515620428406552, 11391251302118933656],
    };
    let p2 = SyscallPoint256 {
        x: [5180260000801893250, 5576654165372914908, 1309148430045953829, 925958165987619575],
        y: [3499584381566724447, 169741299846781908, 11124353840197093508, 14200096245096926612],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [14735888330011328251, 5573972878576151961, 13852378029340426220, 13379388281851196555],
        y: [5137151605102109369, 1197419595926441242, 5302579665649846651, 1060689601918635210],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 496-511

    let mut p1 = SyscallPoint256 {
        x: [10849403525780439829, 11289614090998189679, 2181572784496621666, 12368387090914152994],
        y: [17987381282621225994, 4593589374930006840, 7193780182280506735, 11594338602946289371],
    };
    let p2 = SyscallPoint256 {
        x: [14735888330011328251, 5573972878576151961, 13852378029340426220, 13379388281851196555],
        y: [5137151605102109369, 1197419595926441242, 5302579665649846651, 1060689601918635210],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13071452706259432000, 1561342327798404440, 2239552469396240275, 9360860172121362935],
        y: [4122765418885251096, 12618215134047766937, 2320148166506938950, 14013265817654152112],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 512-527

    let mut p1 = SyscallPoint256 {
        x: [11293234787830732212, 10553344111901552358, 17115243093740210829, 1218520766286310857],
        y: [3813394437315896717, 5522971576380385928, 5573108632631713653, 14306307654481731650],
    };
    let p2 = SyscallPoint256 {
        x: [13071452706259432000, 1561342327798404440, 2239552469396240275, 9360860172121362935],
        y: [4122765418885251096, 12618215134047766937, 2320148166506938950, 14013265817654152112],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [10006229491154365947, 6727618987860397178, 7046542328338385748, 16187852099038820861],
        y: [8378464541065074023, 9247520640360376019, 12552124350768504496, 10165896236998650687],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 528-543

    let mut p1 = SyscallPoint256 {
        x: [1108637335817030272, 5576108730364894324, 12789268458268260803, 13164402591290150053],
        y: [13172185654463695363, 11284352376475883246, 11911495718141245140, 18079188421163464222],
    };
    let p2 = SyscallPoint256 {
        x: [10006229491154365947, 6727618987860397178, 7046542328338385748, 16187852099038820861],
        y: [8378464541065074023, 9247520640360376019, 12552124350768504496, 10165896236998650687],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [11623169190403283598, 17068669642374506562, 4141402140827765446, 2179648726488660013],
        y: [10115867639754326390, 12025547697042875110, 852173907725251029, 3386588260483922704],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 544-559

    let mut p1 = SyscallPoint256 {
        x: [12090657614458806996, 8817177143830552897, 503021151671951994, 3861342605456894666],
        y: [11604268610577650434, 15006137691171346865, 13820669395044698774, 17752030043910038985],
    };
    let p2 = SyscallPoint256 {
        x: [11623169190403283598, 17068669642374506562, 4141402140827765446, 2179648726488660013],
        y: [10115867639754326390, 12025547697042875110, 852173907725251029, 3386588260483922704],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1035927317643819034, 17353136055061049415, 4268115939027386742, 4026602638594710033],
        y: [16871059498234949738, 2233439322816396226, 14062996002823185792, 5651450137595941616],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 560-575

    let mut p1 = SyscallPoint256 {
        x: [18017764961173110055, 4926752439929326690, 14997611895299651099, 11445686286449633356],
        y: [6445410683928888408, 10711851183156513076, 17182838910183961172, 13128425468190650090],
    };
    let p2 = SyscallPoint256 {
        x: [1035927317643819034, 17353136055061049415, 4268115939027386742, 4026602638594710033],
        y: [16871059498234949738, 2233439322816396226, 14062996002823185792, 5651450137595941616],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1067311716169660418, 1034337825024216295, 3213517253338680327, 3641775450275733519],
        y: [9683032282477615234, 10904467368722975470, 6951686410473066757, 13391864800403857424],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 576-591

    let mut p1 = SyscallPoint256 {
        x: [6311271162047532419, 7031687393186167137, 7663647010047551963, 12100037248868124140],
        y: [10826716363625643729, 5162120399752083737, 14977221076717961291, 7063074885427487445],
    };
    let p2 = SyscallPoint256 {
        x: [1067311716169660418, 1034337825024216295, 3213517253338680327, 3641775450275733519],
        y: [9683032282477615234, 10904467368722975470, 6951686410473066757, 13391864800403857424],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13487453941517569908, 243098374521548216, 2229066818043626511, 12491200930566995719],
        y: [9572133749335449565, 16063873362822101876, 11899161690482435933, 15517155185699180930],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 592-607

    let mut p1 = SyscallPoint256 {
        x: [17476293204481810149, 15730797396350667795, 7360633096409230958, 15317641942788415928],
        y: [7362722182936827048, 1932374696440073692, 17135174711157390174, 152007121579973923],
    };
    let p2 = SyscallPoint256 {
        x: [13487453941517569908, 243098374521548216, 2229066818043626511, 12491200930566995719],
        y: [9572133749335449565, 16063873362822101876, 11899161690482435933, 15517155185699180930],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [6840554336969258264, 367545887029918008, 4557615043444161796, 11067145729364594586],
        y: [8985482730765902468, 12212411486575038577, 2524436988336709056, 7603926967023226665],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 608-623

    let mut p1 = SyscallPoint256 {
        x: [5984682183816926538, 12311996661131431934, 5135883420287673068, 9903195440301724064],
        y: [15460751836961650911, 16575598903605598172, 15736188084217256945, 4036390641650549932],
    };
    let p2 = SyscallPoint256 {
        x: [6840554336969258264, 367545887029918008, 4557615043444161796, 11067145729364594586],
        y: [8985482730765902468, 12212411486575038577, 2524436988336709056, 7603926967023226665],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8069978617523194485, 10040017498880799709, 4070240834111844240, 14397567833749315177],
        y: [2408303731189624197, 18095238845897882862, 9128836378019859423, 2118495997885755559],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 624-639

    let mut p1 = SyscallPoint256 {
        x: [9513710291490163238, 9077994736731300711, 14586069155036100770, 1275567076589399404],
        y: [15254394179475184984, 4300413298620210498, 10148128438355415995, 7292206992328756304],
    };
    let p2 = SyscallPoint256 {
        x: [8069978617523194485, 10040017498880799709, 4070240834111844240, 14397567833749315177],
        y: [2408303731189624197, 18095238845897882862, 9128836378019859423, 2118495997885755559],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5313036004776658223, 5748518594214101917, 15965375769301489567, 2394109371143714419],
        y: [17120705537189757149, 10411841749873587876, 3281661694091576154, 5012240766734575141],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 640-655

    let mut p1 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [7960650550461533833, 6752854485708698976, 7033117147444881223, 3794673124853157169],
    };
    let p2 = SyscallPoint256 {
        x: [5313036004776658223, 5748518594214101917, 15965375769301489567, 2394109371143714419],
        y: [17120705537189757149, 10411841749873587876, 3281661694091576154, 5012240766734575141],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [10874910764848192175, 9020727903069138557, 5772256171017100028, 1250219299188327156],
        y: [12796806836320033030, 16993477809206151124, 4672779604748745663, 13049568263257569021],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 656-671

    let mut p1 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [7960650550461533833, 6752854485708698976, 7033117147444881223, 3794673124853157169],
    };
    let p2 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 15025332287773626507],
        y: [17120705537189757149, 10411841749873587876, 3281661694091576154, 5012240766734575141],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [2314528374966098503, 2889063032665862748, 8748168253325326142, 7477973783986122508],
        y: [3180169149017043874, 2251189934630892016, 14075773856299550074, 3978469940125499659],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 672-687

    let mut p1 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [7960650550461533833, 6752854485708698976, 7033117147444881223, 3794673124853157169],
    };
    let p2 = SyscallPoint256 {
        x: [545887435628795271, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [17120705537189757149, 10411841749873587876, 3281661694091576154, 5012240766734575141],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [16302535435195808843, 8543364680260097415, 14908508942232280741, 15497036330728249576],
        y: [6141349181170948100, 1750840565155776462, 5517384897023788690, 9517308371755837438],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_dbl test rows: 688-703

    let mut p1 = SyscallPoint256 {
        x: [3388248522597430614, 9436808338628714891, 2325328641075066323, 18444909905599983268],
        y: [4361468193159901847, 16033079614159971488, 17563640529965925728, 12543219280952145440],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [14245154385136969818, 7529161239585360219, 1568254326717236787, 14992788640288429595],
        y: [7711599709454213927, 8728974837485694290, 12156980350441740309, 12246219763152707799],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 704-719

    let mut p1 = SyscallPoint256 {
        x: [14245154385136969818, 7529161239585360219, 1568254326717236787, 14992788640288429595],
        y: [7711599709454213927, 8728974837485694290, 12156980350441740309, 12246219763152707799],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [361059452381750990, 7508086908927522708, 9998163320986307337, 18334932765985551316],
        y: [10920898125377357247, 134132599253277986, 15252363593060096385, 7517033372555823720],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 720-735

    let mut p1 = SyscallPoint256 {
        x: [361059452381750990, 7508086908927522708, 9998163320986307337, 18334932765985551316],
        y: [10920898125377357247, 134132599253277986, 15252363593060096385, 7517033372555823720],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [11229849546581927363, 18183172613498203073, 12988774327542766411, 7983249766513717373],
        y: [5299100104091797096, 4200004925846514740, 6426451471226140064, 15348588267406231312],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 736-751

    let mut p1 = SyscallPoint256 {
        x: [11229849546581927363, 18183172613498203073, 12988774327542766411, 7983249766513717373],
        y: [5299100104091797096, 4200004925846514740, 6426451471226140064, 15348588267406231312],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [4869300263515369699, 11686477369051177892, 10351046573905852206, 4543710797049982351],
        y: [14628406147340517455, 10736903920457307044, 16792687194968752563, 14656639356436790417],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 752-767

    let mut p1 = SyscallPoint256 {
        x: [4869300263515369699, 11686477369051177892, 10351046573905852206, 4543710797049982351],
        y: [14628406147340517455, 10736903920457307044, 16792687194968752563, 14656639356436790417],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [14391060156941997906, 16682396899684982862, 9308341629085326058, 15537658789411800629],
        y: [13528856402216537844, 855755022726772546, 17794446170121208933, 10459452768711114802],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 768-783

    let mut p1 = SyscallPoint256 {
        x: [14391060156941997906, 16682396899684982862, 9308341629085326058, 15537658789411800629],
        y: [13528856402216537844, 855755022726772546, 17794446170121208933, 10459452768711114802],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [12180186410187710597, 13074317468773359492, 1212500563603673519, 3766037359670906174],
        y: [7869060398548210392, 110983775202227839, 5723666432541990313, 7357327491894833029],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 784-799

    let mut p1 = SyscallPoint256 {
        x: [12180186410187710597, 13074317468773359492, 1212500563603673519, 3766037359670906174],
        y: [7869060398548210392, 110983775202227839, 5723666432541990313, 7357327491894833029],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [18229459384247684602, 684707198064386436, 980149713513319584, 9395299577453190220],
        y: [3877591415008278378, 6320499931082966136, 7421617926466391860, 9510922786123587150],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 800-815

    let mut p1 = SyscallPoint256 {
        x: [18229459384247684602, 684707198064386436, 980149713513319584, 9395299577453190220],
        y: [3877591415008278378, 6320499931082966136, 7421617926466391860, 9510922786123587150],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [15095153298253046284, 5303204884433242329, 14271294903557756800, 1608814916597982061],
        y: [7828074314403099341, 84151435424685138, 16932014280599564316, 231980500341718906],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 816-831

    let mut p1 = SyscallPoint256 {
        x: [15095153298253046284, 5303204884433242329, 14271294903557756800, 1608814916597982061],
        y: [7828074314403099341, 84151435424685138, 16932014280599564316, 231980500341718906],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5175809867597589453, 6112508711071501135, 6960504755495188287, 15320934750850643004],
        y: [16603242195010847682, 1341035381658710065, 15548816972008125270, 374330460415019277],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 832-847

    let mut p1 = SyscallPoint256 {
        x: [5175809867597589453, 6112508711071501135, 6960504755495188287, 15320934750850643004],
        y: [16603242195010847682, 1341035381658710065, 15548816972008125270, 374330460415019277],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [6049190514384470666, 1382238135566132255, 1028123464921783413, 6887276088214724213],
        y: [13829158347396631936, 10117019307876977412, 16568876609164211038, 2790195167144050408],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 848-863

    let mut p1 = SyscallPoint256 {
        x: [6049190514384470666, 1382238135566132255, 1028123464921783413, 6887276088214724213],
        y: [13829158347396631936, 10117019307876977412, 16568876609164211038, 2790195167144050408],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [7329600635844956694, 4572057379606856554, 1336260601171668306, 15741542477464055028],
        y: [15775320700018001266, 16837481790980148954, 16076128951343087558, 8356605334306084336],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 864-879

    let mut p1 = SyscallPoint256 {
        x: [7329600635844956694, 4572057379606856554, 1336260601171668306, 15741542477464055028],
        y: [15775320700018001266, 16837481790980148954, 16076128951343087558, 8356605334306084336],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [10738044202431724224, 1807366078262717190, 1397443900249519886, 10750357262808598172],
        y: [5155141259007419145, 16310686023055039592, 3809253083837576160, 10321177611541094882],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 880-895

    let mut p1 = SyscallPoint256 {
        x: [10738044202431724224, 1807366078262717190, 1397443900249519886, 10750357262808598172],
        y: [5155141259007419145, 16310686023055039592, 3809253083837576160, 10321177611541094882],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [463945003823832207, 17474371098211739570, 8001206879091110576, 7475415578589698301],
        y: [6140739010600260313, 14814938377153462974, 11729983352586442387, 8834749270810554244],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 896-911

    let mut p1 = SyscallPoint256 {
        x: [463945003823832207, 17474371098211739570, 8001206879091110576, 7475415578589698301],
        y: [6140739010600260313, 14814938377153462974, 11729983352586442387, 8834749270810554244],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1295273892355154746, 10129401683319168165, 16093208732893648950, 9888537620415219562],
        y: [7473736272472650821, 11833745278707362626, 17587576923453685554, 14821718792216889502],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 912-927

    let mut p1 = SyscallPoint256 {
        x: [1295273892355154746, 10129401683319168165, 16093208732893648950, 9888537620415219562],
        y: [7473736272472650821, 11833745278707362626, 17587576923453685554, 14821718792216889502],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5442901514494762440, 8068579949080609849, 13440047785991771202, 4913779344553672626],
        y: [3591977695608775603, 11991442826445074000, 18345839140001742551, 10858391194666493688],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 928-943

    let mut p1 = SyscallPoint256 {
        x: [5442901514494762440, 8068579949080609849, 13440047785991771202, 4913779344553672626],
        y: [3591977695608775603, 11991442826445074000, 18345839140001742551, 10858391194666493688],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [4518765836368931242, 7498818245279601483, 13227717385055713490, 16516969123953977005],
        y: [14175714478368387599, 8050551974340866446, 6586817248383241729, 13366640209916572701],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 944-959

    let mut p1 = SyscallPoint256 {
        x: [4518765836368931242, 7498818245279601483, 13227717385055713490, 16516969123953977005],
        y: [14175714478368387599, 8050551974340866446, 6586817248383241729, 13366640209916572701],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1940266508063891926, 9984431616774062814, 14093435390931967825, 10637489008200751856],
        y: [16671943631316568944, 10956117075848626050, 11333022928271928324, 16044983857828047118],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 960-975

    let mut p1 = SyscallPoint256 {
        x: [1940266508063891926, 9984431616774062814, 14093435390931967825, 10637489008200751856],
        y: [16671943631316568944, 10956117075848626050, 11333022928271928324, 16044983857828047118],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [103041066207797471, 5493182318505324371, 541988339736127904, 18286371861815636627],
        y: [17320919250874839455, 8916760230381345237, 16419967297028024504, 2967218390301391698],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 976-991

    let mut p1 = SyscallPoint256 {
        x: [103041066207797471, 5493182318505324371, 541988339736127904, 18286371861815636627],
        y: [17320919250874839455, 8916760230381345237, 16419967297028024504, 2967218390301391698],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [11574995974176117469, 4414766936180469986, 822679711507871630, 8082199340442924335],
        y: [8222665182974650663, 5177706092917081916, 9067527580370240428, 12749403413602153426],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 992-1007

    let mut p1 = SyscallPoint256 {
        x: [11574995974176117469, 4414766936180469986, 822679711507871630, 8082199340442924335],
        y: [8222665182974650663, 5177706092917081916, 9067527580370240428, 12749403413602153426],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [15914243312412917186, 15938066163142370148, 5377971646883909246, 17594455620906282567],
        y: [9362984259423688701, 5482376278183694118, 8717509125378925098, 6291593226033725548],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1008-1023

    let mut p1 = SyscallPoint256 {
        x: [15914243312412917186, 15938066163142370148, 5377971646883909246, 17594455620906282567],
        y: [9362984259423688701, 5482376278183694118, 8717509125378925098, 6291593226033725548],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [4064169351091944918, 5275808506650400396, 14581098963839811052, 3661373076866028107],
        y: [2737419666888123184, 8794840480950624395, 7063906367485990430, 2415172074288609096],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1024-1039

    let mut p1 = SyscallPoint256 {
        x: [4064169351091944918, 5275808506650400396, 14581098963839811052, 3661373076866028107],
        y: [2737419666888123184, 8794840480950624395, 7063906367485990430, 2415172074288609096],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [14872935670260899089, 2498150643347925719, 3733789054294541208, 3824915211200202980],
        y: [6041292206277746165, 10629888326564814526, 17241135201711791871, 9919233498831486648],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1040-1055

    let mut p1 = SyscallPoint256 {
        x: [14872935670260899089, 2498150643347925719, 3733789054294541208, 3824915211200202980],
        y: [6041292206277746165, 10629888326564814526, 17241135201711791871, 9919233498831486648],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [2695369873367973041, 6294381136496828691, 55775141394128843, 7916937762851965652],
        y: [6331297647387634484, 9273615160470511347, 6672627684444104360, 10486908704690529309],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1056-1071

    let mut p1 = SyscallPoint256 {
        x: [2695369873367973041, 6294381136496828691, 55775141394128843, 7916937762851965652],
        y: [6331297647387634484, 9273615160470511347, 6672627684444104360, 10486908704690529309],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5551767817086649981, 4652370938384087758, 3180093489577292009, 10939354481072644386],
        y: [8751339588051317754, 15735493227336269005, 285915284228834847, 9914480167209927372],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1072-1087

    let mut p1 = SyscallPoint256 {
        x: [5551767817086649981, 4652370938384087758, 3180093489577292009, 10939354481072644386],
        y: [8751339588051317754, 15735493227336269005, 285915284228834847, 9914480167209927372],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [14747068561044356076, 10067230293567012455, 17145682334294447914, 3301079946884626365],
        y: [4499950505480655381, 3977469822236581688, 7345521315408168692, 5105891058512077842],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1088-1103

    let mut p1 = SyscallPoint256 {
        x: [14747068561044356076, 10067230293567012455, 17145682334294447914, 3301079946884626365],
        y: [4499950505480655381, 3977469822236581688, 7345521315408168692, 5105891058512077842],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1715052357432876570, 9216418127752606358, 17410964304851308150, 2012054922371974568],
        y: [6338501016427430979, 7499484979756890478, 9978213532082457359, 16381956913317963367],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1104-1119

    let mut p1 = SyscallPoint256 {
        x: [1715052357432876570, 9216418127752606358, 17410964304851308150, 2012054922371974568],
        y: [6338501016427430979, 7499484979756890478, 9978213532082457359, 16381956913317963367],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [17579371235244829931, 8333242141519641328, 3963088586427754516, 4862346220812031056],
        y: [8314696884216234465, 9737362729761478530, 7618118829915412479, 833565746329731887],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1120-1135

    let mut p1 = SyscallPoint256 {
        x: [17579371235244829931, 8333242141519641328, 3963088586427754516, 4862346220812031056],
        y: [8314696884216234465, 9737362729761478530, 7618118829915412479, 833565746329731887],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5520741925075747051, 4734665894730203687, 5313709858873347010, 13299253594783667420],
        y: [1981332928802481742, 14631503625348278887, 5125823036125390694, 8008746776286910607],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1136-1151

    let mut p1 = SyscallPoint256 {
        x: [5520741925075747051, 4734665894730203687, 5313709858873347010, 13299253594783667420],
        y: [1981332928802481742, 14631503625348278887, 5125823036125390694, 8008746776286910607],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [13391171581992757170, 6822370424887535011, 17525401371839857760, 2758603646549901816],
        y: [10604421022012418612, 6212954835810956803, 10317515620428406552, 11391251302118933656],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1152-1167

    let mut p1 = SyscallPoint256 {
        x: [13391171581992757170, 6822370424887535011, 17525401371839857760, 2758603646549901816],
        y: [10604421022012418612, 6212954835810956803, 10317515620428406552, 11391251302118933656],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [10849403525780439829, 11289614090998189679, 2181572784496621666, 12368387090914152994],
        y: [17987381282621225994, 4593589374930006840, 7193780182280506735, 11594338602946289371],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1168-1183

    let mut p1 = SyscallPoint256 {
        x: [10849403525780439829, 11289614090998189679, 2181572784496621666, 12368387090914152994],
        y: [17987381282621225994, 4593589374930006840, 7193780182280506735, 11594338602946289371],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [11293234787830732212, 10553344111901552358, 17115243093740210829, 1218520766286310857],
        y: [3813394437315896717, 5522971576380385928, 5573108632631713653, 14306307654481731650],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1184-1199

    let mut p1 = SyscallPoint256 {
        x: [11293234787830732212, 10553344111901552358, 17115243093740210829, 1218520766286310857],
        y: [3813394437315896717, 5522971576380385928, 5573108632631713653, 14306307654481731650],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1108637335817030272, 5576108730364894324, 12789268458268260803, 13164402591290150053],
        y: [13172185654463695363, 11284352376475883246, 11911495718141245140, 18079188421163464222],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1200-1215

    let mut p1 = SyscallPoint256 {
        x: [1108637335817030272, 5576108730364894324, 12789268458268260803, 13164402591290150053],
        y: [13172185654463695363, 11284352376475883246, 11911495718141245140, 18079188421163464222],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [12090657614458806996, 8817177143830552897, 503021151671951994, 3861342605456894666],
        y: [11604268610577650434, 15006137691171346865, 13820669395044698774, 17752030043910038985],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1216-1231

    let mut p1 = SyscallPoint256 {
        x: [12090657614458806996, 8817177143830552897, 503021151671951994, 3861342605456894666],
        y: [11604268610577650434, 15006137691171346865, 13820669395044698774, 17752030043910038985],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [18017764961173110055, 4926752439929326690, 14997611895299651099, 11445686286449633356],
        y: [6445410683928888408, 10711851183156513076, 17182838910183961172, 13128425468190650090],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1232-1247

    let mut p1 = SyscallPoint256 {
        x: [18017764961173110055, 4926752439929326690, 14997611895299651099, 11445686286449633356],
        y: [6445410683928888408, 10711851183156513076, 17182838910183961172, 13128425468190650090],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [6311271162047532419, 7031687393186167137, 7663647010047551963, 12100037248868124140],
        y: [10826716363625643729, 5162120399752083737, 14977221076717961291, 7063074885427487445],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1248-1263

    let mut p1 = SyscallPoint256 {
        x: [6311271162047532419, 7031687393186167137, 7663647010047551963, 12100037248868124140],
        y: [10826716363625643729, 5162120399752083737, 14977221076717961291, 7063074885427487445],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [17476293204481810149, 15730797396350667795, 7360633096409230958, 15317641942788415928],
        y: [7362722182936827048, 1932374696440073692, 17135174711157390174, 152007121579973923],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1264-1279

    let mut p1 = SyscallPoint256 {
        x: [17476293204481810149, 15730797396350667795, 7360633096409230958, 15317641942788415928],
        y: [7362722182936827048, 1932374696440073692, 17135174711157390174, 152007121579973923],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5984682183816926538, 12311996661131431934, 5135883420287673068, 9903195440301724064],
        y: [15460751836961650911, 16575598903605598172, 15736188084217256945, 4036390641650549932],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1280-1295

    let mut p1 = SyscallPoint256 {
        x: [5984682183816926538, 12311996661131431934, 5135883420287673068, 9903195440301724064],
        y: [15460751836961650911, 16575598903605598172, 15736188084217256945, 4036390641650549932],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [9513710291490163238, 9077994736731300711, 14586069155036100770, 1275567076589399404],
        y: [15254394179475184984, 4300413298620210498, 10148128438355415995, 7292206992328756304],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1296-1311

    let mut p1 = SyscallPoint256 {
        x: [9513710291490163238, 9077994736731300711, 14586069155036100770, 1275567076589399404],
        y: [15254394179475184984, 4300413298620210498, 10148128438355415995, 7292206992328756304],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [7960650550461533833, 6752854485708698976, 7033117147444881223, 3794673124853157169],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1312-1327

    let mut p1 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [7960650550461533833, 6752854485708698976, 7033117147444881223, 3794673124853157169],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5550006413009698729, 2930477944108794843, 4206160142528515078, 11862148329463583523],
        y: [7472242686678486130, 6550614526735030299, 16155668332989636091, 14732040278589264792],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1328-1343

    let mut p1 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [7960650550461533833, 6752854485708698976, 7033117147444881223, 3794673124853157169],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5550006413009698729, 2930477944108794843, 4206160142528515078, 11862148329463583523],
        y: [7472242686678486130, 6550614526735030299, 16155668332989636091, 14732040278589264792],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    let mut params = SyscallSecp256r1AddParams { p1: &mut p1, p2: &p2 };
    // secp256r1_add test rows: 1344-1359

    let mut p1 = SyscallPoint256 {
        x: [3023761934281877408, 839885088822416368, 6666843153679257524, 2817348424689311324],
        y: [3382649723038281699, 11977552375781475401, 17954793222130569468, 14683160364916970152],
    };
    let p2 = SyscallPoint256 {
        x: [6634278686785825332, 7174134293300251348, 4234257952359735643, 11786416238069702128],
        y: [6373861481963150121, 1061595456857154055, 3989825356227524515, 4017803940295246235],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [10783398380294648026, 17943298271725788968, 7629180003798620157, 17869899136753745521],
        y: [15745979871538798146, 10623107618561211582, 3132883871569491655, 6088382933300082373],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1360-1375

    let mut p1 = SyscallPoint256 {
        x: [8130430257936032153, 10698704427189352249, 13560937530690950832, 13209643043563306052],
        y: [7626450556282136084, 7457216102998180592, 5399258440018316696, 9753639139267242797],
    };
    let p2 = SyscallPoint256 {
        x: [14621982793881812969, 864899739980179478, 16044201944681495339, 10723247554272807767],
        y: [2161764308968460230, 8396787563970621649, 10158058823539715685, 8254506730275814111],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [2183194684614799737, 15417402207330342430, 2623615353377057121, 12299267275518955941],
        y: [10421949206572822349, 15847380554048849281, 3495810134462182303, 10728570958128506900],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1376-1391

    let mut p1 = SyscallPoint256 {
        x: [11143185320284619352, 7471174164669834634, 5341503152229959592, 14833549400636286760],
        y: [15172188650432986770, 17059128618658110175, 12505499635961775905, 5683485831302079562],
    };
    let p2 = SyscallPoint256 {
        x: [14049299840411999300, 11413735924315140552, 12550478654023272402, 15380441314017228956],
        y: [7573699006704660962, 10791521988637416544, 17678355795809193220, 17554013580445739329],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [368106951210490906, 13234817150900540419, 3936866804663829482, 8826742873700846214],
        y: [2796988817425204203, 7095122403188212224, 17053396652687519876, 12774555932930670161],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1392-1407

    let mut p1 = SyscallPoint256 {
        x: [11656846299175608490, 9975213208832183336, 13074473806362261157, 17490945071960317024],
        y: [6585296526916349032, 12915163579167414680, 6652455555140361848, 2178197820760210844],
    };
    let p2 = SyscallPoint256 {
        x: [16777911952303462141, 5468673455272753432, 1366241067300390348, 6163199909231741207],
        y: [8569274336333750415, 7155487201258887751, 10559123034713058116, 13604056015670444352],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [12029614668109433016, 14291993923466706320, 12902025930063832445, 8577611682115584365],
        y: [7496843313571677693, 4912652811207420809, 11968908092284342131, 13545815713682396641],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1408-1423

    let mut p1 = SyscallPoint256 {
        x: [929379773008316255, 13475718905024774248, 17057085596117072265, 17690745125335485268],
        y: [4262051245421458712, 13957746699983754005, 273900708350522323, 4917230457600257748],
    };
    let p2 = SyscallPoint256 {
        x: [14234900424558794351, 13110942750922016698, 8967791397605552689, 4001204871701480445],
        y: [10333339144399017379, 6942815845891337017, 15728205780478363380, 9347820128694514141],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [94573351873213729, 11154408387492363773, 15160998365267742242, 8257860312337430024],
        y: [5755952009553816121, 9604510130479555283, 4019221162865592673, 7959576821703295955],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1424-1439

    let mut p1 = SyscallPoint256 {
        x: [602085271472093462, 8710698155712071186, 1453145977591170948, 9035429603015992061],
        y: [1350516209616903371, 5394630299392248383, 18327131180031413042, 10319122887671667084],
    };
    let p2 = SyscallPoint256 {
        x: [2140319835710212879, 15000492776430345026, 17312841363734335156, 10743848221257768987],
        y: [13649070677191794279, 2589511694530248538, 12291970145061996124, 6094075347441222273],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [238882066398295775, 16082385457172612968, 15511607010620838395, 17525321374555631873],
        y: [13757332037944260486, 15633538696476099180, 3549349121008232185, 10905599049064872927],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1440-1455

    let mut p1 = SyscallPoint256 {
        x: [547549676080039466, 14075180725682322500, 7447913900126621884, 1706419871672688737],
        y: [16646679270162982912, 8415763656050388763, 16768780625047248150, 1749107543096232038],
    };
    let p2 = SyscallPoint256 {
        x: [3023880066950329675, 16295656402789756541, 420135005926200737, 16427683949479061774],
        y: [2399628620601396611, 14972379148772465032, 5102543135571864277, 14940413950725182020],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [4889703624919840387, 7008084646297593559, 11918453773791239832, 8250429796390734111],
        y: [7952242788174603620, 11306695973030805799, 13519820368178942879, 10646271258410253792],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1456-1471

    let mut p1 = SyscallPoint256 {
        x: [6333246398041115162, 13964949588895189367, 3181902228641335273, 6034406339515524269],
        y: [13155735050858881101, 798054493108402481, 1329395880282691795, 630046773475749558],
    };
    let p2 = SyscallPoint256 {
        x: [3026535497602823081, 13591254508385728677, 15978191147536904109, 2541624294983634100],
        y: [10161553410537454950, 18328851323483402855, 5081783978614223398, 12473080955983961819],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [17330358761514973513, 12373203602249757318, 9326030826429713046, 18242031764613898582],
        y: [1226693376830743415, 16627529217141356168, 17757918663321018616, 10059241622226929192],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1472-1487

    let mut p1 = SyscallPoint256 {
        x: [15857197568674302507, 5800253732871037188, 2704540462662940840, 5344831852837794041],
        y: [11033911026089818881, 17343826424053305975, 4994452304078628392, 5031360266309991256],
    };
    let p2 = SyscallPoint256 {
        x: [1276852992065267696, 9534759359201092326, 2556913187968258386, 11976245600469545245],
        y: [4803452267416954789, 11755456599810694760, 11917825150485357129, 467148848151115825],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [6598675293749725787, 12322819186654152618, 119678464899991351, 14273959421126490698],
        y: [5871250377899121536, 155002227759675673, 16213501849012158817, 11081892663926830148],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1488-1503

    let mut p1 = SyscallPoint256 {
        x: [9777705720050073897, 12533630708679626070, 1050782610598692376, 15106182140356370925],
        y: [4406588990494457527, 1179943512604409010, 12897008049547483838, 15916093883130498859],
    };
    let p2 = SyscallPoint256 {
        x: [526129632915764734, 4193097083622492095, 17345891961704753301, 13639084202527539203],
        y: [10335885808707267631, 5021854138734678090, 1870117863348771666, 16432236973921557328],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [11459960272341613540, 4570645184784049088, 10290394782411523257, 15419797064149387103],
        y: [4756262028799395892, 8422442864743846233, 14346041412146316901, 18024913315098613068],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1504-1519

    let mut p1 = SyscallPoint256 {
        x: [11704247467154017715, 16928375053460979684, 16248929689800431599, 625176061593386586],
        y: [12951656251310083029, 7596422232983718239, 12412100421124729109, 10653487502977028577],
    };
    let p2 = SyscallPoint256 {
        x: [738465480877858155, 11462564245186587227, 7012991035957635791, 17412248284409388732],
        y: [1449197630571742034, 16694593850448163677, 7420247905674697565, 13299252943059770478],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [4596251734472751088, 286768249799140080, 2851926717677452235, 1527052723731674019],
        y: [15322661069439781061, 16831312018630237353, 651254680877788160, 5827566810717316666],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1520-1535

    let mut p1 = SyscallPoint256 {
        x: [13830796439649295695, 13168141384135706746, 15877493318035113191, 2917035821973581383],
        y: [16777434735186524089, 7940653238492780221, 2888233868692104536, 11763508573692200278],
    };
    let p2 = SyscallPoint256 {
        x: [9232071231250166, 5332066594287603924, 9591017708413623889, 17607525220147993290],
        y: [13426776266536396565, 2568597303833052286, 1306083276092204205, 17646436759062347386],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8207375889852079899, 16671397871232099551, 335149688827652763, 13835758337084687452],
        y: [4838242155593629807, 10719876194368068090, 14525053090167394994, 16560403656297722213],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1536-1551

    let mut p1 = SyscallPoint256 {
        x: [18084372630108093706, 83856499239221439, 11291413551343369073, 15775752088654069938],
        y: [5570003756981117922, 10692926286447866467, 4543952339757911399, 16294648729225631790],
    };
    let p2 = SyscallPoint256 {
        x: [15157979277015307058, 14487303997565492498, 13361757705577403899, 7492365007077507060],
        y: [8209738316193935863, 645347597320182635, 10363072740306682909, 2228427095580045040],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13154274451225509489, 9017069563272252132, 13233629404327156977, 10986453057393316621],
        y: [12866445374792796879, 4082643443532687853, 2623781698324579505, 14101558738432451959],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1552-1567

    let mut p1 = SyscallPoint256 {
        x: [11358669609131331921, 11398154949472324887, 3426342212703832515, 6131491421429340447],
        y: [12777980571938150327, 1442869335978219968, 10115828766362773440, 4895458362881760880],
    };
    let p2 = SyscallPoint256 {
        x: [172734006185644380, 18345878284438025063, 7509956147656455398, 7388388233807613020],
        y: [17203619619913026251, 7604359131316126840, 4137153566839094008, 12427949931843845656],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [14392563956429079380, 17129676657776693572, 1465582634140502869, 7144945882453148230],
        y: [4290491950516981102, 5547803309710919178, 9880008767031007453, 8390369534827127763],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1568-1583

    let mut p1 = SyscallPoint256 {
        x: [14295364592466227562, 8295035100705945707, 8419757923668670479, 17097679091468526503],
        y: [5285330589720232287, 11726613188724577797, 15582313581808804664, 4122438920184090713],
    };
    let p2 = SyscallPoint256 {
        x: [13404918847295750117, 14792211585190214431, 13748255521542792286, 2387705888261786095],
        y: [18206544907935488135, 14385402414663401105, 17167893876951744648, 18123207370130180026],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [6578383232582912501, 10609456342840221902, 4981892729546218645, 7272872276161536266],
        y: [17293351236942754189, 6295889154831299445, 12514037580378192563, 17499575102884974089],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1584-1599

    let mut p1 = SyscallPoint256 {
        x: [10186253948649311757, 15428764009617240589, 7369927260816439751, 14257953515173458825],
        y: [14626904692008639244, 10974045927458059906, 5844651872864593848, 8699954716221064239],
    };
    let p2 = SyscallPoint256 {
        x: [15078876144107492980, 9657750874580218452, 5190932307970169508, 15156783812350913349],
        y: [2529267934556971608, 17795234724992285105, 784743555411755306, 5316607020201897208],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [9725169771915859195, 7410726723358174046, 1673609843308385745, 9248330947807440566],
        y: [6690603374115331417, 15063783922023025600, 18109260347960066588, 16158880012766289968],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1600-1615

    let mut p1 = SyscallPoint256 {
        x: [15446945961823011172, 1037632326465501128, 14122679140745820756, 3198383289208378469],
        y: [161956821771724670, 17702482160115910644, 15967027617778292340, 13425940029531798998],
    };
    let p2 = SyscallPoint256 {
        x: [1747612298327249537, 12457627640477295116, 2060489009661406962, 2855755392760273037],
        y: [5058817531431413528, 7999696354347654945, 12498462641921523776, 5993389543962250858],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [3119509990613955580, 7186956733322905542, 6621521669132423583, 5059401996853510394],
        y: [610597978454370894, 10753533180692545188, 17367703471347111570, 15338298703285048158],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1616-1631

    let mut p1 = SyscallPoint256 {
        x: [17704375155803050963, 7769389302664420936, 7861438716868664037, 6027184912525808068],
        y: [4005511149959302063, 15459411201666557864, 399195834372960263, 8514225978246467411],
    };
    let p2 = SyscallPoint256 {
        x: [14198676452062955228, 15692059451585301775, 5022954254467535045, 6988085596751397051],
        y: [6307150129419802075, 15414811728494195172, 8656652333792250333, 9718769649329559849],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [18166667352536537658, 6073725101961099114, 6477406173375221801, 15848116624387606164],
        y: [858393469366630308, 159640004552305028, 12695572532024755323, 13945337350535948735],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1632-1647

    let mut p1 = SyscallPoint256 {
        x: [4334157085085508599, 8393921393815172193, 10467420055409715245, 13105106972597755709],
        y: [2701032133743369350, 15106925577106662843, 11414675966142348048, 6930811188305305182],
    };
    let p2 = SyscallPoint256 {
        x: [13749349340884491507, 11538838091432609071, 17018497644517723334, 6042336421569969271],
        y: [1394788062442727604, 7656812305762483617, 16419080784334276061, 15441417256189988457],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [15675383361485422169, 10824961886115179349, 6999075806915780900, 2582788312353061626],
        y: [14069747371242995886, 16187222342998041931, 263942388557027471, 6004601986371761308],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1648-1663

    let mut p1 = SyscallPoint256 {
        x: [18245024722799638812, 3947654612069211286, 15725574233818957925, 217833911210794284],
        y: [2597224829851706359, 14487749097870282692, 13987931984359302344, 13349970877535591611],
    };
    let p2 = SyscallPoint256 {
        x: [16055594645739728885, 4927816707869649943, 2260695665959560532, 16873893313395417526],
        y: [745492295643059689, 9268051398337791891, 9098861771965590435, 8425365679459992189],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [3472136516926100828, 14074291849793275272, 7878117838042961381, 18441743295289305490],
        y: [16909183114108130260, 13421918887402991432, 1520946824377736472, 11986543066353886531],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1664-1679

    let mut p1 = SyscallPoint256 {
        x: [10700947240893614858, 1896014452174412552, 4336441234541732430, 2016038320558782803],
        y: [15841617008448231566, 17956911430195444752, 5533888732732939830, 14000153488374964226],
    };
    let p2 = SyscallPoint256 {
        x: [66880762529835181, 9297043650880606435, 3892515346838822553, 15618123660952896409],
        y: [14303239549997346027, 7031274629981559119, 1026131423715977844, 12353856416805838147],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13960596174198859421, 4923974624869853897, 10641766631417712046, 7797018730405862268],
        y: [4023259732775826005, 6105282237183558869, 17397101946582878109, 9269744359459884437],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1680-1695

    let mut p1 = SyscallPoint256 {
        x: [9262210559040683794, 15044826366404218771, 15143581402860481985, 5531872827459019687],
        y: [14116819410387713526, 704480656250211278, 9321913902060721527, 13553836801270640913],
    };
    let p2 = SyscallPoint256 {
        x: [18041930307472216468, 17796986328938746147, 248864346589740437, 10957372907759232416],
        y: [15049339428348961160, 11909066023435748640, 16639415973321890242, 113081276835911465],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5426905318366175579, 16394242098052709791, 4202512995296976903, 8163993894919200946],
        y: [8194847618002511505, 12382307393096753249, 16905030204356167290, 6385172993929962897],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1696-1711

    let mut p1 = SyscallPoint256 {
        x: [7940733726544180957, 7477252629656815679, 16417162848684828719, 11220314474437012946],
        y: [6214188524993899052, 4298035430530732381, 15906483610650187788, 13838733363989705478],
    };
    let p2 = SyscallPoint256 {
        x: [9904536339056974544, 7507834439547142690, 411846270105274152, 15634518211274732806],
        y: [4134470415478009628, 7260860576714802557, 6267295057369738071, 1533083077560168767],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1398373363283106019, 6365364717290158399, 10510870301212647630, 12255593911068808115],
        y: [2594140914977650306, 16071395729497082450, 8611896156321890438, 11703465782232415571],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1712-1727

    let mut p1 = SyscallPoint256 {
        x: [899371563682688910, 14395345655504680798, 7628821100802664507, 1504126336940567420],
        y: [12015765427276401942, 13956306572196171069, 12259893150707883515, 17667288459362007227],
    };
    let p2 = SyscallPoint256 {
        x: [16376844956560962013, 11910887687593714949, 6715954409181328636, 16895096699572435054],
        y: [1750414620854854127, 4328296632360338623, 8709334520183157951, 3391194595215527469],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [18029921954006111468, 11514284892975081612, 11065340672977560478, 17569260056230660468],
        y: [11485354130653413811, 8842763182977004640, 15082092223319690479, 14981342859438079654],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1728-1743

    let mut p1 = SyscallPoint256 {
        x: [4051492700758581133, 12807527724116497175, 944816283672108644, 12102702184440606186],
        y: [1798668502809542833, 15125725761507664041, 9891886330069659275, 10837734620124645069],
    };
    let p2 = SyscallPoint256 {
        x: [14532633836259906828, 14438618906036956830, 4768629666958264080, 7653456162045909400],
        y: [17720026638341189604, 12470339723877660788, 15629859734709002096, 8899427019594446431],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [12951748085213526499, 4384890827556104692, 2752597273950707474, 8052242269830678311],
        y: [13590927707725187771, 2317769628529112007, 2991818281403545589, 7592682359548974255],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1744-1759

    let mut p1 = SyscallPoint256 {
        x: [7277077301597012766, 2315637764847862105, 647467558348120380, 14922900938160521318],
        y: [16006807532032955040, 4614090980493660642, 5842190259969010347, 15470131911765165903],
    };
    let p2 = SyscallPoint256 {
        x: [14423615781398345712, 5216876975399006092, 6370768746941311700, 2311843770524719376],
        y: [9097007164765973694, 7035311131016937507, 1139953603485018991, 636465909627601872],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [9926262217374273061, 9470285278946146150, 15632312602063038636, 17626941692135836136],
        y: [5398811625792210755, 16598652058752014857, 2975928650437966504, 12330629863411474169],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1760-1775

    let mut p1 = SyscallPoint256 {
        x: [12503329780134582789, 9544658553044851721, 16127694835098340389, 16361541783401178454],
        y: [8834451528495024893, 4110970113114396238, 13458447100700187831, 4687500059710824515],
    };
    let p2 = SyscallPoint256 {
        x: [4494685405939546854, 10969826821352213812, 14869070851508427112, 10153438195249697217],
        y: [451431654435541996, 3953652126729711234, 322311875790003690, 16554198162161914108],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [467206267904698158, 10383381238542759140, 1078748434842863198, 1544232842463087343],
        y: [12281859906500576270, 7242190608741332299, 15830848364789214344, 4781705391729247486],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1776-1791

    let mut p1 = SyscallPoint256 {
        x: [2678877784442981051, 11172203737536667691, 1475187629789784644, 352091012869574578],
        y: [7211594638711389435, 1610569452536830759, 5558783029622620052, 8306929863631908949],
    };
    let p2 = SyscallPoint256 {
        x: [11037504019583231355, 14324511530624857123, 16248269928228373426, 10063730002025248696],
        y: [16866819253082805519, 15508807527356913984, 11632797696920145832, 16469581700618764909],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5627604191120977519, 10363628860295633030, 17662557828081185748, 6930072577656876951],
        y: [6360902836169660115, 5758462187276106385, 636287425569539000, 9015328276655102328],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1792-1807

    let mut p1 = SyscallPoint256 {
        x: [17320254273302993475, 16417939116304807511, 14527227514356785259, 2255473278338370118],
        y: [5860067363265202067, 17860143972853734555, 4172281293100935289, 13485064677729710900],
    };
    let p2 = SyscallPoint256 {
        x: [8515304898314248516, 17286889022420145246, 11589192659477607676, 13835303670025405658],
        y: [10462623906925151544, 4524091408737919143, 2942610877985619960, 11881440731247508422],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [890955491652986767, 15949495431266522435, 2979710152477330936, 12285460927956648577],
        y: [7284511080254631735, 12524355256582167669, 1083634419464879045, 9356522350036314317],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1808-1823

    let mut p1 = SyscallPoint256 {
        x: [6630425006525921428, 15106825966674387530, 2142015793892225569, 11140291425534559645],
        y: [9680748755547497676, 3594610944349023601, 7459461580695535680, 15104628678885371098],
    };
    let p2 = SyscallPoint256 {
        x: [2909845767004008226, 16223343680062908977, 13133839593680036773, 12295570183602199131],
        y: [6559475556477868149, 14997812773694443448, 17629328783602062884, 1921787686926523573],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [11655774247380204607, 9102372564690904943, 1490638633034870294, 17640974113311760198],
        y: [6804129271307648985, 3199355802847318396, 4580019688966186035, 15938640919365933386],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1824-1839

    let mut p1 = SyscallPoint256 {
        x: [8710441440880553615, 14199650064120246318, 523198333009306160, 6505175342658148270],
        y: [1769676769127563193, 15697110238917472206, 2362198659974751890, 1921451076789905956],
    };
    let p2 = SyscallPoint256 {
        x: [5748280608985534694, 8334476662207364447, 11133533497622603601, 8586177399601931169],
        y: [5536456391633147449, 2908708379763209957, 8109463066050248007, 3921795582367178528],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5558740897468973275, 10950042157375894298, 7684960872553173317, 4779779746660887352],
        y: [15096342835714366068, 7375587690323816243, 4139155718114035557, 2951691113381650565],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1840-1855

    let mut p1 = SyscallPoint256 {
        x: [14386570827789690305, 208161254888185241, 6467097955716452926, 18380640088408641300],
        y: [12678042472074872507, 2154781636193630970, 5096237040966881253, 6514545405994215251],
    };
    let p2 = SyscallPoint256 {
        x: [15654161756545620926, 2246505015532011370, 6696598953681650195, 10588732928403404431],
        y: [12417396695320133853, 15495365032109936539, 339297375239037726, 8747115164631104790],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [11531348850993311083, 8409322867207492525, 10046215897530941097, 2141802465191622964],
        y: [18327715435934642809, 2272176844780033305, 12205926251645989053, 2206389100749664907],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1856-1871

    let mut p1 = SyscallPoint256 {
        x: [3756185321554564294, 5734347768063248785, 7553801792583256709, 16759914684383138714],
        y: [16770815552027828527, 186107579603486814, 18183384567213255688, 15312930304152529101],
    };
    let p2 = SyscallPoint256 {
        x: [11026716137577245865, 14800512373093354668, 13308801513690111272, 6892225825386225988],
        y: [13024864940673737292, 16069364352069774358, 11307773297885446108, 17145782441835301064],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13626511852010167221, 979519487482687349, 15465105674363716758, 3821095064292930441],
        y: [17204520127870350308, 3375131935839505910, 5869768743812842519, 7226618660020328847],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1872-1887

    let mut p1 = SyscallPoint256 {
        x: [527499376147072263, 17676103965348861583, 5907362270534002249, 12049015237906513559],
        y: [16140587355042563108, 10074232576539821348, 14767911535144396327, 18223888330235949360],
    };
    let p2 = SyscallPoint256 {
        x: [8301839985079880155, 1441260182830967576, 16022679204732693048, 9508535597923327517],
        y: [14742785357599685664, 12930438681965357778, 1182053559075694299, 4385485096249872485],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [15117590922791618679, 318341026648517087, 15984476133006552349, 14690332421896901923],
        y: [5119933787083684930, 7733575485218629894, 17610375327009408223, 7066427722274322924],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1888-1903

    let mut p1 = SyscallPoint256 {
        x: [17088211177021613097, 6318042366386714118, 3396165225756530036, 6235101863628056131],
        y: [7539049488767582683, 2448547805138212212, 39374520850049267, 17060667162951445132],
    };
    let p2 = SyscallPoint256 {
        x: [6678624340277907009, 6046239228585740719, 63049524028559654, 15122348034281498852],
        y: [14660252265976338713, 6077307882072926886, 8246426281350972760, 18082624418073788241],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [11166421249017070079, 5830973654603155177, 24259148863642902, 8961028597819865651],
        y: [6479717008040613406, 9778244308990855433, 13835786115673515746, 14959392156209892669],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1904-1919

    let mut p1 = SyscallPoint256 {
        x: [3085187384140114181, 7454924452664831566, 16894742253732258373, 10032842439052424210],
        y: [10856314894161744121, 12273997136155431766, 17680511399188366257, 7209913759165172639],
    };
    let p2 = SyscallPoint256 {
        x: [16617774402884858371, 12873046628389430226, 247785980218486773, 17954848998428385063],
        y: [15193431376434154247, 4587642475704181202, 3725407988285592810, 8162907194722215382],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [3468454182491932685, 4306900035697235778, 3595725758389048470, 4843798861231282032],
        y: [15592031801520395211, 1955788895869972812, 2101890168352592378, 14592810035334848771],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1920-1935

    let mut p1 = SyscallPoint256 {
        x: [14127929953885505082, 4526612616670251442, 16091975801973667391, 5944906342603044862],
        y: [6733193123821789904, 11320301587567082989, 172303176602785061, 14666847509101800527],
    };
    let p2 = SyscallPoint256 {
        x: [3531303438246277598, 18207567472398546663, 10373219238758008878, 602940116560281946],
        y: [16089530789935199383, 12973254905049095009, 12365181603433519940, 3963207314588996674],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [9575717331064787583, 7066904937728045063, 18274868165204662165, 3451931010084068661],
        y: [18099702896811953871, 14882133646586102577, 6397722196098276073, 13914311608865353727],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1936-1951

    let mut p1 = SyscallPoint256 {
        x: [7126110748357261637, 18198867593206283861, 2842800803604105818, 6648539278343003837],
        y: [2585055628101567420, 3236565964924645398, 6232203173449412494, 8734856782145509088],
    };
    let p2 = SyscallPoint256 {
        x: [1662257978755089403, 17315344369545387940, 1818526735056594094, 17888630802784484317],
        y: [2031031135260609538, 243716074864730490, 7712572802358657138, 12977643451969264310],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [16506963775869199553, 8024694727630899449, 11683479481989285982, 17534326189167004350],
        y: [1165308288033595990, 13536219415791312592, 10830396605016989115, 6716862963338490220],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1952-1967

    let mut p1 = SyscallPoint256 {
        x: [5745052328051585234, 402164940542066274, 12341631663650073199, 17301271620346974522],
        y: [14386702993162318914, 9553841787292129686, 16294295278952129430, 14502533968826082225],
    };
    let p2 = SyscallPoint256 {
        x: [18291294602227567478, 2461354104705731924, 476728657210210988, 11518854400002972475],
        y: [7475541430539316905, 10850861221531066283, 6332332597622140490, 5070105587692988223],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5689150004778425640, 985518343032591765, 11225396293349956349, 9037599320922367599],
        y: [3107680878674778181, 2357570182490798885, 201062668592128486, 1016741947711428169],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1968-1983

    let mut p1 = SyscallPoint256 {
        x: [9641602808455742158, 5917105379806494115, 5270967132001898176, 17533244055771276336],
        y: [16708263485684411797, 17032609466162393322, 7422153334224890000, 5726552004211952832],
    };
    let p2 = SyscallPoint256 {
        x: [18428203920221857920, 1763812356248064537, 2952669248660390000, 6517318488698110474],
        y: [17206906305335727941, 10714066774538672359, 4476195205447577048, 17025478570752343808],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [12273149301964935420, 5750587140839808178, 15703349993052700351, 3555027156980370894],
        y: [18216442125724426172, 12655420136011356315, 14392360171797229525, 7096829761128675603],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 1984-1999

    let mut p1 = SyscallPoint256 {
        x: [11435595905711410362, 11687294162967293207, 10426585805214324435, 17123400237701439482],
        y: [2351293046660614579, 4993024343465516969, 4905873818446118577, 8099197813659757509],
    };
    let p2 = SyscallPoint256 {
        x: [10084534296783558840, 12428004330672286233, 15384644162876431853, 10089848038927597247],
        y: [16723407263281352584, 356441026479173309, 17928438199197873555, 6160850234835685046],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [16759067160982135336, 3742910297419215349, 18259170374142691520, 17310947705409978084],
        y: [16440943330365332501, 17219031360057561947, 5242036676730790021, 3130298032223423067],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 2000-2015

    let mut p1 = SyscallPoint256 {
        x: [16532603047751984946, 4975427722775097496, 675157917472847380, 4048284900673152440],
        y: [7983289638268995996, 792714416877243539, 1122770641511588538, 14508123767094529495],
    };
    let p2 = SyscallPoint256 {
        x: [9885160737928096573, 13651979461475662362, 13545472033791613676, 12121129292061745296],
        y: [17480628804394650949, 12480002276883226294, 8600037832747538689, 13817071038928760897],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [2281640824394583386, 6627672956467574163, 911405293934817613, 15409260076916249853],
        y: [6477091992448033855, 4402271418128997194, 15530473201580307306, 12645381164357490630],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 2016-2031

    let mut p1 = SyscallPoint256 {
        x: [5975912531759308195, 13126384158851056843, 7470106248814372362, 8937723001159675155],
        y: [1896496585166572574, 8946251907172733614, 18422966312779877910, 8213025722567130584],
    };
    let p2 = SyscallPoint256 {
        x: [10555893801221227306, 11673884447329893947, 4673467450467473885, 2548696841819687263],
        y: [1879673904814386951, 12621569376936632102, 5317421304514693447, 368085291442437014],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [2959615304343537295, 13927824658373646240, 3195297080603587335, 6016994989483086827],
        y: [3849243947863601328, 7531532089080070944, 10138077752946324587, 843758434672381665],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 2032-2047

    let mut p1 = SyscallPoint256 {
        x: [16299745448786230668, 7637447602385639137, 17289733628636668800, 15408373853046358316],
        y: [16677310140006718924, 13739179975185433943, 10959018805545427629, 3801940236049424759],
    };
    let p2 = SyscallPoint256 {
        x: [15595300507844630843, 3188260733662937834, 8833597499362515528, 469374447682349168],
        y: [3947372221807584527, 9774121567044538541, 11354405522922059633, 4790420443936211872],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [17162912413070880396, 16453915762958235409, 13409552353776964265, 7474036217011205771],
        y: [9253542070047294558, 3623250294909262574, 10722559230204398389, 11034729616854834980],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 2048-2063

    let mut p1 = SyscallPoint256 {
        x: [15402405643330587140, 13358239106175166436, 12950619831147518062, 10363295857890756962],
        y: [10625395955768753032, 7746560121232287251, 11725818410243902793, 4999414559221876810],
    };
    let p2 = SyscallPoint256 {
        x: [5407018193273700813, 9137233399114012219, 10762441871499763571, 8126639910411501277],
        y: [7482678520062591037, 4915574141361967937, 13131158945448316246, 18136471293762658810],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [18421579708495477857, 16050152852469717598, 13520973672850589547, 13494358714429896576],
        y: [15627894897089116311, 13132409946963340954, 17008247747411929815, 11702434870233240004],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 2064-2079

    let mut p1 = SyscallPoint256 {
        x: [2146267961067049060, 4992029161491866186, 9157528518585362099, 17925947958516154281],
        y: [9277005901693317264, 15977266905566020457, 13834150560434060560, 895236831743237040],
    };
    let p2 = SyscallPoint256 {
        x: [7451032359139814958, 8979082885738378378, 6371230202772337526, 12735534584527681966],
        y: [1941112828724381768, 4929808450987296607, 11497109882923254728, 4721097155659656344],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [14948104666674370645, 12105549712487737461, 198886448136168728, 4741501544006425193],
        y: [10702660212697844737, 16748937507533130900, 8176494057079896155, 1420701612610069287],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 2080-2095

    let mut p1 = SyscallPoint256 {
        x: [8061209406055188945, 13326084157751815753, 640486828246837642, 16601274195421617467],
        y: [15148917877302707620, 8398615253531084438, 17842401436510893729, 11789846043113282163],
    };
    let p2 = SyscallPoint256 {
        x: [14202512854481044117, 13653171396489038471, 310022870142119851, 6474423329182027114],
        y: [10384476525044635457, 16050318319890400444, 3740753352704736402, 14755107920056807357],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1752362828616895862, 9955374995285928096, 3157047863823253855, 10325899498001570944],
        y: [18114534850519066007, 6272991413921286467, 15524415934654214362, 3049579096111136116],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 2096-2111

    let mut p1 = SyscallPoint256 {
        x: [2273689570289499520, 2720357987697220934, 3179702391999962225, 5209774822500089259],
        y: [16004979910056320007, 6466794629546049138, 16720656416734380345, 8103354755635015870],
    };
    let p2 = SyscallPoint256 {
        x: [12993171305457145475, 7322567129377684715, 12000961332070159431, 10472367835910501186],
        y: [13400168944899726847, 12486636180534373484, 3635755901783569076, 10492871664574790283],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [12527548366837054037, 13376854605143534726, 12496369457739076897, 7253545322630472316],
        y: [10472741145465247464, 16515988986983040435, 14351381814139947607, 17007544147090827412],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 2112-2127

    let mut p1 = SyscallPoint256 {
        x: [4178665682494591672, 14851180026663251956, 15056215712906486453, 1477515506926180103],
        y: [16349816198802706937, 8194826431719720563, 3974545787830880645, 12837252041674853849],
    };
    let p2 = SyscallPoint256 {
        x: [16101782862814887452, 16109068428964106212, 13322036348039514063, 9314312035606715522],
        y: [1209669800729141663, 2979080120635529074, 1100074898592038420, 14252057370383010224],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [10050748054335925799, 15020837542485640723, 3100769515364043250, 10275489762620735634],
        y: [16723033803814179928, 101685597550677344, 3309052749866280375, 5715362446039311090],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_add test rows: 2128-2143

    let mut p1 = SyscallPoint256 {
        x: [16892139108441294589, 2268514658981987564, 16660966552361989397, 8255624973293160409],
        y: [12156787655537736728, 12309038971325631416, 14142088599640780838, 10821218243387965909],
    };
    let p2 = SyscallPoint256 {
        x: [16973845534452172152, 13329017265419983731, 4846551096244594695, 16860145613434125549],
        y: [6998788062897069940, 14598273846219819996, 11018065767077453577, 15562535120954986242],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256r1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8464213199400360201, 16517470414429219854, 12373804499568192784, 15953995638987652322],
        y: [9425804923940431393, 10358190992697745803, 12208774769574787222, 13970165524275089144],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256r1_dbl test rows: 2144-2159

    let mut p1 = SyscallPoint256 {
        x: [10112241563747342498, 8537761116905823299, 17054630236347538186, 4408960543871884203],
        y: [7477349957301027667, 14763966764086907084, 16968778301263939235, 1171280135256561365],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [10557520858812378227, 5014374522531529453, 5566451556803808268, 12591378091203029302],
        y: [1748009546112464020, 10344882576520385608, 5682557164442324972, 649652244997290248],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2160-2175

    let mut p1 = SyscallPoint256 {
        x: [4701115591920219045, 8862787468802241793, 12271310038523234616, 535338825824641305],
        y: [7495713990714623470, 15931347251156282, 6738208636609061512, 7005578777776718404],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1320663742213804343, 10148942084966799715, 13393941198559764884, 8420010012730270981],
        y: [13355241780049818283, 18303577952617180458, 2690552939546810163, 10837892209128393234],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2176-2191

    let mut p1 = SyscallPoint256 {
        x: [12864027171738362976, 17779757971038887206, 1952543736788535229, 14126907479114078812],
        y: [16401588463944522004, 15110348909438792019, 5673551525748667085, 8096858139457600689],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [7745410933194912124, 12494722138246000824, 9972615124113554031, 11629219805433485061],
        y: [6430706401662348746, 9175091894640317532, 7605050877789656450, 8564840216667870065],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2192-2207

    let mut p1 = SyscallPoint256 {
        x: [15136400218995114221, 7593066415677478479, 12741430493579731450, 11370229983761373735],
        y: [1625693353700192366, 2767613316070721450, 14593079129778164302, 17695801262103821509],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [4719386950937591434, 9746256980218694279, 9990384706631521397, 17076673623303118634],
        y: [6493035992828719436, 17066942095511558680, 9222235613540866982, 10583312944584266012],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2208-2223

    let mut p1 = SyscallPoint256 {
        x: [11368860444026375977, 8928706608207220421, 16505539374073546580, 5065161404711535425],
        y: [6091998510100321227, 13420512969688700486, 5626168016723543999, 1724660776921801277],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [9492653819609777971, 2184306687888066568, 8655188460809061866, 9807419698316978853],
        y: [12115531154844229772, 6449035984693813824, 14132019587396850963, 10914796584171578153],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2224-2239

    let mut p1 = SyscallPoint256 {
        x: [10981327265649620504, 17822331024005081174, 16861428864964488865, 14506753642223579950],
        y: [12800007242581145638, 9360424140685082156, 366445709262056812, 7108073393315531346],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [10398086121631465761, 12844074790763436119, 730602222020699198, 7653573617295920230],
        y: [6798543825660121489, 8062660987984440777, 9856472332208319699, 8856173799456286568],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2240-2255

    let mut p1 = SyscallPoint256 {
        x: [4076591637171432830, 13834344500564179660, 703366559786275788, 16562721252918322312],
        y: [9711505007504703351, 12657777070832624423, 17667718160436288499, 14740529573256244090],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [16149463770178183358, 15662470880513983676, 140821639229299968, 15451022314902592266],
        y: [16802129838938694400, 1190661185126996517, 6307275434558250561, 7547264205479874261],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2256-2271

    let mut p1 = SyscallPoint256 {
        x: [14736392800560900207, 797369728965246825, 7022301038537580771, 10390038174075983975],
        y: [11677113435905640033, 17390158425486842128, 2942506649594130535, 4581869016014249624],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [10631325702621145469, 12937805851573050341, 4336423707428895348, 10496603637239547043],
        y: [162244016245334580, 1999312422449780348, 674257011984239423, 14929140153537750560],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2272-2287

    let mut p1 = SyscallPoint256 {
        x: [9783723336853111687, 7135699143522081639, 9472128251088703151, 16920297204267231919],
        y: [17799224642965818599, 13107581178300399283, 15698154430491437055, 10519803925181457620],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [17629642875796826503, 9182596380297836802, 1116864644690722964, 15453238756682438076],
        y: [11839440782646755972, 12333573684708932648, 11212082148556441563, 2439646159802672540],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2288-2303

    let mut p1 = SyscallPoint256 {
        x: [11836678202780604583, 5575762144488545504, 6448265137663904938, 12993891845295635707],
        y: [9751729153106788620, 5349585092210148349, 11756007381665232185, 15082517220802679366],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [13172530585625725717, 4641362719234394596, 2095245402484066181, 11243886629686035252],
        y: [9442423387696684370, 5289801580684545310, 10831867102110587765, 10758595671983547727],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2304-2319

    let mut p1 = SyscallPoint256 {
        x: [14201082638195349215, 3844136239764961989, 6460574245530267246, 16875104054157487241],
        y: [5129774770932478821, 7694394031479901975, 9585019120504859027, 14270452957467492201],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [524651212864213831, 14943999912961029778, 12075363728397479367, 5889627435290004967],
        y: [6563694129793586771, 12765501863251252656, 712507704658522901, 506079225798025446],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2320-2335

    let mut p1 = SyscallPoint256 {
        x: [14484958534890967197, 2340702946904504633, 10683882969568808831, 13215143634265154180],
        y: [636717957557005786, 11166861339022134138, 17435758699599619539, 10792004942010835662],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [7968453253906972288, 16143305115624232510, 7303686319568015671, 3001235359068543282],
        y: [9503843478528185267, 11515711519463454087, 2445005547939970513, 14616565266734607996],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2336-2351

    let mut p1 = SyscallPoint256 {
        x: [2685554010026416509, 1954833278713804042, 10803187672106170001, 3544482847082956643],
        y: [3203823527122462787, 18228155871648100693, 9452196028985123789, 17595996069045545448],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [16601128385727270578, 17724680928347248590, 5866118788452605038, 8127727288096934088],
        y: [8962601921328391138, 5408840311136536367, 1750273403848579951, 2126494815873718913],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2352-2367

    let mut p1 = SyscallPoint256 {
        x: [1885532973859561452, 14343602318335314391, 2258833641124263258, 3263389814516454813],
        y: [17879375318386553395, 14200785125878794545, 13146008208557427113, 11136309569996889559],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5106348561070085431, 1511801338187227071, 3134413344089794630, 17775777743912878615],
        y: [1663362380698975216, 9722936020732447591, 10304166034699227896, 10257711502384274906],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2368-2383

    let mut p1 = SyscallPoint256 {
        x: [1108347877547937148, 8277769504377861205, 15772235591958389996, 15379311306391229776],
        y: [15176429878884492152, 7644136516922934047, 6490738720100537463, 15744104914442749974],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [7895519618417701963, 6609670376433543909, 17392653213612516919, 17053050370508941290],
        y: [1405588081821176883, 21118868347897680, 4089559045273622410, 4097532918081949778],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2384-2399

    let mut p1 = SyscallPoint256 {
        x: [4858757193975506421, 2234075196281629112, 4939300104397286941, 13216980736968491988],
        y: [10923036637259393750, 16814789212273648287, 14895144250920963670, 403961164352597896],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [14700125928029090100, 684633346496046025, 2617791179730209288, 11944358737954001962],
        y: [12452622019878583041, 1484676279379411496, 356568167442650676, 5971971675097584065],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2400-2415

    let mut p1 = SyscallPoint256 {
        x: [367528062137151978, 16130338514969188644, 393586220047042985, 12885277854226785682],
        y: [7426210773790898662, 2007408501296907256, 10699447218766487982, 6249365064832545443],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [2210073745938343473, 13920628028579414722, 9803996793080323846, 12769892520227002525],
        y: [9663288815956935715, 9450153931077033556, 7060977939218735902, 179931456071786495],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2416-2431

    let mut p1 = SyscallPoint256 {
        x: [1728918073868906335, 17825155370461573838, 5902897644274470375, 5518741928428248137],
        y: [8291204184913123163, 16356945505196501605, 7222317540570365275, 14424540551291744613],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [15925881226505847652, 6028541955893387705, 1474330116372510907, 11800006732927297564],
        y: [18397868644994368912, 7056960865777247316, 18412990965602541849, 6148579980079074406],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2432-2447

    let mut p1 = SyscallPoint256 {
        x: [13078916307838857741, 8258159684435483382, 4945984192187219438, 6060324578870472894],
        y: [40909176019846245, 16788987133284136558, 4791199141849168757, 1366279906133943503],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [9304955202912619858, 4038200827586304817, 6398151419865549794, 1217910447075668958],
        y: [15387215853336870564, 15957365774868287815, 11991319626476997504, 52286839315444571],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2448-2463

    let mut p1 = SyscallPoint256 {
        x: [1816942521892634853, 11199913013789918733, 4278315480653163419, 1403058848311973184],
        y: [3523694886244770617, 14006754886051807228, 6433033698781955241, 11432672741446057822],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [13329801830098323499, 13014408449624438847, 7168907015490915877, 3737200986308498100],
        y: [11163877266533519586, 6318076172956385247, 2506582952303666866, 17830579033969340481],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2464-2479

    let mut p1 = SyscallPoint256 {
        x: [554522067878061014, 453721163908551144, 823795727619951425, 10043855553112374579],
        y: [15200261841747345184, 11972523523154518443, 1949192833564147488, 10884270472686217203],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [17145642078859252153, 8493652497967871301, 14394090199874439278, 16824567168742109155],
        y: [6927860431430565245, 15355365811258364262, 17170171575793908778, 7649758637614338017],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2480-2495

    let mut p1 = SyscallPoint256 {
        x: [16636593332292502960, 14130096444518839163, 13240334086751914355, 16384966801936131363],
        y: [9855629895839265793, 15644020229079287794, 12145159972142460578, 199803063046211373],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [18371074000590352571, 6407512326307474744, 52402617799929816, 5528260572755377422],
        y: [14031073836823119803, 10299518658787285110, 12154706472509738522, 859268651905237404],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2496-2511

    let mut p1 = SyscallPoint256 {
        x: [13411705213760310246, 11339471010907703854, 12602506613891423028, 9897130154193453244],
        y: [16982468279154556108, 11902611821060862354, 8029623436135946744, 15851806553797764215],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [8603921379748871350, 13754662791579370073, 3983343563556481322, 12098140284782745880],
        y: [6655329986773171830, 10165716866109100496, 16784352221871720443, 6915727281431964081],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2512-2527

    let mut p1 = SyscallPoint256 {
        x: [2225226062643722885, 13035111305596410056, 3356480839345180284, 10196158157450303556],
        y: [453743879087361500, 2691264514405572138, 3095712626218011557, 13460939574691285269],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [17412118831454384037, 7464699304471858609, 16286922106403969995, 6834059745615630879],
        y: [17279748112765342104, 6490101166752267606, 17665989620497274442, 4710400458751492049],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2528-2543

    let mut p1 = SyscallPoint256 {
        x: [2149261317844265337, 10217891878740687358, 8159095384205654582, 1948458907081757938],
        y: [784908144695133405, 5636938055804056884, 7957744309358472730, 5020829898936470267],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [8850537138008623304, 2534748531500797278, 9507408992369842864, 14293920285423102437],
        y: [10919674302593736021, 9317120874594711108, 767129992702672424, 13710053053050584577],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2544-2559

    let mut p1 = SyscallPoint256 {
        x: [18206045208468298115, 12661620642934844431, 4738440255144697736, 9385201660692402867],
        y: [9283061974466655334, 7755941283279542784, 8443575296342441375, 16985340977935104347],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [17221476768818241938, 14387146631674216526, 1336026155441137560, 4320379364049002921],
        y: [10790351524421563938, 16872630800795526963, 4801688186157330695, 17739171804622813881],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2560-2575

    let mut p1 = SyscallPoint256 {
        x: [10676388309430211668, 9890404238044750473, 2282305706378212897, 2790517784839662646],
        y: [15838381681641706483, 12198340393679217969, 14782770052516085551, 15896016745466366458],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [12985536949023612479, 1039466130787220731, 5020406935176469665, 13120403441380679842],
        y: [1044310394179145206, 8910078876334201419, 3028437807147506618, 2185079923706056199],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2576-2591

    let mut p1 = SyscallPoint256 {
        x: [16102043091025972803, 893818939483498484, 17482306737293934733, 11896609590864585676],
        y: [4652069510125351925, 17884848309154841636, 17918736962998792700, 944312779028544253],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [16240261594624502144, 293729500048320756, 12362900861363578241, 15692372167490055827],
        y: [12135912400842952240, 2055708529075588099, 15597555428252712441, 12089195095512874005],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2592-2607

    let mut p1 = SyscallPoint256 {
        x: [10245010154982734456, 4987887500813280963, 10792702057328827598, 3848476558404065205],
        y: [4524614842006174815, 14088138027929593142, 5046860433222105433, 13535072690839018209],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [3591523085296415315, 7803957709099876549, 11117421883684569500, 530587703778425965],
        y: [7945102227961673970, 12852475339184452272, 5186455484980587594, 12984294699082114669],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2608-2623

    let mut p1 = SyscallPoint256 {
        x: [9347106504702114898, 1490827101545855441, 9883426135812803117, 2812691676319186490],
        y: [18099063061179129131, 3447636672546749969, 3093585173619422025, 15650049966624396864],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [7491187240157675631, 16658103006522330085, 16066893828644585076, 9140076156289795661],
        y: [16681402915276926050, 17649806088992608041, 10305643262459733400, 1535195860528299533],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2624-2639

    let mut p1 = SyscallPoint256 {
        x: [9456517505518285455, 16641959050988136776, 8043313775883076840, 14660023859592893505],
        y: [13291090340394119634, 523499649315924071, 8645037778783033842, 9647587423394757973],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5128964418446613418, 12654060790104880739, 6206865411670770628, 14508040644184199144],
        y: [16048657916069766316, 3949573838031712463, 11209089780486854445, 18230747663704694811],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2640-2655

    let mut p1 = SyscallPoint256 {
        x: [8029832038548597894, 7174852840216173180, 15375779993790885887, 6489549644974630667],
        y: [3951798479411813506, 2833018981068432382, 5973953751159359076, 16471772483071605207],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [15035692717085187168, 14475458889273554220, 9603768113445007652, 1237495100753792280],
        y: [18037528304505728304, 11994883732875810019, 8181211334430516118, 3412441574248800949],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2656-2671

    let mut p1 = SyscallPoint256 {
        x: [6239247023507006128, 9999756676184730519, 28020730513212263, 13865911909866868774],
        y: [18296130700402156920, 2689663350380613473, 9583672247782180700, 11121653061784440120],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [15325326591738800549, 10106686608401637480, 12109488793581504015, 702393530665228444],
        y: [3002628282364810691, 15199766716003618211, 10785442075709084098, 12349505062884111721],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2672-2687

    let mut p1 = SyscallPoint256 {
        x: [10851735576741599667, 13702057671984692244, 1160383238612971027, 16298496889452211690],
        y: [453195188507781998, 2338147003069967302, 11360535797637218167, 6733094601571546750],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [12328084419983467693, 5141685135211417434, 9889218732353166949, 10689710727534162315],
        y: [2013621218308985163, 9398468332892450440, 11973611389256815054, 17077130154410985451],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2688-2703

    let mut p1 = SyscallPoint256 {
        x: [21304094763637256, 3190135141602197291, 15130970894714081498, 16397628846960372593],
        y: [9507016936792612896, 16294556482913602453, 17913949843801622014, 16618451105755495994],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [13158197009729571466, 1980378565982360678, 1558416710708524480, 1657368705845473449],
        y: [5051373758552518438, 17613638553308030006, 10484092114962551047, 7859803285474829728],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2704-2719

    let mut p1 = SyscallPoint256 {
        x: [12709171417169980212, 12222400932395650352, 2372272487453725419, 6129241145494872407],
        y: [11728255939218934809, 844986351716479866, 9898307388238926438, 15508056861865360077],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [14774252508883642672, 2142040163529146000, 5859217745997153512, 2986459816983839335],
        y: [3545091844738487134, 14603817019918700246, 11028810607510330685, 10172311097062050318],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2720-2735

    let mut p1 = SyscallPoint256 {
        x: [14182641471526255627, 14620410529113393802, 3578790546004965918, 17710779656804281101],
        y: [10426602233027982494, 6157783210595381167, 16266676351751046844, 5240426379948993708],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [16156061453218511730, 11434947208916111021, 15731071933869607150, 3345744427157999472],
        y: [6337869417686248133, 7263059629860219633, 5850284294322111394, 13301007448227694572],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2736-2751

    let mut p1 = SyscallPoint256 {
        x: [17260695296746791093, 15950297175254883870, 16408487385631068228, 15444462301155960757],
        y: [4469112759090246258, 10540843927598053171, 1289284370980393770, 10169296054967726854],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [10953196868659929265, 5657408362664115905, 74802439124956502, 8493259629350030095],
        y: [5330398148601490289, 16240921484473606790, 9270968957536274631, 11141344273014704122],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2752-2767

    let mut p1 = SyscallPoint256 {
        x: [2733830212029066922, 15407024339498644981, 8888266433022431994, 6745234023635364119],
        y: [3643209455856716325, 11423989834167264537, 1193256620343100212, 5442319913350486148],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [3153704434063307934, 5712097096778758200, 8138036471128614203, 4410960448758829212],
        y: [20631183977528636, 9788433527619527689, 9951325236360792974, 11132434531449689315],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2768-2783

    let mut p1 = SyscallPoint256 {
        x: [6066350050551881629, 3811561546180921802, 9304997508970044486, 15292957517149906243],
        y: [13229779967069103523, 13737610540831217416, 6849348990297540173, 5930060966336182296],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [12650606719357673779, 8671514277986180286, 7131101537712898645, 868886051517379728],
        y: [10349076177424487835, 9614425159260494011, 10319561063079611697, 13001867820287492949],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2784-2799

    let mut p1 = SyscallPoint256 {
        x: [13419634809249303494, 12670252990114404639, 10013267332590836310, 3633135548717974134],
        y: [14828278678341195954, 12374744651120725731, 14176362927722289103, 12126982373326653712],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1674437818375097916, 9243945017384314852, 10374925924489941687, 6426330818737655046],
        y: [782506167700467845, 6691352821051704352, 429482641770196055, 14174957832387305372],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2800-2815

    let mut p1 = SyscallPoint256 {
        x: [11977050842149722643, 10831774886872210961, 699208105335321575, 11770546279327014438],
        y: [10071285273944828975, 7473302955256794374, 1965545875793954319, 15194265987243633588],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [15892993839230684350, 2962897416547882426, 13196319317084553897, 2115434063527460132],
        y: [15106154762214017408, 14121842998727159663, 12622435688864764620, 14892164640469039444],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2816-2831

    let mut p1 = SyscallPoint256 {
        x: [15555160959579975741, 9962860914090471581, 16935533101492764128, 15125004682785293692],
        y: [9283669134702748257, 16345142543692744470, 9562124716640398124, 18220445125810419324],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [17720235069100493794, 10523730837150664029, 363756209685945505, 11594157515035414566],
        y: [7603670749571571405, 5112453846697387071, 605914974275550027, 18247372616451357399],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2832-2847

    let mut p1 = SyscallPoint256 {
        x: [17407499971195395112, 16828100447296348359, 15120947176833882052, 677572255268659705],
        y: [3615840208089082378, 14159176061613921892, 214866536091146750, 9379710604150017275],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [7870147933818810746, 15490811816994845250, 17157265924399312709, 8042467817854505241],
        y: [17757776177036091745, 9522470156768405852, 16462301374718492033, 9478174480751330795],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2848-2863

    let mut p1 = SyscallPoint256 {
        x: [10314421677860141560, 16316839507580152920, 10637602404550146988, 1656003517161810254],
        y: [15426128039106960022, 12255948158195920146, 1573858715562340709, 11524708619376597620],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [8562242815001742298, 8173815206202568478, 4536978416335946958, 16378996585733876793],
        y: [14319241313148637065, 2406579648180494830, 6313216741095495627, 4560541304007433974],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2864-2879

    let mut p1 = SyscallPoint256 {
        x: [8493803571966921432, 14827109621272944803, 1277462381569717674, 2583281689608348983],
        y: [16326843978919468800, 7488458946038855405, 1392665764762980104, 7035380263724036437],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [7192743201717698723, 2517474356029313960, 14379229691574147782, 15405467147004481691],
        y: [18157421971698894783, 10880322525652570943, 17003513338513494786, 13775080775113279347],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2880-2895

    let mut p1 = SyscallPoint256 {
        x: [616041396740589885, 8835955437425682331, 6118975507013281073, 12315335547762231196],
        y: [7331905129918764344, 3459638141297753197, 17492763784048724878, 652736748182196826],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [18092022317186122769, 4229776594360168703, 6578913433242469534, 8087866157619366688],
        y: [2391561792664742140, 14455789212252334252, 17643016705782348133, 17859198546642723032],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2896-2911

    let mut p1 = SyscallPoint256 {
        x: [9186649349706432652, 16724266592908113219, 206846615357934851, 7428743648084954312],
        y: [13554984494929293502, 5384959914807310629, 16861867609171965393, 7971690491507297120],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1704823793746512532, 16699141241400572541, 4511197568915437697, 9757298123049792833],
        y: [7592086572890360215, 17278279858435307185, 12844900611210011488, 10854824617965818087],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2912-2927

    let mut p1 = SyscallPoint256 {
        x: [17069701165599645745, 14007262047094824041, 14230284331135736177, 12663833244528410284],
        y: [8934725576847418948, 11311331754548031981, 12600146180116712159, 17042423369734209742],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [7764504834110770187, 5008220088767623583, 13159225974127687256, 17897723454022799510],
        y: [2517164194353656288, 2515083448928711146, 2015472568766508294, 17046274134664535905],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256r1_dbl test rows: 2928-2943

    let mut p1 = SyscallPoint256 {
        x: [14589376466333626517, 2958991646043105326, 18026143254603003885, 13357802854741894370],
        y: [12670586254094269143, 17744077126965479691, 406637352836607580, 2297867320012306620],
    };
    syscall_secp256r1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [16423661298614043999, 7723780046353944935, 5703309917023540161, 2894873586423611991],
        y: [14644712083338957576, 1531257909946502656, 6507004370024078625, 4022521928009034802],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    let mut a: [u64; 4] = [0, 0, 0, 0];
    let mut b: [u64; 4] = [0, 0, 0, 0];
    let mut c: [u64; 4] = [0, 0, 0, 0];
    let mut dl: [u64; 4] = [0, 0, 0, 0];
    let mut dh: [u64; 4] = [0, 0, 0, 0];

    let mut params =
        SyscallArith256Params { a: &mut a, b: &mut b, c: &mut c, dh: &mut dh, dl: &mut dl };

    // arith256 test rows: 2944-2959

    params.a = &[3, 0, 0, 0];
    params.b = &[2, 0, 0, 0];
    params.c = &[5, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [11, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 2960-2975

    params.a = &[256, 0, 0, 0];
    params.b = &[256, 0, 0, 0];
    params.c = &[1, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [65537, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 2976-2991

    params.a = &[3000, 0, 0, 0];
    params.b = &[2000, 0, 0, 0];
    params.c = &[5000, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [6005000, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 2992-3007

    params.a = &[3000000, 0, 0, 0];
    params.b = &[2000000, 0, 0, 0];
    params.c = &[5000000, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [6000005000000, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3008-3023

    params.a = &[3000, 0, 0, 0];
    params.b = &[0, 0, 0, 0];
    params.c = &[5000, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [5000, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3024-3039

    params.a = &[0, 0, 0, 9223372036854775808];
    params.b = &[2, 0, 0, 0];
    params.c = &[0, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [1, 0, 0, 0];
    let expected_dl: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3040-3055

    params.a =
        &[18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    params.b =
        &[18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    params.c =
        &[18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    let expected_dl: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3056-3071

    params.a =
        &[18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    params.b = &[1, 0, 0, 0];
    params.c =
        &[18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [1, 0, 0, 0];
    let expected_dl: [u64; 4] =
        [18446744073709551614, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3072-3087

    params.a = &[7713719039128253086, 115615546558, 0, 0];
    params.b = &[10656898944539337297, 2453633705698497226, 159552453, 0];
    params.c = &[1, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] =
        [18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3088-3103

    params.a = &[0, 0, 0, 0];
    params.b =
        &[5641043740449624970, 17935565655897260830, 10919558233487242038, 3259728400919159662];
    params.c =
        &[2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] =
        [2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3104-3119

    params.a =
        &[14543826280514596025, 9925309151025471942, 15693957349391226432, 1303992629676031264];
    params.b = &[0, 0, 0, 0];
    params.c =
        &[8758098300086079933, 8458090185970427871, 5608800379645947347, 3254741872956128470];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] =
        [8758098300086079933, 8458090185970427871, 5608800379645947347, 3254741872956128470];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3120-3135

    params.a =
        &[16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504];
    params.b =
        &[7203210682968997592, 1683754083127282338, 5544086711222400467, 2169034962190395798];
    params.c = &[0, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [4920193930127254026, 12651897792310999332, 15756748985538480733, 358927687627160255];
    let expected_dl: [u64; 4] =
        [8652960039961832592, 12927669010041577485, 186790233820823996, 4193027692932975106];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3136-3151

    params.a =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    params.b =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    params.c =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [2805173416851059596, 12685379358730704390, 6456595594210759196, 659149217016364956];
    let expected_dl: [u64; 4] =
        [18389266602179718250, 1045007305792878195, 10520359139510940287, 15277423945471533726];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3152-3167

    params.a =
        &[9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371];
    params.b =
        &[13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604];
    params.c =
        &[4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [13767190121689476520, 8180501038057058095, 10787668698697595931, 62355106935493271];
    let expected_dl: [u64; 4] =
        [2966147972534030794, 14236193498970964075, 9032432248339320385, 9039414898496554729];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3168-3183

    params.a =
        &[18322129971448504228, 1931565055368554727, 4329275120939973020, 12978697249981708710];
    params.b =
        &[280285223898405502, 11284537880113667004, 1081332520087288237, 13072869521125875881];
    params.c =
        &[10747199766730330840, 7794942346027476440, 9925182310152147232, 2506352177963258844];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [2915064742398828162, 13497111676907046358, 11533134330377006094, 9197764929422936304];
    let expected_dl: [u64; 4] =
        [8567555132443528592, 4413536587579917121, 15525761641803697026, 7375841439625782474];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3184-3199

    params.a =
        &[3601750688034868637, 11098567879892209091, 7853054493001661040, 13127796090247981965];
    params.b = &[6450262964717846419, 6206609616313831266, 9102905784272360915, 34732001983190336];
    params.c =
        &[13756415383517927123, 5969167424200594595, 11472493900790927461, 10161930015752951061];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [1142448829767690416, 12893764248253524065, 16461049376350285663, 24717350553545190];
    let expected_dl: [u64; 4] =
        [786030360820878074, 10547436729874534204, 14317391299827766634, 3869960813368558602];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3200-3215

    params.a =
        &[9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371];
    params.b =
        &[13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604];
    params.c =
        &[4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [13767190121689476520, 8180501038057058095, 10787668698697595931, 62355106935493271];
    let expected_dl: [u64; 4] =
        [2966147972534030794, 14236193498970964075, 9032432248339320385, 9039414898496554729];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3216-3231

    params.a =
        &[18183646675237997858, 5913221654135725266, 17004692625211814591, 3035855206098274375];
    params.b =
        &[3815866324375555432, 14662508343725318569, 12256559516963360580, 3331835286132085115];
    params.c =
        &[10680278636993256106, 4812199420528396217, 9545827554963751537, 1694214479444147175];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [11710853863803600850, 18391770452823106496, 3335851138642602120, 548333595286441921];
    let expected_dl: [u64; 4] =
        [5045461017808906874, 16256148593343272435, 16431119418264968873, 4607304688942990376];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3232-3247

    params.a =
        &[14699522009175466360, 11292225231260079918, 12582817354618069472, 2778240163156501704];
    params.b =
        &[14480032510786034726, 7480003072321104223, 1473877341807557712, 2130521741231527403];
    params.c = &[4417907801686297355, 4846544247752331473, 6679274100623874803, 456596546189276312];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [17941566077044267147, 942742814844597660, 6745108453302082356, 320875111961004726];
    let expected_dl: [u64; 4] =
        [7297425682003354331, 5961782815478584844, 7750380610128238341, 2252978709107933634];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3248-3263

    params.a = &[824538892198020416, 1283184167359828537, 3302650312620060185, 1668607930946766365];
    params.b =
        &[15992270325266652171, 244875674963749358, 16263365658449982185, 1009731516739052561];
    params.c =
        &[15029516448026007800, 17584874768126114656, 15015380991638676598, 1031683227781833221];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [12049004044701019445, 475563049094645182, 2626306304469407688, 91335685594453864];
    let expected_dl: [u64; 4] =
        [7399793004524163768, 12412931489802804564, 5975542197948186163, 12225294084083706661];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3264-3279

    params.a =
        &[10915932687312257019, 14233946165038456235, 1876757076466232141, 2076699543628163449];
    params.b =
        &[16860477699524267357, 16339470532078613786, 18262037762087167615, 2278840021002137163];
    params.c = &[4444768305875197474, 1939922989497411867, 4214143816538787860, 199856975344428270];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [9133399237091422853, 8764338955411059823, 1396169034942836388, 256547497634635773];
    let expected_dl: [u64; 4] =
        [10380609131116583761, 13484704121849969925, 2893271877616049675, 2329960432030967557];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3280-3295

    params.a =
        &[16309166084141857452, 9809239868572571135, 17798590001567589395, 392134240976170952];
    params.b =
        &[5621663831382770427, 17130837217801050487, 15171331323744008816, 2274912516172977562];
    params.c =
        &[6330576003640702598, 10187177508499355552, 2162002880016689336, 1701055434502454977];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [1695030648842173568, 2557875980344829879, 17536610177559952956, 48359270842168222];
    let expected_dl: [u64; 4] =
        [857299831180105002, 17185712846273419885, 12702389114230039187, 11635640292219264917];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3296-3311

    params.a =
        &[14533180969308295304, 15121196567945333062, 4122092302346196175, 22116339228426949];
    params.b =
        &[16483324805901717203, 18393952827148097689, 8231368508345815366, 1607401212644271174];
    params.c =
        &[8463282738341103067, 2967457933044332033, 4676291696582175467, 3288997381478435379];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [13935278472984479548, 21581279228334666, 8415675991825411096, 1927160172709906];
    let expected_dl: [u64; 4] =
        [4011259815493162483, 9569014989288692352, 5432734981949033185, 12346885909656755315];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3312-3327

    params.a =
        &[1552441276585533365, 14380987881094484584, 17148433926179488449, 3103348277562900476];
    params.b =
        &[3607635386551753131, 12073442209700630885, 1210144169000380915, 3445928647902604400];
    params.c =
        &[8577567489996952073, 1415993803136667909, 5856414073842050221, 2600260715055878473];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [3798051534132069030, 9201456459030708830, 6533660738218263030, 579718387773062795];
    let expected_dl: [u64; 4] =
        [12447936204358937840, 16589259119206248492, 11274326848600662637, 6981364893452544481];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3328-3343

    params.a =
        &[14085307310069053384, 1313323579751204585, 2230069526089941229, 1318948901456383028];
    params.b =
        &[15746949163550439651, 11469107117602407345, 4268298800428165798, 1491530148446061347];
    params.c =
        &[2439604640165946174, 8802471795462665784, 16196845910038099790, 2650363650529992213];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [3534637649847741171, 7299526022291431728, 6034446249566918840, 106644947364220876];
    let expected_dl: [u64; 4] =
        [256349604355889558, 3220143636565549075, 13775613494325210539, 9124052010478233060];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3344-3359

    params.a =
        &[7894415325517401629, 6208933359299202927, 5310537751821163315, 3347590468685507572];
    params.b =
        &[18167574372806497787, 3382742257014476574, 14102026903974844419, 3249677631575321162];
    params.c =
        &[6550702927005300678, 5200508652508272258, 14628177090059000521, 818099213527558581];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [8524318219397626410, 17032758725496279318, 13996088335842411883, 589729538301899767];
    let expected_dl: [u64; 4] =
        [18413696389611138869, 5850738641225425712, 13835927216744258706, 4072188601118047154];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3360-3375

    params.a =
        &[13981651947569222700, 3540900621375102018, 13287653658183285971, 1243049703052596388];
    params.b =
        &[4522079574557097203, 15223085964013319536, 4163384081032712963, 1897124140102238721];
    params.c =
        &[8484639459381010211, 7011310773972233473, 16158615368361125457, 1177999319848184147];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [3811536305311278330, 4051355591301262293, 15830684234031590970, 127839340622118441];
    let expected_dl: [u64; 4] =
        [16698190416501298407, 11790156726582432063, 8992685523755047723, 9598396682485581277];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 3376-3391

    params.a =
        &[13970229013151504741, 8476296752562947313, 11810450538887363942, 511990551865481398];
    params.b =
        &[11990850244716481796, 14558188671963395327, 9424388055416098482, 1459171711273467932];
    params.c =
        &[16528603495754341937, 8893271371239080203, 9406449307822347647, 250213327518958686];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [4910774022637574197, 12870152955407492665, 17746475360205808972, 40499403403452059];
    let expected_dl: [u64; 4] =
        [3242244678432810181, 2099669192879440901, 14496343886419199978, 10002311647969911313];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    let mut a: [u64; 4] = [0, 0, 0, 0];
    let mut b: [u64; 4] = [0, 0, 0, 0];
    let mut c: [u64; 4] = [0, 0, 0, 0];
    let mut module: [u64; 4] = [0, 0, 0, 0];
    let mut d: [u64; 4] = [0, 0, 0, 0];

    let mut params = SyscallArith256ModParams {
        a: &mut a,
        b: &mut b,
        c: &mut c,
        module: &mut module,
        d: &mut d,
    };

    // arith256_mod test rows: 3392-3407

    params.a = &[0, 0, 0, 0];
    params.b = &[0, 0, 0, 0];
    params.c = &[0, 0, 0, 0];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3408-3423

    params.a = &[1, 0, 0, 0];
    params.b = &[0, 0, 0, 0];
    params.c = &[0, 0, 0, 0];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3424-3439

    params.a = &[0, 0, 0, 0];
    params.b = &[1, 0, 0, 0];
    params.c = &[0, 0, 0, 0];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3440-3455

    params.a = &[0, 0, 0, 0];
    params.b = &[0, 0, 0, 0];
    params.c = &[1, 0, 0, 0];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3456-3471

    params.a =
        &[9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371];
    params.b =
        &[13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604];
    params.c =
        &[4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3472-3487

    params.a =
        &[18322129971448504228, 1931565055368554727, 4329275120939973020, 12978697249981708710];
    params.b =
        &[280285223898405502, 11284537880113667004, 1081332520087288237, 13072869521125875881];
    params.c =
        &[10747199766730330840, 7794942346027476440, 9925182310152147232, 2506352177963258844];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3488-3503

    params.a =
        &[3601750688034868637, 11098567879892209091, 7853054493001661040, 13127796090247981965];
    params.b = &[6450262964717846419, 6206609616313831266, 9102905784272360915, 34732001983190336];
    params.c =
        &[13756415383517927123, 5969167424200594595, 11472493900790927461, 10161930015752951061];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3504-3519

    params.a =
        &[9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371];
    params.b =
        &[13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604];
    params.c =
        &[4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478];
    params.module =
        &[16619467820888189833, 10877150673258265262, 10728815452881265760, 216848425711951146];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [6969085588596054193, 17294800763519702586, 2297270722269116445, 64363319618284025];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3520-3535

    params.a =
        &[18183646675237997858, 5913221654135725266, 17004692625211814591, 3035855206098274375];
    params.b =
        &[3815866324375555432, 14662508343725318569, 12256559516963360580, 3331835286132085115];
    params.c =
        &[10680278636993256106, 4812199420528396217, 9545827554963751537, 1694214479444147175];
    params.module =
        &[14290265255325312041, 3221449844989985051, 14117926452509689807, 1705773849242759208];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [14724416497411134620, 15447058202389846889, 17464262260375210745, 1102516654797031963];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3536-3551

    params.a =
        &[14699522009175466360, 11292225231260079918, 12582817354618069472, 2778240163156501704];
    params.b =
        &[14480032510786034726, 7480003072321104223, 1473877341807557712, 2130521741231527403];
    params.c = &[4417907801686297355, 4846544247752331473, 6679274100623874803, 456596546189276312];
    params.module =
        &[17554725009932780152, 4603450452032535347, 15021622684256251808, 2789050017287097416];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [5139371364774813843, 4123843497394979153, 5587963375085951119, 1601387994715989365];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3552-3567

    params.a = &[824538892198020416, 1283184167359828537, 3302650312620060185, 1668607930946766365];
    params.b =
        &[15992270325266652171, 244875674963749358, 16263365658449982185, 1009731516739052561];
    params.c =
        &[15029516448026007800, 17584874768126114656, 15015380991638676598, 1031683227781833221];
    params.module =
        &[16986943764165354890, 14412505814284476410, 16592960690212983967, 972386731777229000];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [2328234509455951846, 3625611611412616383, 12246451855854867035, 339551502582366576];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3568-3583

    params.a =
        &[10915932687312257019, 14233946165038456235, 1876757076466232141, 2076699543628163449];
    params.b =
        &[16860477699524267357, 16339470532078613786, 18262037762087167615, 2278840021002137163];
    params.c = &[4444768305875197474, 1939922989497411867, 4214143816538787860, 199856975344428270];
    params.module =
        &[15690993799012359266, 13925548266012435130, 3272366628288741674, 3483440725996556673];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [17044858325470885851, 17884162890535599815, 11834017901293318921, 3036567093482370445];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3584-3599

    params.a =
        &[16309166084141857452, 9809239868572571135, 17798590001567589395, 392134240976170952];
    params.b =
        &[5621663831382770427, 17130837217801050487, 15171331323744008816, 2274912516172977562];
    params.c =
        &[6330576003640702598, 10187177508499355552, 2162002880016689336, 1701055434502454977];
    params.module =
        &[6042457498590366555, 3929315885146284526, 11720228675087261929, 960276666354821767];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [14410141474911749754, 17019551091793440719, 9841036973109907299, 270889429155754241];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3600-3615

    params.a =
        &[14533180969308295304, 15121196567945333062, 4122092302346196175, 22116339228426949];
    params.b =
        &[16483324805901717203, 18393952827148097689, 8231368508345815366, 1607401212644271174];
    params.c =
        &[8463282738341103067, 2967457933044332033, 4676291696582175467, 3288997381478435379];
    params.module =
        &[14517856955707246743, 6909717146772162154, 4225348332245104118, 251109779456144592];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [4763933176239486312, 5800120547297740758, 18415418338610646318, 66468322114194979];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3616-3631

    params.a =
        &[1552441276585533365, 14380987881094484584, 17148433926179488449, 3103348277562900476];
    params.b =
        &[3607635386551753131, 12073442209700630885, 1210144169000380915, 3445928647902604400];
    params.c =
        &[8577567489996952073, 1415993803136667909, 5856414073842050221, 2600260715055878473];
    params.module =
        &[6213571909784689117, 6086935747297776195, 589455143744304937, 1339041837956071838];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [10687539600612385234, 13529445508220421442, 17401340882628433339, 689568644776373272];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3632-3647

    params.a =
        &[14085307310069053384, 1313323579751204585, 2230069526089941229, 1318948901456383028];
    params.b =
        &[15746949163550439651, 11469107117602407345, 4268298800428165798, 1491530148446061347];
    params.c =
        &[2439604640165946174, 8802471795462665784, 16196845910038099790, 2650363650529992213];
    params.module =
        &[3592895757868207738, 11105631678955540198, 9197205780301054125, 3418225828951993858];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [6745622268140103172, 5912865753703323101, 7312459677893958849, 1903135534741160267];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3648-3663

    params.a =
        &[7894415325517401629, 6208933359299202927, 5310537751821163315, 3347590468685507572];
    params.b =
        &[18167574372806497787, 3382742257014476574, 14102026903974844419, 3249677631575321162];
    params.c =
        &[6550702927005300678, 5200508652508272258, 14628177090059000521, 818099213527558581];
    params.module =
        &[7054306415440348267, 14567819963952156007, 4465768169752394732, 1228538945855076105];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [10966464611923472817, 4021213191024813726, 2457113499103756917, 870595216135483619];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3664-3679

    params.a =
        &[13981651947569222700, 3540900621375102018, 13287653658183285971, 1243049703052596388];
    params.b =
        &[4522079574557097203, 15223085964013319536, 4163384081032712963, 1897124140102238721];
    params.c =
        &[8484639459381010211, 7011310773972233473, 16158615368361125457, 1177999319848184147];
    params.module =
        &[7304236200783344061, 5292418479036885921, 6694470597827982082, 916507037960048990];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [12228301495889953910, 10774745575034942662, 6018576667479930433, 427975101709100386];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3680-3695

    params.a =
        &[13970229013151504741, 8476296752562947313, 11810450538887363942, 511990551865481398];
    params.b =
        &[11990850244716481796, 14558188671963395327, 9424388055416098482, 1459171711273467932];
    params.c =
        &[16528603495754341937, 8893271371239080203, 9406449307822347647, 250213327518958686];
    params.module =
        &[17875918351627132749, 3264646250175604994, 4721293699900829255, 482440734473027493];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [6554798537177776941, 1991947186318904955, 10029122483581743702, 201825843517986662];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3696-3711

    params.a = &[0, 0, 0, 0];
    params.b =
        &[5641043740449624970, 17935565655897260830, 10919558233487242038, 3259728400919159662];
    params.c =
        &[2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554];
    params.module =
        &[2760980708294393707, 372860918073165892, 9122612075875888799, 219633912322601253];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [6684279249143303223, 1124425694883114464, 14162876425333976385, 15844759273387286];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3712-3727

    params.a =
        &[14543826280514596025, 9925309151025471942, 15693957349391226432, 1303992629676031264];
    params.b = &[0, 0, 0, 0];
    params.c =
        &[8758098300086079933, 8458090185970427871, 5608800379645947347, 3254741872956128470];
    params.module =
        &[17860359904402995876, 210711486840455477, 13545863734865992770, 478428012731885078];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [12276403315925414373, 7193821264927695003, 16567338338997748807, 384173796564817997];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3728-3743

    params.a =
        &[16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504];
    params.b =
        &[7203210682968997592, 1683754083127282338, 5544086711222400467, 2169034962190395798];
    params.c = &[0, 0, 0, 0];
    params.module =
        &[8023954341856169226, 7388703250239832174, 14581628861610779812, 1463541573151624535];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [10766147760862618552, 17068920724662870862, 9174344223129520445, 62162162692712926];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 3744-3759

    params.a =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    params.b =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    params.c =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    params.module =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    let mut params = SyscallBn254CurveAddParams { p1: &mut p1, p2: &p2 };
    // bn254_curve_add test rows: 3760-3775

    let mut p1 = SyscallPoint256 {
        x: [136421207046694529, 11580962506345346338, 15045721281068118004, 1910168462334480628],
        y: [2069880773141906408, 3649825404379682499, 10801511224640664032, 2330817072853753920],
    };
    let p2 = SyscallPoint256 {
        x: [2133523020497556758, 14733549296897507656, 15468364035426577274, 2123014373763398227],
        y: [15049836288745330173, 8795076105344891771, 12865189604260467652, 1527750621661879953],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [12541044391030193619, 16411833633080722648, 6219634386058607483, 2807518484600989269],
        y: [4053535436916716034, 817072964997249589, 7358859730546624038, 3254678688946667385],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3776-3791

    let mut p1 = SyscallPoint256 {
        x: [14032305933869867633, 9498427857577218255, 17025053772983406230, 1810025498305355698],
        y: [6638371163938426880, 13793107905154293171, 18197282389652694744, 1147912865408077293],
    };
    let p2 = SyscallPoint256 {
        x: [10067246450197445536, 4015154726906101922, 14737761653438415152, 2412389853439793659],
        y: [3268522452073386547, 13109914509961628332, 10592520965871805456, 2621469115456485841],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [9162497766846339242, 7148892007007653543, 17025628240951950355, 1258712913762089509],
        y: [1639695979112720534, 11112515231299045924, 8766069288333094891, 1562391528700554328],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3792-3807

    let mut p1 = SyscallPoint256 {
        x: [1729097349008212333, 5867408082516145206, 11997434802196686048, 2037571654367798046],
        y: [18025681993342317303, 17861846547834775759, 11751957001397522898, 1536236073118116023],
    };
    let p2 = SyscallPoint256 {
        x: [2126945495814237851, 2741222541289861821, 16661493764304077760, 112157748232547108],
        y: [15534310077994536189, 8322535670575553828, 2124005179395394300, 1322657064725676069],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [17390251598831943460, 5573992617463629526, 16958926037133361761, 2890293950891946619],
        y: [13064623766317807775, 7995185467926072946, 6655640817961539055, 3218528231751514479],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3808-3823

    let mut p1 = SyscallPoint256 {
        x: [7103153090501987613, 16395629468827439604, 15589517216987209300, 2977265366807226392],
        y: [17724926075245342326, 7197175621924126023, 8623421472085409870, 3250542558428371998],
    };
    let p2 = SyscallPoint256 {
        x: [6335118184882910552, 14112740015582311319, 118285272384200625, 1950029000669704765],
        y: [16079599549419502535, 18279077277919913532, 9414712250447933571, 2527911835974468347],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [9146997136928750984, 4653803619774932347, 8707966285890329556, 1733345261267306798],
        y: [155981336317978689, 10843301756093748508, 11596133235167993340, 2253207070539405202],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3824-3839

    let mut p1 = SyscallPoint256 {
        x: [5042551283629501982, 9098827109791554429, 3877335541049799662, 1495314379429267192],
        y: [1237164267775934060, 15440107231156592067, 1440003007629195621, 2331818089787692166],
    };
    let p2 = SyscallPoint256 {
        x: [3593636384556206298, 2204347309174112349, 15478463248482116686, 2751568283451721275],
        y: [14463161128550353319, 9104596725513128612, 5375951496123583879, 3346053994694149423],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1011572927635872872, 335543691249083198, 10190331521592434749, 1014378544010189531],
        y: [3738933338756733376, 3176186415712995344, 8465617633691082377, 1083621176788547981],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3840-3855

    let mut p1 = SyscallPoint256 {
        x: [9116092690944463720, 17501883535858711204, 1982770219207597088, 1413643580259598594],
        y: [15219861118526282271, 10549034698057911894, 2401241823570592914, 1563367210829521638],
    };
    let p2 = SyscallPoint256 {
        x: [10600761993326003836, 10791777326623310323, 12016520397940900012, 1263593984382251969],
        y: [3984540930278729671, 17940209602895127483, 3568616630407348, 306752131529951634],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8675193157521607812, 2654170217823062848, 14840830741347589345, 2748907656049002688],
        y: [1583541833850142796, 2005835802146142825, 2581419127503931828, 2319401025455588474],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3856-3871

    let mut p1 = SyscallPoint256 {
        x: [16458898882940603825, 1090049237948012308, 3514239332132672661, 2912058909291996784],
        y: [10669416399910448355, 9340300227388611652, 9349903450626044019, 1479177365200878182],
    };
    let p2 = SyscallPoint256 {
        x: [5221042818911006861, 7324920964252381577, 1052414550332830282, 3429739222930938216],
        y: [14740823531673045410, 17476912973648885000, 12025634059669269901, 2734819145780168629],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [6576858153451927412, 16215252353898404542, 16625426446301342934, 1721239489123618143],
        y: [9826016768056827621, 215298992312024795, 1374206023063047301, 2334767615075778715],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3872-3887

    let mut p1 = SyscallPoint256 {
        x: [9426429320604972655, 6664135994160145395, 1242463247163314523, 1209609508562861045],
        y: [9353808696079110496, 11628915309956872698, 13413694616250023186, 1485301098164398230],
    };
    let p2 = SyscallPoint256 {
        x: [9447067173224302319, 7091081279095888322, 8383405770867814056, 144968304166016106],
        y: [11981660203311179066, 3118757259639723967, 13888189168070967953, 2743277973433134800],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [14623940981137844047, 8337668033535330077, 4583782627259144748, 1655332839327331225],
        y: [12851283414261229103, 4240879911450987351, 2748540788028768871, 2380605686026649665],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3888-3903

    let mut p1 = SyscallPoint256 {
        x: [12887285387485578998, 16930711087741954386, 2961310383821261513, 521940065233512776],
        y: [7818397435023207885, 8452876838205044297, 6664448290597623841, 830841879672115031],
    };
    let p2 = SyscallPoint256 {
        x: [14456102252930446407, 5363648689824182112, 14092348397230844221, 251908710464502990],
        y: [14673581160375642647, 5760595908617067855, 15138877736343891786, 3011577770074605792],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [14949506964549588896, 16714562270036241365, 13263526777754172188, 38472124009772432],
        y: [14516352048407724334, 12129404545546990368, 6175346048741530276, 2531522152591778174],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3904-3919

    let mut p1 = SyscallPoint256 {
        x: [9986153622399502006, 8695049810162732943, 11113081449277494422, 2850876012622768797],
        y: [18172075822145644311, 3588558502053459953, 14179298248657266912, 1364492022358379171],
    };
    let p2 = SyscallPoint256 {
        x: [17030961368186640897, 3000010308829572317, 13161705877690475162, 2133639159347392985],
        y: [11045727285021901830, 8423041171021035348, 11394350450378430782, 366821010944834953],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [3349497437855587161, 2658474580477314782, 12810846578154505098, 594616661911362889],
        y: [8262355988922475946, 1765936188007418423, 2069455719949205983, 1731449954968223729],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3920-3935

    let mut p1 = SyscallPoint256 {
        x: [16068467053958200571, 14000033459877307772, 15678299828185440346, 2405705603235917503],
        y: [7103811975376036784, 13792340381860555670, 12907959132183089728, 2733833021427000329],
    };
    let p2 = SyscallPoint256 {
        x: [16003329087005584745, 1367016322579775075, 17321817307132895990, 2099194762580763582],
        y: [2858839762055914409, 2727294882380527952, 4873202373367173333, 2302788396252925041],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8777053376839715963, 6730928363875890938, 4823036058475416210, 3045776927643215873],
        y: [2104275866206935630, 9831192761962224937, 114757674106015052, 2778416939358228283],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3936-3951

    let mut p1 = SyscallPoint256 {
        x: [16032276844660526296, 14008732083320528740, 6579768766599417307, 2614423009001920652],
        y: [16246497347026745435, 2795759423010462441, 17605727431321556257, 2768528718744074772],
    };
    let p2 = SyscallPoint256 {
        x: [13066116803950007327, 5497142431904762446, 3435212204578038129, 2437355106532889217],
        y: [8236377490561268780, 13150702675247412498, 18117019769925410273, 2586906691867320409],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [2025901749886931977, 425329922497200863, 15681670252208907753, 2479464780460318495],
        y: [11787946264151954153, 2050708597481230373, 8222445419132203059, 482746845714008840],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3952-3967

    let mut p1 = SyscallPoint256 {
        x: [11052244829818642235, 12668693133952007894, 1296638867959740840, 1652791037107421004],
        y: [12931225715483189984, 16746426474997829702, 12517971416952285579, 2177803429284681263],
    };
    let p2 = SyscallPoint256 {
        x: [10451133715650547144, 13727214479560066733, 13204975961249648620, 3117389249458635646],
        y: [16269171191104760163, 13303452073674701375, 14138015394503456319, 2079030115455412731],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8644571173112732148, 4622478696682485817, 6400934551926538587, 3030732388943818402],
        y: [5677292641217951576, 8955446743047908305, 4774999867768688522, 2938872543099126691],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3968-3983

    let mut p1 = SyscallPoint256 {
        x: [12926337569739115720, 18369244042231480866, 7199674158569028189, 629382597256567315],
        y: [15480380107477629255, 14462198685675367686, 17109741300224796188, 1575874721648541986],
    };
    let p2 = SyscallPoint256 {
        x: [16721509371926746823, 14931271742266400684, 8639674276518665066, 376222935965499664],
        y: [10342749841335782157, 2626710268725771846, 686654063333589881, 2429030890852100800],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [3170976499745427376, 4435677914649643808, 8495645934859004723, 3179111914628294846],
        y: [18210272879216275576, 15956950282605968252, 12566151727072776061, 1344272916529662310],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 3984-3999

    let mut p1 = SyscallPoint256 {
        x: [1937747923122538908, 1973324843328483090, 18142721628580188222, 2340501145950218557],
        y: [4703919470647230067, 10779413178007862371, 11339051302474013312, 1212824066902237910],
    };
    let p2 = SyscallPoint256 {
        x: [13514185463848566744, 16303451592415587669, 11454991405554316314, 2074786116747213803],
        y: [6215561102844887725, 9765353320242779493, 12761554255656424377, 3362982526011321696],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1988899826776024073, 6263940785541754410, 12804075266116178733, 824066112053521922],
        y: [6523803231338234751, 17167368501758989829, 13151069636843539260, 2060995759643982023],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_dbl test rows: 4000-4015

    let mut p1 = SyscallPoint256 {
        x: [2973253715786760732, 8957458960778036024, 6600871244942108885, 3395737379058558924],
        y: [4392230418324009663, 15894107491113890022, 17544861834956655362, 1975449426606873387],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [13579162267802329004, 8400118881432133322, 16501799921375299183, 515806700569267367],
        y: [15577354893667875031, 13686997197935726975, 11913685884420866357, 2755474458789950601],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4016-4031

    let mut p1 = SyscallPoint256 {
        x: [466558952353936437, 15776321311946329581, 16676479768452871650, 3158029796715456879],
        y: [451857229953296464, 2286071045784985245, 10469843473648670917, 3386929897029099288],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1444076991615535864, 4007629647716678853, 9775135502551639941, 1015210763670569166],
        y: [16470200770811193428, 12249622095020734367, 10862233287287514499, 3322816692763020964],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4032-4047

    let mut p1 = SyscallPoint256 {
        x: [18244161654603702032, 5425825200936987837, 175277047442999828, 1507295215590018202],
        y: [7587167199285532959, 11412121055934119212, 13392813158387261776, 1379139579479746398],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [9649625230492309259, 4259087554689622478, 15964892050738273623, 612548851984988383],
        y: [2487507157561047257, 5116768584946657594, 6694142314031220201, 719454577136123513],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4048-4063

    let mut p1 = SyscallPoint256 {
        x: [17669022402617184397, 5209507611413536192, 1843782295254024969, 859115421570468114],
        y: [18118438105331949148, 470806797267869636, 1230242989845094728, 518831476204271015],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [8955520867202922051, 11281858165879155002, 12523215036875299904, 227033172911778833],
        y: [15349691289203267827, 9501443908779048535, 10311507353512715064, 267938451108782764],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4064-4079

    let mut p1 = SyscallPoint256 {
        x: [4270386339521394353, 10466423505332527404, 16355285925382911740, 838895242390116328],
        y: [17937551459873285115, 1677093624780219483, 3266601617215521887, 1121011437693420174],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1184291857964957837, 8714676347049502817, 14452991746956334663, 524261146238079686],
        y: [13236521403913501868, 4809254225257383405, 12775598836962034961, 2229832129487851753],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4080-4095

    let mut p1 = SyscallPoint256 {
        x: [15854427591445058513, 736155668191151480, 3802522833797165547, 25813298347967139],
        y: [11820495643089594471, 11373557967537483628, 4098557169417834674, 2745172105221403841],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [4983271152563837186, 17062070446834085391, 7993947405464830498, 1485147227845742434],
        y: [7453640341241161485, 15807889270692625401, 17997721697433161365, 2725384878812907887],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4096-4111

    let mut p1 = SyscallPoint256 {
        x: [6715422073207144971, 1795856110543142414, 1855942553495072856, 2180424335926088285],
        y: [10965573859985023012, 16215678377382286771, 7422161024457084639, 1972519222392715500],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1590144765506176380, 6760386668714735454, 8102992589454630565, 2313294421151835326],
        y: [5298795089251379707, 1596236029029100616, 8288876494332499402, 3092631540678381981],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4112-4127

    let mut p1 = SyscallPoint256 {
        x: [7182908352790325918, 1647605780884394596, 7940071073993604711, 883922140090564750],
        y: [10309057419581850851, 13306115010458460289, 11762746997805207259, 2286387498270410519],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [9311906531250817911, 15734338046559985216, 15738572957873562994, 3346006387072307191],
        y: [1661071121432847938, 17446773090151260373, 8771799380882114594, 770964512851852260],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4128-4143

    let mut p1 = SyscallPoint256 {
        x: [12925925090896520377, 6654205315158408550, 16408893888490671050, 420583302104738107],
        y: [16242098476677854559, 3083346988979281844, 6565979508886510518, 2400998761885936634],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [2336437301190187243, 6091662243852304358, 9271067100922870770, 2185952553286110966],
        y: [18274516110081036421, 9372052403470777645, 9261903915074581288, 724389382631930958],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4144-4159

    let mut p1 = SyscallPoint256 {
        x: [14799842676309061429, 13908060759642015740, 5222692408506960236, 1763761250409391673],
        y: [5498072717710077042, 13427934482652588180, 16697597582401517061, 3088780726377118894],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [6199683524210436034, 6385092654427225753, 10604236120448466789, 2459237164414346368],
        y: [12987925432983306437, 12931388864098467928, 17807075740898010343, 943707147332083463],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4160-4175

    let mut p1 = SyscallPoint256 {
        x: [6997706357129618733, 13768248249926056388, 12789537670567414583, 3094941386580460184],
        y: [10703403729533138608, 11269133980072723369, 14416708628816728788, 788259195434776358],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [3942047847987215512, 10668505255803466621, 3590684563780241044, 1317324026180301670],
        y: [4854814707145279503, 255634651475395492, 6541731221002096077, 1464902910643925507],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4176-4191

    let mut p1 = SyscallPoint256 {
        x: [12998215823271800957, 17469880633379109536, 3307177212842959880, 2734211140364181454],
        y: [4289686915942664267, 7944968869834224949, 4916967433604202791, 984417339209723088],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [17342241404422097732, 12846276262649581995, 2473176533819870889, 3352349296121084976],
        y: [2443120067100224681, 14678301556802809122, 552622445678280548, 411774718166903777],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4192-4207

    let mut p1 = SyscallPoint256 {
        x: [11168290218284672317, 13055848893554033058, 10518703377429073633, 2684346615852449868],
        y: [7733001340066649010, 926044126095071057, 9231791107232793893, 511811551928461334],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [16693839976173329346, 3828867815863476429, 12592405986810716410, 2075558889222485695],
        y: [14099722790415076967, 3328563156155568143, 7030865973422196624, 95745516966863370],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4208-4223

    let mut p1 = SyscallPoint256 {
        x: [10236753742504416338, 680445124966543322, 3216067664632535286, 2610643584372777288],
        y: [9324457126502011639, 16864621721101349628, 4535953130578646074, 594435440225118415],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [14023501282317679404, 5990376372979554964, 3582158079161249149, 3034359651477805570],
        y: [16105516347158502672, 14620453763320391083, 5174543312561582539, 1108711523244910526],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 4224-4239

    let mut p1 = SyscallPoint256 {
        x: [12493447835972542528, 13188422351013697901, 16114864060047456162, 162574568017230268],
        y: [9272304904258690271, 6760237032834658942, 3603577630588605141, 1176692479148410544],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [15160040376694794067, 12003148044313189826, 18438304264779973344, 77745216204838149],
        y: [5906181427586509466, 13809883834763246589, 8447866917983781356, 1777471803573943266],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let mut params = SyscallBn254ComplexAddParams { f1: &mut f1, f2: &f2 };
    // bn254_complex_add test rows: 4240-4255

    let mut f1 = SyscallComplex256 {
        x: [9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371],
        y: [13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604],
    };
    let f2 = SyscallComplex256 {
        x: [4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478],
        y: [16619467820888189833, 10877150673258265262, 10728815452881265760, 216848425711951146],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [14436228273639006041, 3963118080414487867, 16547414090240622858, 735172603631677849],
        y: [11356663794971335933, 2431378742414251844, 769010105068356826, 2624302918845444751],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4256-4271

    let mut f1 = SyscallComplex256 {
        x: [18183646675237997858, 5913221654135725266, 17004692625211814591, 3035855206098274375],
        y: [3815866324375555432, 14662508343725318569, 12256559516963360580, 3331835286132085115],
    };
    let f2 = SyscallComplex256 {
        x: [10680278636993256106, 4812199420528396217, 9545827554963751537, 1694214479444147175],
        y: [14290265255325312041, 3221449844989985051, 14117926452509689807, 1705773849242759208],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [6084564367242046085, 18255041003895790079, 13269328228900871378, 1243071418739450885],
        y: [13773514708421211210, 6966834044237420599, 13093294018198355638, 1550610868571873658],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4272-4287

    let mut f1 = SyscallComplex256 {
        x: [14699522009175466360, 11292225231260079918, 12582817354618069472, 2778240163156501704],
        y: [14480032510786034726, 7480003072321104223, 1473877341807557712, 2130521741231527403],
    };
    let f2 = SyscallComplex256 {
        x: [4417907801686297355, 4846544247752331473, 6679274100623874803, 456596546189276312],
        y: [17554725009932780152, 4603450452032535347, 15021622684256251808, 2789050017287097416],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [670685737152212099, 16138769479012411392, 815347381532392659, 3234836709345778017],
        y: [9255396575729606999, 1166329379875756550, 3214308074789114771, 1432573491715654154],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4288-4303

    let mut f1 = SyscallComplex256 {
        x: [824538892198020416, 1283184167359828537, 3302650312620060185, 1668607930946766365],
        y: [15992270325266652171, 244875674963749358, 16263365658449982185, 1009731516739052561],
    };
    let f2 = SyscallComplex256 {
        x: [15029516448026007800, 17584874768126114656, 15015380991638676598, 1031683227781833221],
        y: [16986943764165354890, 14412505814284476410, 16592960690212983967, 972386731777229000],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [15854055340224028216, 421314861776391577, 18318031304258736784, 2700291158728599586],
        y: [14532470015722455445, 14657381489248225769, 14409582274953414536, 1982118248516281562],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4304-4319

    let mut f1 = SyscallComplex256 {
        x: [10915932687312257019, 14233946165038456235, 1876757076466232141, 2076699543628163449],
        y: [16860477699524267357, 16339470532078613786, 18262037762087167615, 2278840021002137163],
    };
    let f2 = SyscallComplex256 {
        x: [4444768305875197474, 1939922989497411867, 4214143816538787860, 199856975344428270],
        y: [15690993799012359266, 13925548266012435130, 3272366628288741674, 3483440725996556673],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [15360700993187454493, 16173869154535868102, 6090900893005020001, 2276556518972591719],
        y: [9772110553547418744, 901150579903614280, 8253212439101214541, 2275282480195723171],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4320-4335

    let mut f1 = SyscallComplex256 {
        x: [16309166084141857452, 9809239868572571135, 17798590001567589395, 392134240976170952],
        y: [5621663831382770427, 17130837217801050487, 15171331323744008816, 2274912516172977562],
    };
    let f2 = SyscallComplex256 {
        x: [6330576003640702598, 10187177508499355552, 2162002880016689336, 1701055434502454977],
        y: [6042457498590366555, 3929315885146284526, 11720228675087261929, 960276666354821767],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [4192998014073008434, 1549673303362375072, 1513848807874727116, 2093189675478625930],
        y: [11664121329973136982, 2613409029237783397, 8444815925121719130, 3235189182527799330],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4336-4351

    let mut f1 = SyscallComplex256 {
        x: [14533180969308295304, 15121196567945333062, 4122092302346196175, 22116339228426949],
        y: [16483324805901717203, 18393952827148097689, 8231368508345815366, 1607401212644271174],
    };
    let f2 = SyscallComplex256 {
        x: [8463282738341103067, 2967457933044332033, 4676291696582175467, 3288997381478435379],
        y: [14517856955707246743, 6909717146772162154, 4225348332245104118, 251109779456144592],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [4549719633939846755, 18088654500989665096, 8798383998928371642, 3311113720706862328],
        y: [12554437687899412330, 6856925900210708228, 12456716840590919485, 1858510992100415766],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4352-4367

    let mut f1 = SyscallComplex256 {
        x: [1552441276585533365, 14380987881094484584, 17148433926179488449, 3103348277562900476],
        y: [3607635386551753131, 12073442209700630885, 1210144169000380915, 3445928647902604400],
    };
    let f2 = SyscallComplex256 {
        x: [8577567489996952073, 1415993803136667909, 5856414073842050221, 2600260715055878473],
        y: [6213571909784689117, 6086935747297776195, 589455143744304937, 1339041837956071838],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [5797391895302829175, 4879857539753269472, 9723656048746843921, 2216610725815808284],
        y: [5488590425056785985, 7243253812520524059, 6965151435179542719, 1297972219055705572],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4368-4383

    let mut f1 = SyscallComplex256 {
        x: [14085307310069053384, 1313323579751204585, 2230069526089941229, 1318948901456383028],
        y: [15746949163550439651, 11469107117602407345, 4268298800428165798, 1491530148446061347],
    };
    let f2 = SyscallComplex256 {
        x: [2439604640165946174, 8802471795462665784, 16196845910038099790, 2650363650529992213],
        y: [3592895757868207738, 11105631678955540198, 9197205780301054125, 3418225828951993858],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [12192295078955343295, 17645415304445538964, 5145723484853346269, 482314285183404576],
        y: [15007228050138991126, 11657614652080064522, 184312629454525174, 1422757710595084540],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4384-4399

    let mut f1 = SyscallComplex256 {
        x: [7894415325517401629, 6208933359299202927, 5310537751821163315, 3347590468685507572],
        y: [18167574372806497787, 3382742257014476574, 14102026903974844419, 3249677631575321162],
    };
    let f2 = SyscallComplex256 {
        x: [6550702927005300678, 5200508652508272258, 14628177090059000521, 818099213527558581],
        y: [7054306415440348267, 14567819963952156007, 4465768169752394732, 1228538945855076105],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [10112501381243046044, 492317867329592164, 6657522890605469087, 678691415410095488],
        y: [2442519843257638175, 7033438076488749561, 5286603122452544402, 991218310627426602],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4400-4415

    let mut f1 = SyscallComplex256 {
        x: [13981651947569222700, 3540900621375102018, 13287653658183285971, 1243049703052596388],
        y: [4522079574557097203, 15223085964013319536, 4163384081032712963, 1897124140102238721],
    };
    let f2 = SyscallComplex256 {
        x: [8484639459381010211, 7011310773972233473, 16158615368361125457, 1177999319848184147],
        y: [7304236200783344061, 5292418479036885921, 6694470597827982082, 916507037960048990],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [4019547333240681295, 10552211395347335492, 10999524952834859812, 2421049022900780536],
        y: [11826315775340441264, 2068760369340653841, 10857854678860695046, 2813631178062287711],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4416-4431

    let mut f1 = SyscallComplex256 {
        x: [13970229013151504741, 8476296752562947313, 11810450538887363942, 511990551865481398],
        y: [11990850244716481796, 14558188671963395327, 9424388055416098482, 1459171711273467932],
    };
    let f2 = SyscallComplex256 {
        x: [16528603495754341937, 8893271371239080203, 9406449307822347647, 250213327518958686],
        y: [17875918351627132749, 3264646250175604994, 4721293699900829255, 482440734473027493],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [12052088435196295062, 17369568123802027517, 2770155773000159973, 762203879384440085],
        y: [11420024522634062929, 17822834922139000322, 14145681755316927737, 1941612445746495425],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4432-4447

    let mut f1 = SyscallComplex256 {
        x: [0, 0, 0, 0],
        y: [5641043740449624970, 17935565655897260830, 10919558233487242038, 3259728400919159662],
    };
    let f2 = SyscallComplex256 {
        x: [2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554],
        y: [2760980708294393707, 372860918073165892, 9122612075875888799, 219633912322601253],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554],
        y: [8402024448744018677, 18308426573970426722, 1595426235653579221, 3479362313241760916],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4448-4463

    let mut f1 = SyscallComplex256 {
        x: [14543826280514596025, 9925309151025471942, 15693957349391226432, 1303992629676031264],
        y: [0, 0, 0, 0],
    };
    let f2 = SyscallComplex256 {
        x: [8758098300086079933, 8458090185970427871, 5608800379645947347, 3254741872956128470],
        y: [17860359904402995876, 210711486840455477, 13545863734865992770, 478428012731885078],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [522563635611468079, 7466275192518016793, 8021565777762479030, 1071736235829189069],
        y: [17860359904402995876, 210711486840455477, 13545863734865992770, 478428012731885078],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4464-4479

    let mut f1 = SyscallComplex256 {
        x: [16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504],
        y: [7203210682968997592, 1683754083127282338, 5544086711222400467, 2169034962190395798],
    };
    let f2 = SyscallComplex256 {
        x: [0, 0, 0, 0],
        y: [8023954341856169226, 7388703250239832174, 14581628861610779812, 1463541573151624535],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504],
        y: [10894548153545510555, 16602077262598783107, 6844523621558485529, 145578268539049668],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4480-4495

    let mut f1 = SyscallComplex256 {
        x: [14622897380343555797, 5165855638358375151, 10634209670893898754, 3270712738274947396],
        y: [11805571479997144868, 1873240993939869089, 2536953398218471227, 2201196215210731682],
    };
    let f2 = SyscallComplex256 {
        x: [18333499169494873014, 11639475012973159166, 11629272760731921316, 2867130213923064265],
        y: [0, 0, 0, 0],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [10177035604849220932, 5888206506853651297, 8982290480351125321, 2650844685395040996],
        y: [11805571479997144868, 1873240993939869089, 2536953398218471227, 2201196215210731682],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4496-4511

    let mut f1 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    let f2 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [4332616871279656261, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656261, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4512-4527

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 4528-4543

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [1, 0, 0, 0], y: [0, 0, 0, 0] };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 { x: [1, 0, 0, 0], y: [0, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    let mut params = SyscallBn254ComplexSubParams { f1: &mut f1, f2: &f2 };
    // bn254_complex_sub test rows: 4544-4559

    let mut f1 = SyscallComplex256 {
        x: [9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371],
        y: [13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604],
    };
    let f2 = SyscallComplex256 {
        x: [4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478],
        y: [16619467820888189833, 10877150673258265262, 10728815452881265760, 216848425711951146],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [5202688393769609149, 18389602538262691937, 4123204730318432062, 220399933758796892],
        y: [15011216300614059499, 17570565543316824550, 16204867346724928536, 2190606067421542457],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4560-4575

    let mut f1 = SyscallComplex256 {
        x: [18183646675237997858, 5913221654135725266, 17004692625211814591, 3035855206098274375],
        y: [3815866324375555432, 14662508343725318569, 12256559516963360580, 3331835286132085115],
    };
    let f2 = SyscallComplex256 {
        x: [10680278636993256106, 4812199420528396217, 9545827554963751537, 1694214479444147175],
        y: [14290265255325312041, 3221449844989985051, 14117926452509689807, 1705773849242759208],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [7503368038244741752, 1101022233607329049, 7458865070248063054, 1341640726654127200],
        y: [7972345142759795007, 11441058498735333517, 16585377138163222389, 1626061436889325906],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4576-4591

    let mut f1 = SyscallComplex256 {
        x: [14699522009175466360, 11292225231260079918, 12582817354618069472, 2778240163156501704],
        y: [14480032510786034726, 7480003072321104223, 1473877341807557712, 2130521741231527403],
    };
    let f2 = SyscallComplex256 {
        x: [4417907801686297355, 4846544247752331473, 6679274100623874803, 456596546189276312],
        y: [17554725009932780152, 4603450452032535347, 15021622684256251808, 2789050017287097416],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [10281614207489169005, 6445680983507748445, 5903543253994194669, 2321643616967225392],
        y: [1257924372132910837, 13793676764766451897, 18180190682535552269, 2828469990747400651],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4592-4607

    let mut f1 = SyscallComplex256 {
        x: [824538892198020416, 1283184167359828537, 3302650312620060185, 1668607930946766365],
        y: [15992270325266652171, 244875674963749358, 16263365658449982185, 1009731516739052561],
    };
    let f2 = SyscallComplex256 {
        x: [15029516448026007800, 17584874768126114656, 15015380991638676598, 1031683227781833221],
        y: [16986943764165354890, 14412505814284476410, 16592960690212983967, 972386731777229000],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [4241766517881564232, 2145053472943265496, 6734013394690935202, 636924703164933143],
        y: [17452070634810848897, 4279113934388824563, 18117149041946549833, 37344784961823560],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4608-4623

    let mut f1 = SyscallComplex256 {
        x: [10915932687312257019, 14233946165038456235, 1876757076466232141, 2076699543628163449],
        y: [16860477699524267357, 16339470532078613786, 18262037762087167615, 2278840021002137163],
    };
    let f2 = SyscallComplex256 {
        x: [4444768305875197474, 1939922989497411867, 4214143816538787860, 199856975344428270],
        y: [15690993799012359266, 13925548266012435130, 3272366628288741674, 3483440725996556673],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [6471164381437059545, 12294023175541044368, 16109357333636995897, 1876842568283735178],
        y: [5502100771791564354, 13331046410544061677, 9824119011363569074, 2282397561808551156],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4624-4639

    let mut f1 = SyscallComplex256 {
        x: [16309166084141857452, 9809239868572571135, 17798590001567589395, 392134240976170952],
        y: [5621663831382770427, 17130837217801050487, 15171331323744008816, 2274912516172977562],
    };
    let f2 = SyscallComplex256 {
        x: [6330576003640702598, 10187177508499355552, 2162002880016689336, 1701055434502454977],
        y: [6042457498590366555, 3929315885146284526, 11720228675087261929, 960276666354821767],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [14311206951780811117, 10539186504551098604, 10471034999116043192, 2178077073276686641],
        y: [18025950406501955488, 13201521332654765960, 3451102648656746887, 1314635849818155795],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4640-4655

    let mut f1 = SyscallComplex256 {
        x: [14533180969308295304, 15121196567945333062, 4122092302346196175, 22116339228426949],
        y: [16483324805901717203, 18393952827148097689, 8231368508345815366, 1607401212644271174],
    };
    let f2 = SyscallComplex256 {
        x: [8463282738341103067, 2967457933044332033, 4676291696582175467, 3288997381478435379],
        y: [14517856955707246743, 6909717146772162154, 4225348332245104118, 251109779456144592],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [10402515102246848500, 4624118705669332434, 12726992557038715458, 220117224552962235],
        y: [1965467850194470460, 11484235680375935535, 4006020176100711248, 1356291433188126582],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4656-4671

    let mut f1 = SyscallComplex256 {
        x: [1552441276585533365, 14380987881094484584, 17148433926179488449, 3103348277562900476],
        y: [3607635386551753131, 12073442209700630885, 1210144169000380915, 3445928647902604400],
    };
    let f2 = SyscallComplex256 {
        x: [8577567489996952073, 1415993803136667909, 5856414073842050221, 2600260715055878473],
        y: [6213571909784689117, 6086935747297776195, 589455143744304937, 1339041837956071838],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [11421617860298132908, 12964994077957816674, 11292019852337438228, 503087562507022003],
        y: [15840807550476615630, 5986506462402854689, 620689025256075978, 2106886809946532562],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4672-4687

    let mut f1 = SyscallComplex256 {
        x: [14085307310069053384, 1313323579751204585, 2230069526089941229, 1318948901456383028],
        y: [15746949163550439651, 11469107117602407345, 4268298800428165798, 1491530148446061347],
    };
    let f2 = SyscallComplex256 {
        x: [2439604640165946174, 8802471795462665784, 16196845910038099790, 2650363650529992213],
        y: [3592895757868207738, 11105631678955540198, 9197205780301054125, 3418225828951993858],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [15978319541182763473, 3427975928766421822, 17761159641036087804, 2155583517729361479],
        y: [16486670276961888176, 11280599583124750168, 8352284971401806422, 1560302586297038154],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4688-4703

    let mut f1 = SyscallComplex256 {
        x: [7894415325517401629, 6208933359299202927, 5310537751821163315, 3347590468685507572],
        y: [18167574372806497787, 3382742257014476574, 14102026903974844419, 3249677631575321162],
    };
    let f2 = SyscallComplex256 {
        x: [6550702927005300678, 5200508652508272258, 14628177090059000521, 818099213527558581],
        y: [7054306415440348267, 14567819963952156007, 4465768169752394732, 1228538945855076105],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [1343712398512100951, 1008424706790930669, 9129104735471714410, 2529491255157948990],
        y: [11113267957366149520, 7261666366771872183, 9636258734222449686, 2021138685720245057],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4704-4719

    let mut f1 = SyscallComplex256 {
        x: [13981651947569222700, 3540900621375102018, 13287653658183285971, 1243049703052596388],
        y: [4522079574557097203, 15223085964013319536, 4163384081032712963, 1897124140102238721],
    };
    let f2 = SyscallComplex256 {
        x: [8484639459381010211, 7011310773972233473, 16158615368361125457, 1177999319848184147],
        y: [7304236200783344061, 5292418479036885921, 6694470597827982082, 916507037960048990],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [5497012488188212489, 14976333921112420161, 15575782363531712129, 65050383204412240],
        y: [15664587447483304758, 9930667484976433614, 15915657556914282497, 980617102142189730],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4720-4735

    let mut f1 = SyscallComplex256 {
        x: [13970229013151504741, 8476296752562947313, 11810450538887363942, 511990551865481398],
        y: [11990850244716481796, 14558188671963395327, 9424388055416098482, 1459171711273467932],
    };
    let f2 = SyscallComplex256 {
        x: [16528603495754341937, 8893271371239080203, 9406449307822347647, 250213327518958686],
        y: [17875918351627132749, 3264646250175604994, 4721293699900829255, 482440734473027493],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [15888369591106714420, 18029769455033418725, 2404001231065016294, 261777224346522712],
        y: [12561675966798900663, 11293542421787790332, 4703094355515269227, 976730976800440439],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4736-4751

    let mut f1 = SyscallComplex256 {
        x: [0, 0, 0, 0],
        y: [5641043740449624970, 17935565655897260830, 10919558233487242038, 3259728400919159662],
    };
    let f2 = SyscallComplex256 {
        x: [2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554],
        y: [2760980708294393707, 372860918073165892, 9122612075875888799, 219633912322601253],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [2290178154373936121, 7928393859228939096, 8845487367689929217, 2372983945916577111],
        y: [2880063032155231263, 17562704737824094938, 1796946157611353239, 3040094488596558409],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4752-4767

    let mut f1 = SyscallComplex256 {
        x: [14543826280514596025, 9925309151025471942, 15693957349391226432, 1303992629676031264],
        y: [0, 0, 0, 0],
    };
    let f2 = SyscallComplex256 {
        x: [8758098300086079933, 8458090185970427871, 5608800379645947347, 3254741872956128470],
        y: [17860359904402995876, 210711486840455477, 13545863734865992770, 478428012731885078],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [10118344851708172355, 12384343109532927092, 4919604847310422218, 1536249023522873460],
        y: [4919001040586212003, 10706412657637427543, 18182072290118253595, 3008570254071085586],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4768-4783

    let mut f1 = SyscallComplex256 {
        x: [16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504],
        y: [7203210682968997592, 1683754083127282338, 5544086711222400467, 2169034962190395798],
    };
    let f2 = SyscallComplex256 {
        x: [0, 0, 0, 0],
        y: [8023954341856169226, 7388703250239832174, 14581628861610779812, 1463541573151624535],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504],
        y: [17626000414822379982, 12741794906597001779, 9409201923321172270, 705493389038771262],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4784-4799

    let mut f1 = SyscallComplex256 {
        x: [14622897380343555797, 5165855638358375151, 10634209670893898754, 3270712738274947396],
        y: [11805571479997144868, 1873240993939869089, 2536953398218471227, 2201196215210731682],
    };
    let f2 = SyscallComplex256 {
        x: [18333499169494873014, 11639475012973159166, 11629272760731921316, 2867130213923064265],
        y: [0, 0, 0, 0],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [14736142284558234399, 11973124699094767600, 17451680983871529053, 403582524351883130],
        y: [11805571479997144868, 1873240993939869089, 2536953398218471227, 2201196215210731682],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4800-4815

    let mut f1 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    let f2 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4816-4831

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 4832-4847

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [1, 0, 0, 0], y: [0, 0, 0, 0] };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [0, 0, 0, 0],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    let mut params = SyscallBn254ComplexMulParams { f1: &mut f1, f2: &f2 };
    // bn254_complex_mul test rows: 4848-4863

    let mut f1 = SyscallComplex256 {
        x: [9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371],
        y: [13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604],
    };
    let f2 = SyscallComplex256 {
        x: [4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478],
        y: [16619467820888189833, 10877150673258265262, 10728815452881265760, 216848425711951146],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [12505766644108406325, 3233624380560306535, 13685731888535029860, 2353014048686721875],
        y: [6062278900219095506, 183076157889869867, 16507411407929210602, 896565569621886355],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 4864-4879

    let mut f1 = SyscallComplex256 {
        x: [18183646675237997858, 5913221654135725266, 17004692625211814591, 3035855206098274375],
        y: [3815866324375555432, 14662508343725318569, 12256559516963360580, 3331835286132085115],
    };
    let f2 = SyscallComplex256 {
        x: [10680278636993256106, 4812199420528396217, 9545827554963751537, 1694214479444147175],
        y: [14290265255325312041, 3221449844989985051, 14117926452509689807, 1705773849242759208],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [2969429478073203422, 1303361849039615678, 8055434794620988610, 1006551153287171468],
        y: [17991300239933643445, 8306193239281937177, 17693013511640767963, 3333995345296179294],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 4880-4895

    let mut f1 = SyscallComplex256 {
        x: [14699522009175466360, 11292225231260079918, 12582817354618069472, 2778240163156501704],
        y: [14480032510786034726, 7480003072321104223, 1473877341807557712, 2130521741231527403],
    };
    let f2 = SyscallComplex256 {
        x: [4417907801686297355, 4846544247752331473, 6679274100623874803, 456596546189276312],
        y: [17554725009932780152, 4603450452032535347, 15021622684256251808, 2789050017287097416],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [14790590202054549016, 13416857653267188865, 12259470251650530952, 863367272062870662],
        y: [4038481909524953748, 6286055649404921892, 16122380214421169322, 846411477219728294],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 4896-4911

    let mut f1 = SyscallComplex256 {
        x: [824538892198020416, 1283184167359828537, 3302650312620060185, 1668607930946766365],
        y: [15992270325266652171, 244875674963749358, 16263365658449982185, 1009731516739052561],
    };
    let f2 = SyscallComplex256 {
        x: [15029516448026007800, 17584874768126114656, 15015380991638676598, 1031683227781833221],
        y: [16986943764165354890, 14412505814284476410, 16592960690212983967, 972386731777229000],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [7448640897112043391, 13103912446082364804, 121709064341639793, 1060705880189202848],
        y: [8967142239798892684, 8601504842842315999, 14009225853138029413, 608594233032225906],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 4912-4927

    let mut f1 = SyscallComplex256 {
        x: [10915932687312257019, 14233946165038456235, 1876757076466232141, 2076699543628163449],
        y: [16860477699524267357, 16339470532078613786, 18262037762087167615, 2278840021002137163],
    };
    let f2 = SyscallComplex256 {
        x: [4444768305875197474, 1939922989497411867, 4214143816538787860, 199856975344428270],
        y: [15690993799012359266, 13925548266012435130, 3272366628288741674, 3483440725996556673],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [16320244829529534397, 14688214302078314545, 15850068237202854468, 620689605082212435],
        y: [6672001322012006364, 4019195930041468307, 13997493784790578331, 1736594340453795971],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 4928-4943

    let mut f1 = SyscallComplex256 {
        x: [16309166084141857452, 9809239868572571135, 17798590001567589395, 392134240976170952],
        y: [5621663831382770427, 17130837217801050487, 15171331323744008816, 2274912516172977562],
    };
    let f2 = SyscallComplex256 {
        x: [6330576003640702598, 10187177508499355552, 2162002880016689336, 1701055434502454977],
        y: [6042457498590366555, 3929315885146284526, 11720228675087261929, 960276666354821767],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [13075915760749477109, 6444142042795961397, 17404250655902230946, 178711769253923936],
        y: [6373494970361850189, 2248701559844004852, 13527031422475826030, 603034259248833353],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 4944-4959

    let mut f1 = SyscallComplex256 {
        x: [14533180969308295304, 15121196567945333062, 4122092302346196175, 22116339228426949],
        y: [16483324805901717203, 18393952827148097689, 8231368508345815366, 1607401212644271174],
    };
    let f2 = SyscallComplex256 {
        x: [8463282738341103067, 2967457933044332033, 4676291696582175467, 3288997381478435379],
        y: [14517856955707246743, 6909717146772162154, 4225348332245104118, 251109779456144592],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [7476870214995388280, 18363610646754960425, 10387263917542875254, 1708536486835065897],
        y: [2686575857482980268, 8506695492277838444, 6393305615946706963, 3446062381320742232],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 4960-4975

    let mut f1 = SyscallComplex256 {
        x: [1552441276585533365, 14380987881094484584, 17148433926179488449, 3103348277562900476],
        y: [3607635386551753131, 12073442209700630885, 1210144169000380915, 3445928647902604400],
    };
    let f2 = SyscallComplex256 {
        x: [8577567489996952073, 1415993803136667909, 5856414073842050221, 2600260715055878473],
        y: [6213571909784689117, 6086935747297776195, 589455143744304937, 1339041837956071838],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [4406937830853806410, 15266737569067502856, 510718984966618257, 1354204748260646634],
        y: [2697229002600624426, 586464696522165552, 12200906027722010583, 1319318597158004546],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 4976-4991

    let mut f1 = SyscallComplex256 {
        x: [14085307310069053384, 1313323579751204585, 2230069526089941229, 1318948901456383028],
        y: [15746949163550439651, 11469107117602407345, 4268298800428165798, 1491530148446061347],
    };
    let f2 = SyscallComplex256 {
        x: [2439604640165946174, 8802471795462665784, 16196845910038099790, 2650363650529992213],
        y: [3592895757868207738, 11105631678955540198, 9197205780301054125, 3418225828951993858],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [12137280823533019925, 2303388261471351507, 1578992201812570648, 1731617878688619912],
        y: [11162892558684808868, 9795497321556576870, 8340205860744136523, 599218868266755795],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 4992-5007

    let mut f1 = SyscallComplex256 {
        x: [7894415325517401629, 6208933359299202927, 5310537751821163315, 3347590468685507572],
        y: [18167574372806497787, 3382742257014476574, 14102026903974844419, 3249677631575321162],
    };
    let f2 = SyscallComplex256 {
        x: [6550702927005300678, 5200508652508272258, 14628177090059000521, 818099213527558581],
        y: [7054306415440348267, 14567819963952156007, 4465768169752394732, 1228538945855076105],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [7377659921954974931, 8379801879278412689, 13771842180792100502, 2647475857660445711],
        y: [12032207591593507226, 1979542638100360688, 190974785640599873, 3004829516099640875],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 5008-5023

    let mut f1 = SyscallComplex256 {
        x: [13981651947569222700, 3540900621375102018, 13287653658183285971, 1243049703052596388],
        y: [4522079574557097203, 15223085964013319536, 4163384081032712963, 1897124140102238721],
    };
    let f2 = SyscallComplex256 {
        x: [8484639459381010211, 7011310773972233473, 16158615368361125457, 1177999319848184147],
        y: [7304236200783344061, 5292418479036885921, 6694470597827982082, 916507037960048990],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [7015591303176738602, 13516754081082240467, 8392664460745423754, 1941039109069261455],
        y: [12044794565310785684, 7980930235905132999, 17663324448874543867, 2867750612932145088],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 5024-5039

    let mut f1 = SyscallComplex256 {
        x: [13970229013151504741, 8476296752562947313, 11810450538887363942, 511990551865481398],
        y: [11990850244716481796, 14558188671963395327, 9424388055416098482, 1459171711273467932],
    };
    let f2 = SyscallComplex256 {
        x: [16528603495754341937, 8893271371239080203, 9406449307822347647, 250213327518958686],
        y: [17875918351627132749, 3264646250175604994, 4721293699900829255, 482440734473027493],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [11409688825706647234, 15467297225008027756, 3682612147155000343, 2768508972458560690],
        y: [12763637549396752142, 2715231923641577465, 9889269762530557378, 1968723813486632462],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 5040-5055

    let mut f1 = SyscallComplex256 {
        x: [0, 0, 0, 0],
        y: [5641043740449624970, 17935565655897260830, 10919558233487242038, 3259728400919159662],
    };
    let f2 = SyscallComplex256 {
        x: [2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554],
        y: [2760980708294393707, 372860918073165892, 9122612075875888799, 219633912322601253],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [15593996269331516578, 10804385065142664386, 1426993230195180266, 3170680930233772598],
        y: [8378594565422288107, 6406846856437595083, 2269045162306775797, 692335889589457323],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 5056-5071

    let mut f1 = SyscallComplex256 {
        x: [14543826280514596025, 9925309151025471942, 15693957349391226432, 1303992629676031264],
        y: [0, 0, 0, 0],
    };
    let f2 = SyscallComplex256 {
        x: [8758098300086079933, 8458090185970427871, 5608800379645947347, 3254741872956128470],
        y: [17860359904402995876, 210711486840455477, 13545863734865992770, 478428012731885078],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [5170431588339662195, 5630510666107664544, 6270395399736046155, 372500419545933398],
        y: [12314540981563966046, 7138430603954821962, 3045283854192833531, 3140325592038789294],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 5072-5087

    let mut f1 = SyscallComplex256 {
        x: [16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504],
        y: [7203210682968997592, 1683754083127282338, 5544086711222400467, 2169034962190395798],
    };
    let f2 = SyscallComplex256 {
        x: [0, 0, 0, 0],
        y: [8023954341856169226, 7388703250239832174, 14581628861610779812, 1463541573151624535],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [2254188046736485991, 3734218616134968757, 5827835250833608451, 2587242432251881903],
        y: [16645051945075607717, 7412371406037424382, 3371502814130323112, 3251256282528484019],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 5088-5103

    let mut f1 = SyscallComplex256 {
        x: [14622897380343555797, 5165855638358375151, 10634209670893898754, 3270712738274947396],
        y: [11805571479997144868, 1873240993939869089, 2536953398218471227, 2201196215210731682],
    };
    let f2 = SyscallComplex256 {
        x: [18333499169494873014, 11639475012973159166, 11629272760731921316, 2867130213923064265],
        y: [0, 0, 0, 0],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [17887350965314140106, 16741053136279549780, 10267507430244567425, 41388177363490101],
        y: [12582095642143025065, 7163425657813513802, 4222203549658407555, 345735027377861780],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 5104-5119

    let mut f1 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    let f2 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 { x: [0, 0, 0, 0], y: [2, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 5120-5135

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 5136-5151

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [1, 0, 0, 0], y: [0, 0, 0, 0] };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);
}
