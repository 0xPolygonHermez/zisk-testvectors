#![no_main]
#![cfg(all(target_os = "zkvm", target_vendor = "zisk"))]
ziskos::entrypoint!(main);

use ziskos::{
    arith256::*, arith256_mod::*, bn254_complex_add::*, bn254_complex_mul::*, bn254_complex_sub::*,
    bn254_curve_add::*, bn254_curve_dbl::*, complex256::*, point256::*, secp256k1_add::*,
    secp256k1_dbl::*,
};

fn main() {
    let mut p1 = SyscallPoint256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let p2 = SyscallPoint256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let mut params = SyscallSecp256k1AddParams { p1: &mut p1, p2: &p2 };
    // secp256k1_add test rows: 0-15

    let mut p1 = SyscallPoint256 {
        x: [6481385041966929816, 188021827762530521, 6170039885052185351, 8772561819708210092],
        y: [11261198710074299576, 18237243440184513561, 6747795201694173352, 5204712524664259685],
    };
    let p2 = SyscallPoint256 {
        x: [12370272968204394213, 6662950628856118439, 3478257130916576472, 14268669794154544493],
        y: [2550217892273579306, 17867523981857706209, 11800983642684844782, 1936944757666071353],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [9656264143134537465, 13056436995607206320, 5274928500377997865, 17956003453681058576],
        y: [7834571707967399538, 7278003473310950171, 1144820191972553558, 4075611493812267028],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 16-31

    let mut p1 = SyscallPoint256 {
        x: [3388248522597430614, 9436808338628714891, 2325328641075066323, 18444909905599983268],
        y: [4361468193159901847, 16033079614159971488, 17563640529965925728, 12543219280952145440],
    };
    let p2 = SyscallPoint256 {
        x: [5550006413009698729, 2930477944108794843, 4206160142528515078, 11862148329463583523],
        y: [7472242686678486130, 6550614526735030299, 16155668332989636091, 14732040278589264792],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13491366187209133817, 9787663170891684295, 15066831866609717056, 16222008669425868485],
        y: [10828095770060190560, 15914172361422008262, 17539250198297628983, 3506387567980440284],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 32-47

    let mut p1 = SyscallPoint256 {
        x: [14245154385136969818, 7529161239585360219, 1568254326717236787, 14992788640288429595],
        y: [7711599709454213927, 8728974837485694290, 12156980350441740309, 12246219763152707799],
    };
    let p2 = SyscallPoint256 {
        x: [13491366187209133817, 9787663170891684295, 15066831866609717056, 16222008669425868485],
        y: [10828095770060190560, 15914172361422008262, 17539250198297628983, 3506387567980440284],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13822370467126228980, 2506116985832354287, 9022235008297346450, 15397375212876642037],
        y: [1787767364889970620, 10161053720274063512, 4877735586038743837, 1162801841474012042],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 48-63

    let mut p1 = SyscallPoint256 {
        x: [361059452381750990, 7508086908927522708, 9998163320986307337, 18334932765985551316],
        y: [10920898125377357247, 134132599253277986, 15252363593060096385, 7517033372555823720],
    };
    let p2 = SyscallPoint256 {
        x: [13822370467126228980, 2506116985832354287, 9022235008297346450, 15397375212876642037],
        y: [1787767364889970620, 10161053720274063512, 4877735586038743837, 1162801841474012042],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5162560989827175816, 16402521221305440318, 3171626711978951353, 17965666173449799390],
        y: [14722103743709784799, 2214560160701558786, 17158889244957832243, 161006794594479835],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 64-79

    let mut p1 = SyscallPoint256 {
        x: [11229849546581927363, 18183172613498203073, 12988774327542766411, 7983249766513717373],
        y: [5299100104091797096, 4200004925846514740, 6426451471226140064, 15348588267406231312],
    };
    let p2 = SyscallPoint256 {
        x: [5162560989827175816, 16402521221305440318, 3171626711978951353, 17965666173449799390],
        y: [14722103743709784799, 2214560160701558786, 17158889244957832243, 161006794594479835],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5852346876279720151, 12443874794687512882, 12245491628790112107, 1861861903343037182],
        y: [12461825173258948930, 736104182521454076, 1041363746078943805, 2457324180629681371],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 80-95

    let mut p1 = SyscallPoint256 {
        x: [4869300263515369699, 11686477369051177892, 10351046573905852206, 4543710797049982351],
        y: [14628406147340517455, 10736903920457307044, 16792687194968752563, 14656639356436790417],
    };
    let p2 = SyscallPoint256 {
        x: [5852346876279720151, 12443874794687512882, 12245491628790112107, 1861861903343037182],
        y: [12461825173258948930, 736104182521454076, 1041363746078943805, 2457324180629681371],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [269858136879743061, 4111365287215060192, 9052968481472801665, 713258727124895890],
        y: [2254907716061116340, 17921068610847361503, 15955208585682828903, 12784054924380092928],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 96-111

    let mut p1 = SyscallPoint256 {
        x: [14391060156941997906, 16682396899684982862, 9308341629085326058, 15537658789411800629],
        y: [13528856402216537844, 855755022726772546, 17794446170121208933, 10459452768711114802],
    };
    let p2 = SyscallPoint256 {
        x: [269858136879743061, 4111365287215060192, 9052968481472801665, 713258727124895890],
        y: [2254907716061116340, 17921068610847361503, 15955208585682828903, 12784054924380092928],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [9582940641673426435, 1186477552418578423, 11448072416566699141, 206687144183628328],
        y: [15542266276306060178, 2004272385792900881, 5996941556387902280, 1780552388856869273],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 112-127

    let mut p1 = SyscallPoint256 {
        x: [12180186410187710597, 13074317468773359492, 1212500563603673519, 3766037359670906174],
        y: [7869060398548210392, 110983775202227839, 5723666432541990313, 7357327491894833029],
    };
    let p2 = SyscallPoint256 {
        x: [9582940641673426435, 1186477552418578423, 11448072416566699141, 206687144183628328],
        y: [15542266276306060178, 2004272385792900881, 5996941556387902280, 1780552388856869273],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13041071917170456817, 16406377190915707657, 14889059541729264028, 3234355663149661257],
        y: [15822955659836146615, 6310589687302593, 8658486813739320610, 817024074903823074],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 128-143

    let mut p1 = SyscallPoint256 {
        x: [18229459384247684602, 684707198064386436, 980149713513319584, 9395299577453190220],
        y: [3877591415008278378, 6320499931082966136, 7421617926466391860, 9510922786123587150],
    };
    let p2 = SyscallPoint256 {
        x: [13041071917170456817, 16406377190915707657, 14889059541729264028, 3234355663149661257],
        y: [15822955659836146615, 6310589687302593, 8658486813739320610, 817024074903823074],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [11163181480235840359, 14096725224313550807, 16102908571542620524, 12354825009720789442],
        y: [14430857626809263081, 14227595315061545635, 5150125880527090062, 18070129506915093305],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 144-159

    let mut p1 = SyscallPoint256 {
        x: [15095153298253046284, 5303204884433242329, 14271294903557756800, 1608814916597982061],
        y: [7828074314403099341, 84151435424685138, 16932014280599564316, 231980500341718906],
    };
    let p2 = SyscallPoint256 {
        x: [11163181480235840359, 14096725224313550807, 16102908571542620524, 12354825009720789442],
        y: [14430857626809263081, 14227595315061545635, 5150125880527090062, 18070129506915093305],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [18141523963158533489, 15595433983440287811, 4352313414564922948, 15304126723928210086],
        y: [6323912894755555605, 12678016417103873055, 3343686957378346688, 25737814545654128],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 160-175

    let mut p1 = SyscallPoint256 {
        x: [5175809867597589453, 6112508711071501135, 6960504755495188287, 15320934750850643004],
        y: [16603242195010847682, 1341035381658710065, 15548816972008125270, 374330460415019277],
    };
    let p2 = SyscallPoint256 {
        x: [18141523963158533489, 15595433983440287811, 4352313414564922948, 15304126723928210086],
        y: [6323912894755555605, 12678016417103873055, 3343686957378346688, 25737814545654128],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1094065303696208448, 16344354570360019767, 13827564859011217877, 12903184145084862300],
        y: [1245072108431029466, 4737598162911875980, 13654603555467546707, 16744524669146169731],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 176-191

    let mut p1 = SyscallPoint256 {
        x: [6049190514384470666, 1382238135566132255, 1028123464921783413, 6887276088214724213],
        y: [13829158347396631936, 10117019307876977412, 16568876609164211038, 2790195167144050408],
    };
    let p2 = SyscallPoint256 {
        x: [1094065303696208448, 16344354570360019767, 13827564859011217877, 12903184145084862300],
        y: [1245072108431029466, 4737598162911875980, 13654603555467546707, 16744524669146169731],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [4108648498588573775, 9184144659800820744, 8139982771501597765, 11878897445941668857],
        y: [8010775560317714567, 13207243562382678217, 2069000135717376221, 4306849699615995068],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 192-207

    let mut p1 = SyscallPoint256 {
        x: [7329600635844956694, 4572057379606856554, 1336260601171668306, 15741542477464055028],
        y: [15775320700018001266, 16837481790980148954, 16076128951343087558, 8356605334306084336],
    };
    let p2 = SyscallPoint256 {
        x: [4108648498588573775, 9184144659800820744, 8139982771501597765, 11878897445941668857],
        y: [8010775560317714567, 13207243562382678217, 2069000135717376221, 4306849699615995068],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [17316478588240273279, 17194587335252601303, 15974886568808980373, 4936814799599649201],
        y: [3904859781770592503, 4885989130086194703, 7579208590447118834, 17635874452452737167],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 208-223

    let mut p1 = SyscallPoint256 {
        x: [10738044202431724224, 1807366078262717190, 1397443900249519886, 10750357262808598172],
        y: [5155141259007419145, 16310686023055039592, 3809253083837576160, 10321177611541094882],
    };
    let p2 = SyscallPoint256 {
        x: [17316478588240273279, 17194587335252601303, 15974886568808980373, 4936814799599649201],
        y: [3904859781770592503, 4885989130086194703, 7579208590447118834, 17635874452452737167],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1322065686598805203, 6418129315048375838, 7657541131051921320, 17000681850086764716],
        y: [11047335463743714399, 15610730330979148736, 12364327458721030102, 6652440655968728349],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 224-239

    let mut p1 = SyscallPoint256 {
        x: [463945003823832207, 17474371098211739570, 8001206879091110576, 7475415578589698301],
        y: [6140739010600260313, 14814938377153462974, 11729983352586442387, 8834749270810554244],
    };
    let p2 = SyscallPoint256 {
        x: [1322065686598805203, 6418129315048375838, 7657541131051921320, 17000681850086764716],
        y: [11047335463743714399, 15610730330979148736, 12364327458721030102, 6652440655968728349],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5713950615561495609, 8041683058359059296, 6009619030851677590, 11357010413961933117],
        y: [12322365804966655193, 14786421845530355111, 4150882367077942388, 15692732944913612157],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 240-255

    let mut p1 = SyscallPoint256 {
        x: [1295273892355154746, 10129401683319168165, 16093208732893648950, 9888537620415219562],
        y: [7473736272472650821, 11833745278707362626, 17587576923453685554, 14821718792216889502],
    };
    let p2 = SyscallPoint256 {
        x: [5713950615561495609, 8041683058359059296, 6009619030851677590, 11357010413961933117],
        y: [12322365804966655193, 14786421845530355111, 4150882367077942388, 15692732944913612157],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [14112459023686954070, 11765332665235294233, 14923047166356253834, 349093140243986112],
        y: [183628878045041348, 4528548779057507129, 13328074435666583347, 14956768888758149683],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 256-271

    let mut p1 = SyscallPoint256 {
        x: [5442901514494762440, 8068579949080609849, 13440047785991771202, 4913779344553672626],
        y: [3591977695608775603, 11991442826445074000, 18345839140001742551, 10858391194666493688],
    };
    let p2 = SyscallPoint256 {
        x: [14112459023686954070, 11765332665235294233, 14923047166356253834, 349093140243986112],
        y: [183628878045041348, 4528548779057507129, 13328074435666583347, 14956768888758149683],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [3062268612412726218, 13392392407157940631, 1411355184559711880, 7985517814817512039],
        y: [4059251560375655144, 6177606110121084199, 4934273323312877493, 366493205583397036],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 272-287

    let mut p1 = SyscallPoint256 {
        x: [4518765836368931242, 7498818245279601483, 13227717385055713490, 16516969123953977005],
        y: [14175714478368387599, 8050551974340866446, 6586817248383241729, 13366640209916572701],
    };
    let p2 = SyscallPoint256 {
        x: [3062268612412726218, 13392392407157940631, 1411355184559711880, 7985517814817512039],
        y: [4059251560375655144, 6177606110121084199, 4934273323312877493, 366493205583397036],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [17575772300310138614, 12431318927032221146, 1460974789748516701, 7883053580443548504],
        y: [9402541537984038308, 18417754886573459057, 4838423572481299259, 15464509280828210181],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 288-303

    let mut p1 = SyscallPoint256 {
        x: [1940266508063891926, 9984431616774062814, 14093435390931967825, 10637489008200751856],
        y: [16671943631316568944, 10956117075848626050, 11333022928271928324, 16044983857828047118],
    };
    let p2 = SyscallPoint256 {
        x: [17575772300310138614, 12431318927032221146, 1460974789748516701, 7883053580443548504],
        y: [9402541537984038308, 18417754886573459057, 4838423572481299259, 15464509280828210181],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [453874718208435914, 991410516929405062, 12123956665232519916, 1116912005956542124],
        y: [5278792877088150769, 14265231743380201299, 2188645538782029408, 13049382658328688434],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 304-319

    let mut p1 = SyscallPoint256 {
        x: [103041066207797471, 5493182318505324371, 541988339736127904, 18286371861815636627],
        y: [17320919250874839455, 8916760230381345237, 16419967297028024504, 2967218390301391698],
    };
    let p2 = SyscallPoint256 {
        x: [453874718208435914, 991410516929405062, 12123956665232519916, 1116912005956542124],
        y: [5278792877088150769, 14265231743380201299, 2188645538782029408, 13049382658328688434],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [15159292604162686267, 4730897740130147445, 2071708234608980775, 2131074080975141377],
        y: [9986330608556583152, 14990185093737273450, 14653762477376165914, 1721459030046704998],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 320-335

    let mut p1 = SyscallPoint256 {
        x: [11574995974176117469, 4414766936180469986, 822679711507871630, 8082199340442924335],
        y: [8222665182974650663, 5177706092917081916, 9067527580370240428, 12749403413602153426],
    };
    let p2 = SyscallPoint256 {
        x: [15159292604162686267, 4730897740130147445, 2071708234608980775, 2131074080975141377],
        y: [9986330608556583152, 14990185093737273450, 14653762477376165914, 1721459030046704998],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13607899488517933402, 5016059786498563456, 5865386345088109455, 3417186468862129292],
        y: [9933816199243592665, 15192022654306330566, 14491455573580872657, 7364464128872969602],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 336-351

    let mut p1 = SyscallPoint256 {
        x: [15914243312412917186, 15938066163142370148, 5377971646883909246, 17594455620906282567],
        y: [9362984259423688701, 5482376278183694118, 8717509125378925098, 6291593226033725548],
    };
    let p2 = SyscallPoint256 {
        x: [13607899488517933402, 5016059786498563456, 5865386345088109455, 3417186468862129292],
        y: [9933816199243592665, 15192022654306330566, 14491455573580872657, 7364464128872969602],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [4596637296931902290, 5179284164833778328, 5216904698233134048, 3681576032549449949],
        y: [824082266476420257, 605445595205419274, 11578697185493671634, 5863029753408550077],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 352-367

    let mut p1 = SyscallPoint256 {
        x: [4064169351091944918, 5275808506650400396, 14581098963839811052, 3661373076866028107],
        y: [2737419666888123184, 8794840480950624395, 7063906367485990430, 2415172074288609096],
    };
    let p2 = SyscallPoint256 {
        x: [4596637296931902290, 5179284164833778328, 5216904698233134048, 3681576032549449949],
        y: [824082266476420257, 605445595205419274, 11578697185493671634, 5863029753408550077],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [216749545875972051, 14058683194214034595, 8352508619592551943, 7203297682875879833],
        y: [1947837471752781879, 15222269456860444980, 16073304233080531074, 9489451335855890382],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 368-383

    let mut p1 = SyscallPoint256 {
        x: [14872935670260899089, 2498150643347925719, 3733789054294541208, 3824915211200202980],
        y: [6041292206277746165, 10629888326564814526, 17241135201711791871, 9919233498831486648],
    };
    let p2 = SyscallPoint256 {
        x: [216749545875972051, 14058683194214034595, 8352508619592551943, 7203297682875879833],
        y: [1947837471752781879, 15222269456860444980, 16073304233080531074, 9489451335855890382],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8274876590141192350, 95720123198723902, 11090921260126014511, 18095513945798992136],
        y: [6456369218473469706, 3764627666486703286, 9920020696404400423, 6886645070032807292],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 384-399

    let mut p1 = SyscallPoint256 {
        x: [2695369873367973041, 6294381136496828691, 55775141394128843, 7916937762851965652],
        y: [6331297647387634484, 9273615160470511347, 6672627684444104360, 10486908704690529309],
    };
    let p2 = SyscallPoint256 {
        x: [8274876590141192350, 95720123198723902, 11090921260126014511, 18095513945798992136],
        y: [6456369218473469706, 3764627666486703286, 9920020696404400423, 6886645070032807292],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [3501977551190874843, 18299905126105441486, 81834563298698649, 5883038862270701221],
        y: [12537815785366635759, 8008905523423489286, 16380012217031625002, 8631380985805656403],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 400-415

    let mut p1 = SyscallPoint256 {
        x: [5551767817086649981, 4652370938384087758, 3180093489577292009, 10939354481072644386],
        y: [8751339588051317754, 15735493227336269005, 285915284228834847, 9914480167209927372],
    };
    let p2 = SyscallPoint256 {
        x: [3501977551190874843, 18299905126105441486, 81834563298698649, 5883038862270701221],
        y: [12537815785366635759, 8008905523423489286, 16380012217031625002, 8631380985805656403],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [18432287065923338713, 5166766174961492788, 1828793822852732212, 13593841263226959975],
        y: [13896199101075208059, 7062918950905956787, 10963824917458864486, 6520641051279386208],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 416-431

    let mut p1 = SyscallPoint256 {
        x: [14747068561044356076, 10067230293567012455, 17145682334294447914, 3301079946884626365],
        y: [4499950505480655381, 3977469822236581688, 7345521315408168692, 5105891058512077842],
    };
    let p2 = SyscallPoint256 {
        x: [18432287065923338713, 5166766174961492788, 1828793822852732212, 13593841263226959975],
        y: [13896199101075208059, 7062918950905956787, 10963824917458864486, 6520641051279386208],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8154615983424653897, 7131836204146226003, 15125915807250983712, 16046912909942911914],
        y: [14721215721826705832, 13213131517761040548, 3455368700193666818, 16176486201532394492],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 432-447

    let mut p1 = SyscallPoint256 {
        x: [1715052357432876570, 9216418127752606358, 17410964304851308150, 2012054922371974568],
        y: [6338501016427430979, 7499484979756890478, 9978213532082457359, 16381956913317963367],
    };
    let p2 = SyscallPoint256 {
        x: [8154615983424653897, 7131836204146226003, 15125915807250983712, 16046912909942911914],
        y: [14721215721826705832, 13213131517761040548, 3455368700193666818, 16176486201532394492],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [10200771866082422070, 15233400556993348024, 1677199273022126766, 16964552336732726619],
        y: [6243170004544308305, 8844542287127595426, 16359998086380573183, 7016508127393210429],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 448-463

    let mut p1 = SyscallPoint256 {
        x: [17579371235244829931, 8333242141519641328, 3963088586427754516, 4862346220812031056],
        y: [8314696884216234465, 9737362729761478530, 7618118829915412479, 833565746329731887],
    };
    let p2 = SyscallPoint256 {
        x: [10200771866082422070, 15233400556993348024, 1677199273022126766, 16964552336732726619],
        y: [6243170004544308305, 8844542287127595426, 16359998086380573183, 7016508127393210429],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13855740576624240462, 9310705850978512737, 4315766627569668515, 10763185061552723532],
        y: [8191496754499051172, 13704118876820223148, 8447513748640383780, 14444170809305060500],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 464-479

    let mut p1 = SyscallPoint256 {
        x: [5520741925075747051, 4734665894730203687, 5313709858873347010, 13299253594783667420],
        y: [1981332928802481742, 14631503625348278887, 5125823036125390694, 8008746776286910607],
    };
    let p2 = SyscallPoint256 {
        x: [13855740576624240462, 9310705850978512737, 4315766627569668515, 10763185061552723532],
        y: [8191496754499051172, 13704118876820223148, 8447513748640383780, 14444170809305060500],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5180260000801893250, 5576654165372914908, 1309148430045953829, 925958165987619575],
        y: [3499584381566724447, 169741299846781908, 11124353840197093508, 14200096245096926612],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 480-495

    let mut p1 = SyscallPoint256 {
        x: [13391171581992757170, 6822370424887535011, 17525401371839857760, 2758603646549901816],
        y: [10604421022012418612, 6212954835810956803, 10317515620428406552, 11391251302118933656],
    };
    let p2 = SyscallPoint256 {
        x: [5180260000801893250, 5576654165372914908, 1309148430045953829, 925958165987619575],
        y: [3499584381566724447, 169741299846781908, 11124353840197093508, 14200096245096926612],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [14735888330011328251, 5573972878576151961, 13852378029340426220, 13379388281851196555],
        y: [5137151605102109369, 1197419595926441242, 5302579665649846651, 1060689601918635210],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 496-511

    let mut p1 = SyscallPoint256 {
        x: [10849403525780439829, 11289614090998189679, 2181572784496621666, 12368387090914152994],
        y: [17987381282621225994, 4593589374930006840, 7193780182280506735, 11594338602946289371],
    };
    let p2 = SyscallPoint256 {
        x: [14735888330011328251, 5573972878576151961, 13852378029340426220, 13379388281851196555],
        y: [5137151605102109369, 1197419595926441242, 5302579665649846651, 1060689601918635210],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13071452706259432000, 1561342327798404440, 2239552469396240275, 9360860172121362935],
        y: [4122765418885251096, 12618215134047766937, 2320148166506938950, 14013265817654152112],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 512-527

    let mut p1 = SyscallPoint256 {
        x: [11293234787830732212, 10553344111901552358, 17115243093740210829, 1218520766286310857],
        y: [3813394437315896717, 5522971576380385928, 5573108632631713653, 14306307654481731650],
    };
    let p2 = SyscallPoint256 {
        x: [13071452706259432000, 1561342327798404440, 2239552469396240275, 9360860172121362935],
        y: [4122765418885251096, 12618215134047766937, 2320148166506938950, 14013265817654152112],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [10006229491154365947, 6727618987860397178, 7046542328338385748, 16187852099038820861],
        y: [8378464541065074023, 9247520640360376019, 12552124350768504496, 10165896236998650687],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 528-543

    let mut p1 = SyscallPoint256 {
        x: [1108637335817030272, 5576108730364894324, 12789268458268260803, 13164402591290150053],
        y: [13172185654463695363, 11284352376475883246, 11911495718141245140, 18079188421163464222],
    };
    let p2 = SyscallPoint256 {
        x: [10006229491154365947, 6727618987860397178, 7046542328338385748, 16187852099038820861],
        y: [8378464541065074023, 9247520640360376019, 12552124350768504496, 10165896236998650687],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [11623169190403283598, 17068669642374506562, 4141402140827765446, 2179648726488660013],
        y: [10115867639754326390, 12025547697042875110, 852173907725251029, 3386588260483922704],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 544-559

    let mut p1 = SyscallPoint256 {
        x: [12090657614458806996, 8817177143830552897, 503021151671951994, 3861342605456894666],
        y: [11604268610577650434, 15006137691171346865, 13820669395044698774, 17752030043910038985],
    };
    let p2 = SyscallPoint256 {
        x: [11623169190403283598, 17068669642374506562, 4141402140827765446, 2179648726488660013],
        y: [10115867639754326390, 12025547697042875110, 852173907725251029, 3386588260483922704],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1035927317643819034, 17353136055061049415, 4268115939027386742, 4026602638594710033],
        y: [16871059498234949738, 2233439322816396226, 14062996002823185792, 5651450137595941616],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 560-575

    let mut p1 = SyscallPoint256 {
        x: [18017764961173110055, 4926752439929326690, 14997611895299651099, 11445686286449633356],
        y: [6445410683928888408, 10711851183156513076, 17182838910183961172, 13128425468190650090],
    };
    let p2 = SyscallPoint256 {
        x: [1035927317643819034, 17353136055061049415, 4268115939027386742, 4026602638594710033],
        y: [16871059498234949738, 2233439322816396226, 14062996002823185792, 5651450137595941616],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1067311716169660418, 1034337825024216295, 3213517253338680327, 3641775450275733519],
        y: [9683032282477615234, 10904467368722975470, 6951686410473066757, 13391864800403857424],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 576-591

    let mut p1 = SyscallPoint256 {
        x: [6311271162047532419, 7031687393186167137, 7663647010047551963, 12100037248868124140],
        y: [10826716363625643729, 5162120399752083737, 14977221076717961291, 7063074885427487445],
    };
    let p2 = SyscallPoint256 {
        x: [1067311716169660418, 1034337825024216295, 3213517253338680327, 3641775450275733519],
        y: [9683032282477615234, 10904467368722975470, 6951686410473066757, 13391864800403857424],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [13487453941517569908, 243098374521548216, 2229066818043626511, 12491200930566995719],
        y: [9572133749335449565, 16063873362822101876, 11899161690482435933, 15517155185699180930],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 592-607

    let mut p1 = SyscallPoint256 {
        x: [17476293204481810149, 15730797396350667795, 7360633096409230958, 15317641942788415928],
        y: [7362722182936827048, 1932374696440073692, 17135174711157390174, 152007121579973923],
    };
    let p2 = SyscallPoint256 {
        x: [13487453941517569908, 243098374521548216, 2229066818043626511, 12491200930566995719],
        y: [9572133749335449565, 16063873362822101876, 11899161690482435933, 15517155185699180930],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [6840554336969258264, 367545887029918008, 4557615043444161796, 11067145729364594586],
        y: [8985482730765902468, 12212411486575038577, 2524436988336709056, 7603926967023226665],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 608-623

    let mut p1 = SyscallPoint256 {
        x: [5984682183816926538, 12311996661131431934, 5135883420287673068, 9903195440301724064],
        y: [15460751836961650911, 16575598903605598172, 15736188084217256945, 4036390641650549932],
    };
    let p2 = SyscallPoint256 {
        x: [6840554336969258264, 367545887029918008, 4557615043444161796, 11067145729364594586],
        y: [8985482730765902468, 12212411486575038577, 2524436988336709056, 7603926967023226665],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8069978617523194485, 10040017498880799709, 4070240834111844240, 14397567833749315177],
        y: [2408303731189624197, 18095238845897882862, 9128836378019859423, 2118495997885755559],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 624-639

    let mut p1 = SyscallPoint256 {
        x: [9513710291490163238, 9077994736731300711, 14586069155036100770, 1275567076589399404],
        y: [15254394179475184984, 4300413298620210498, 10148128438355415995, 7292206992328756304],
    };
    let p2 = SyscallPoint256 {
        x: [8069978617523194485, 10040017498880799709, 4070240834111844240, 14397567833749315177],
        y: [2408303731189624197, 18095238845897882862, 9128836378019859423, 2118495997885755559],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [5313036004776658223, 5748518594214101917, 15965375769301489567, 2394109371143714419],
        y: [17120705537189757149, 10411841749873587876, 3281661694091576154, 5012240766734575141],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 640-655

    let mut p1 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [7960650550461533833, 6752854485708698976, 7033117147444881223, 3794673124853157169],
    };
    let p2 = SyscallPoint256 {
        x: [5313036004776658223, 5748518594214101917, 15965375769301489567, 2394109371143714419],
        y: [17120705537189757149, 10411841749873587876, 3281661694091576154, 5012240766734575141],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [10874910764848192175, 9020727903069138557, 5772256171017100028, 1250219299188327156],
        y: [12796806836320033030, 16993477809206151124, 4672779604748745663, 13049568263257569021],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 656-671

    let mut p1 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [7960650550461533833, 6752854485708698976, 7033117147444881223, 3794673124853157169],
    };
    let p2 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 15025332287773626507],
        y: [17120705537189757149, 10411841749873587876, 3281661694091576154, 5012240766734575141],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [2314528374966098503, 2889063032665862748, 8748168253325326142, 7477973783986122508],
        y: [3180169149017043874, 2251189934630892016, 14075773856299550074, 3978469940125499659],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_add test rows: 672-687

    let mut p1 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [7960650550461533833, 6752854485708698976, 7033117147444881223, 3794673124853157169],
    };
    let p2 = SyscallPoint256 {
        x: [545887435628795271, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [17120705537189757149, 10411841749873587876, 3281661694091576154, 5012240766734575141],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_secp256k1_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [16302535435195808843, 8543364680260097415, 14908508942232280741, 15497036330728249576],
        y: [6141349181170948100, 1750840565155776462, 5517384897023788690, 9517308371755837438],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // secp256k1_dbl test rows: 688-703

    let mut p1 = SyscallPoint256 {
        x: [3388248522597430614, 9436808338628714891, 2325328641075066323, 18444909905599983268],
        y: [4361468193159901847, 16033079614159971488, 17563640529965925728, 12543219280952145440],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [14245154385136969818, 7529161239585360219, 1568254326717236787, 14992788640288429595],
        y: [7711599709454213927, 8728974837485694290, 12156980350441740309, 12246219763152707799],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 704-719

    let mut p1 = SyscallPoint256 {
        x: [14245154385136969818, 7529161239585360219, 1568254326717236787, 14992788640288429595],
        y: [7711599709454213927, 8728974837485694290, 12156980350441740309, 12246219763152707799],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [361059452381750990, 7508086908927522708, 9998163320986307337, 18334932765985551316],
        y: [10920898125377357247, 134132599253277986, 15252363593060096385, 7517033372555823720],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 720-735

    let mut p1 = SyscallPoint256 {
        x: [361059452381750990, 7508086908927522708, 9998163320986307337, 18334932765985551316],
        y: [10920898125377357247, 134132599253277986, 15252363593060096385, 7517033372555823720],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [11229849546581927363, 18183172613498203073, 12988774327542766411, 7983249766513717373],
        y: [5299100104091797096, 4200004925846514740, 6426451471226140064, 15348588267406231312],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 736-751

    let mut p1 = SyscallPoint256 {
        x: [11229849546581927363, 18183172613498203073, 12988774327542766411, 7983249766513717373],
        y: [5299100104091797096, 4200004925846514740, 6426451471226140064, 15348588267406231312],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [4869300263515369699, 11686477369051177892, 10351046573905852206, 4543710797049982351],
        y: [14628406147340517455, 10736903920457307044, 16792687194968752563, 14656639356436790417],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 752-767

    let mut p1 = SyscallPoint256 {
        x: [4869300263515369699, 11686477369051177892, 10351046573905852206, 4543710797049982351],
        y: [14628406147340517455, 10736903920457307044, 16792687194968752563, 14656639356436790417],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [14391060156941997906, 16682396899684982862, 9308341629085326058, 15537658789411800629],
        y: [13528856402216537844, 855755022726772546, 17794446170121208933, 10459452768711114802],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 768-783

    let mut p1 = SyscallPoint256 {
        x: [14391060156941997906, 16682396899684982862, 9308341629085326058, 15537658789411800629],
        y: [13528856402216537844, 855755022726772546, 17794446170121208933, 10459452768711114802],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [12180186410187710597, 13074317468773359492, 1212500563603673519, 3766037359670906174],
        y: [7869060398548210392, 110983775202227839, 5723666432541990313, 7357327491894833029],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 784-799

    let mut p1 = SyscallPoint256 {
        x: [12180186410187710597, 13074317468773359492, 1212500563603673519, 3766037359670906174],
        y: [7869060398548210392, 110983775202227839, 5723666432541990313, 7357327491894833029],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [18229459384247684602, 684707198064386436, 980149713513319584, 9395299577453190220],
        y: [3877591415008278378, 6320499931082966136, 7421617926466391860, 9510922786123587150],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 800-815

    let mut p1 = SyscallPoint256 {
        x: [18229459384247684602, 684707198064386436, 980149713513319584, 9395299577453190220],
        y: [3877591415008278378, 6320499931082966136, 7421617926466391860, 9510922786123587150],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [15095153298253046284, 5303204884433242329, 14271294903557756800, 1608814916597982061],
        y: [7828074314403099341, 84151435424685138, 16932014280599564316, 231980500341718906],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 816-831

    let mut p1 = SyscallPoint256 {
        x: [15095153298253046284, 5303204884433242329, 14271294903557756800, 1608814916597982061],
        y: [7828074314403099341, 84151435424685138, 16932014280599564316, 231980500341718906],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5175809867597589453, 6112508711071501135, 6960504755495188287, 15320934750850643004],
        y: [16603242195010847682, 1341035381658710065, 15548816972008125270, 374330460415019277],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 832-847

    let mut p1 = SyscallPoint256 {
        x: [5175809867597589453, 6112508711071501135, 6960504755495188287, 15320934750850643004],
        y: [16603242195010847682, 1341035381658710065, 15548816972008125270, 374330460415019277],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [6049190514384470666, 1382238135566132255, 1028123464921783413, 6887276088214724213],
        y: [13829158347396631936, 10117019307876977412, 16568876609164211038, 2790195167144050408],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 848-863

    let mut p1 = SyscallPoint256 {
        x: [6049190514384470666, 1382238135566132255, 1028123464921783413, 6887276088214724213],
        y: [13829158347396631936, 10117019307876977412, 16568876609164211038, 2790195167144050408],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [7329600635844956694, 4572057379606856554, 1336260601171668306, 15741542477464055028],
        y: [15775320700018001266, 16837481790980148954, 16076128951343087558, 8356605334306084336],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 864-879

    let mut p1 = SyscallPoint256 {
        x: [7329600635844956694, 4572057379606856554, 1336260601171668306, 15741542477464055028],
        y: [15775320700018001266, 16837481790980148954, 16076128951343087558, 8356605334306084336],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [10738044202431724224, 1807366078262717190, 1397443900249519886, 10750357262808598172],
        y: [5155141259007419145, 16310686023055039592, 3809253083837576160, 10321177611541094882],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 880-895

    let mut p1 = SyscallPoint256 {
        x: [10738044202431724224, 1807366078262717190, 1397443900249519886, 10750357262808598172],
        y: [5155141259007419145, 16310686023055039592, 3809253083837576160, 10321177611541094882],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [463945003823832207, 17474371098211739570, 8001206879091110576, 7475415578589698301],
        y: [6140739010600260313, 14814938377153462974, 11729983352586442387, 8834749270810554244],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 896-911

    let mut p1 = SyscallPoint256 {
        x: [463945003823832207, 17474371098211739570, 8001206879091110576, 7475415578589698301],
        y: [6140739010600260313, 14814938377153462974, 11729983352586442387, 8834749270810554244],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1295273892355154746, 10129401683319168165, 16093208732893648950, 9888537620415219562],
        y: [7473736272472650821, 11833745278707362626, 17587576923453685554, 14821718792216889502],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 912-927

    let mut p1 = SyscallPoint256 {
        x: [1295273892355154746, 10129401683319168165, 16093208732893648950, 9888537620415219562],
        y: [7473736272472650821, 11833745278707362626, 17587576923453685554, 14821718792216889502],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5442901514494762440, 8068579949080609849, 13440047785991771202, 4913779344553672626],
        y: [3591977695608775603, 11991442826445074000, 18345839140001742551, 10858391194666493688],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 928-943

    let mut p1 = SyscallPoint256 {
        x: [5442901514494762440, 8068579949080609849, 13440047785991771202, 4913779344553672626],
        y: [3591977695608775603, 11991442826445074000, 18345839140001742551, 10858391194666493688],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [4518765836368931242, 7498818245279601483, 13227717385055713490, 16516969123953977005],
        y: [14175714478368387599, 8050551974340866446, 6586817248383241729, 13366640209916572701],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 944-959

    let mut p1 = SyscallPoint256 {
        x: [4518765836368931242, 7498818245279601483, 13227717385055713490, 16516969123953977005],
        y: [14175714478368387599, 8050551974340866446, 6586817248383241729, 13366640209916572701],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1940266508063891926, 9984431616774062814, 14093435390931967825, 10637489008200751856],
        y: [16671943631316568944, 10956117075848626050, 11333022928271928324, 16044983857828047118],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 960-975

    let mut p1 = SyscallPoint256 {
        x: [1940266508063891926, 9984431616774062814, 14093435390931967825, 10637489008200751856],
        y: [16671943631316568944, 10956117075848626050, 11333022928271928324, 16044983857828047118],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [103041066207797471, 5493182318505324371, 541988339736127904, 18286371861815636627],
        y: [17320919250874839455, 8916760230381345237, 16419967297028024504, 2967218390301391698],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 976-991

    let mut p1 = SyscallPoint256 {
        x: [103041066207797471, 5493182318505324371, 541988339736127904, 18286371861815636627],
        y: [17320919250874839455, 8916760230381345237, 16419967297028024504, 2967218390301391698],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [11574995974176117469, 4414766936180469986, 822679711507871630, 8082199340442924335],
        y: [8222665182974650663, 5177706092917081916, 9067527580370240428, 12749403413602153426],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 992-1007

    let mut p1 = SyscallPoint256 {
        x: [11574995974176117469, 4414766936180469986, 822679711507871630, 8082199340442924335],
        y: [8222665182974650663, 5177706092917081916, 9067527580370240428, 12749403413602153426],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [15914243312412917186, 15938066163142370148, 5377971646883909246, 17594455620906282567],
        y: [9362984259423688701, 5482376278183694118, 8717509125378925098, 6291593226033725548],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1008-1023

    let mut p1 = SyscallPoint256 {
        x: [15914243312412917186, 15938066163142370148, 5377971646883909246, 17594455620906282567],
        y: [9362984259423688701, 5482376278183694118, 8717509125378925098, 6291593226033725548],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [4064169351091944918, 5275808506650400396, 14581098963839811052, 3661373076866028107],
        y: [2737419666888123184, 8794840480950624395, 7063906367485990430, 2415172074288609096],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1024-1039

    let mut p1 = SyscallPoint256 {
        x: [4064169351091944918, 5275808506650400396, 14581098963839811052, 3661373076866028107],
        y: [2737419666888123184, 8794840480950624395, 7063906367485990430, 2415172074288609096],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [14872935670260899089, 2498150643347925719, 3733789054294541208, 3824915211200202980],
        y: [6041292206277746165, 10629888326564814526, 17241135201711791871, 9919233498831486648],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1040-1055

    let mut p1 = SyscallPoint256 {
        x: [14872935670260899089, 2498150643347925719, 3733789054294541208, 3824915211200202980],
        y: [6041292206277746165, 10629888326564814526, 17241135201711791871, 9919233498831486648],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [2695369873367973041, 6294381136496828691, 55775141394128843, 7916937762851965652],
        y: [6331297647387634484, 9273615160470511347, 6672627684444104360, 10486908704690529309],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1056-1071

    let mut p1 = SyscallPoint256 {
        x: [2695369873367973041, 6294381136496828691, 55775141394128843, 7916937762851965652],
        y: [6331297647387634484, 9273615160470511347, 6672627684444104360, 10486908704690529309],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5551767817086649981, 4652370938384087758, 3180093489577292009, 10939354481072644386],
        y: [8751339588051317754, 15735493227336269005, 285915284228834847, 9914480167209927372],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1072-1087

    let mut p1 = SyscallPoint256 {
        x: [5551767817086649981, 4652370938384087758, 3180093489577292009, 10939354481072644386],
        y: [8751339588051317754, 15735493227336269005, 285915284228834847, 9914480167209927372],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [14747068561044356076, 10067230293567012455, 17145682334294447914, 3301079946884626365],
        y: [4499950505480655381, 3977469822236581688, 7345521315408168692, 5105891058512077842],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1088-1103

    let mut p1 = SyscallPoint256 {
        x: [14747068561044356076, 10067230293567012455, 17145682334294447914, 3301079946884626365],
        y: [4499950505480655381, 3977469822236581688, 7345521315408168692, 5105891058512077842],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1715052357432876570, 9216418127752606358, 17410964304851308150, 2012054922371974568],
        y: [6338501016427430979, 7499484979756890478, 9978213532082457359, 16381956913317963367],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1104-1119

    let mut p1 = SyscallPoint256 {
        x: [1715052357432876570, 9216418127752606358, 17410964304851308150, 2012054922371974568],
        y: [6338501016427430979, 7499484979756890478, 9978213532082457359, 16381956913317963367],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [17579371235244829931, 8333242141519641328, 3963088586427754516, 4862346220812031056],
        y: [8314696884216234465, 9737362729761478530, 7618118829915412479, 833565746329731887],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1120-1135

    let mut p1 = SyscallPoint256 {
        x: [17579371235244829931, 8333242141519641328, 3963088586427754516, 4862346220812031056],
        y: [8314696884216234465, 9737362729761478530, 7618118829915412479, 833565746329731887],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5520741925075747051, 4734665894730203687, 5313709858873347010, 13299253594783667420],
        y: [1981332928802481742, 14631503625348278887, 5125823036125390694, 8008746776286910607],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1136-1151

    let mut p1 = SyscallPoint256 {
        x: [5520741925075747051, 4734665894730203687, 5313709858873347010, 13299253594783667420],
        y: [1981332928802481742, 14631503625348278887, 5125823036125390694, 8008746776286910607],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [13391171581992757170, 6822370424887535011, 17525401371839857760, 2758603646549901816],
        y: [10604421022012418612, 6212954835810956803, 10317515620428406552, 11391251302118933656],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1152-1167

    let mut p1 = SyscallPoint256 {
        x: [13391171581992757170, 6822370424887535011, 17525401371839857760, 2758603646549901816],
        y: [10604421022012418612, 6212954835810956803, 10317515620428406552, 11391251302118933656],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [10849403525780439829, 11289614090998189679, 2181572784496621666, 12368387090914152994],
        y: [17987381282621225994, 4593589374930006840, 7193780182280506735, 11594338602946289371],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1168-1183

    let mut p1 = SyscallPoint256 {
        x: [10849403525780439829, 11289614090998189679, 2181572784496621666, 12368387090914152994],
        y: [17987381282621225994, 4593589374930006840, 7193780182280506735, 11594338602946289371],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [11293234787830732212, 10553344111901552358, 17115243093740210829, 1218520766286310857],
        y: [3813394437315896717, 5522971576380385928, 5573108632631713653, 14306307654481731650],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1184-1199

    let mut p1 = SyscallPoint256 {
        x: [11293234787830732212, 10553344111901552358, 17115243093740210829, 1218520766286310857],
        y: [3813394437315896717, 5522971576380385928, 5573108632631713653, 14306307654481731650],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1108637335817030272, 5576108730364894324, 12789268458268260803, 13164402591290150053],
        y: [13172185654463695363, 11284352376475883246, 11911495718141245140, 18079188421163464222],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1200-1215

    let mut p1 = SyscallPoint256 {
        x: [1108637335817030272, 5576108730364894324, 12789268458268260803, 13164402591290150053],
        y: [13172185654463695363, 11284352376475883246, 11911495718141245140, 18079188421163464222],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [12090657614458806996, 8817177143830552897, 503021151671951994, 3861342605456894666],
        y: [11604268610577650434, 15006137691171346865, 13820669395044698774, 17752030043910038985],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1216-1231

    let mut p1 = SyscallPoint256 {
        x: [12090657614458806996, 8817177143830552897, 503021151671951994, 3861342605456894666],
        y: [11604268610577650434, 15006137691171346865, 13820669395044698774, 17752030043910038985],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [18017764961173110055, 4926752439929326690, 14997611895299651099, 11445686286449633356],
        y: [6445410683928888408, 10711851183156513076, 17182838910183961172, 13128425468190650090],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1232-1247

    let mut p1 = SyscallPoint256 {
        x: [18017764961173110055, 4926752439929326690, 14997611895299651099, 11445686286449633356],
        y: [6445410683928888408, 10711851183156513076, 17182838910183961172, 13128425468190650090],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [6311271162047532419, 7031687393186167137, 7663647010047551963, 12100037248868124140],
        y: [10826716363625643729, 5162120399752083737, 14977221076717961291, 7063074885427487445],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1248-1263

    let mut p1 = SyscallPoint256 {
        x: [6311271162047532419, 7031687393186167137, 7663647010047551963, 12100037248868124140],
        y: [10826716363625643729, 5162120399752083737, 14977221076717961291, 7063074885427487445],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [17476293204481810149, 15730797396350667795, 7360633096409230958, 15317641942788415928],
        y: [7362722182936827048, 1932374696440073692, 17135174711157390174, 152007121579973923],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1264-1279

    let mut p1 = SyscallPoint256 {
        x: [17476293204481810149, 15730797396350667795, 7360633096409230958, 15317641942788415928],
        y: [7362722182936827048, 1932374696440073692, 17135174711157390174, 152007121579973923],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5984682183816926538, 12311996661131431934, 5135883420287673068, 9903195440301724064],
        y: [15460751836961650911, 16575598903605598172, 15736188084217256945, 4036390641650549932],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1280-1295

    let mut p1 = SyscallPoint256 {
        x: [5984682183816926538, 12311996661131431934, 5135883420287673068, 9903195440301724064],
        y: [15460751836961650911, 16575598903605598172, 15736188084217256945, 4036390641650549932],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [9513710291490163238, 9077994736731300711, 14586069155036100770, 1275567076589399404],
        y: [15254394179475184984, 4300413298620210498, 10148128438355415995, 7292206992328756304],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1296-1311

    let mut p1 = SyscallPoint256 {
        x: [9513710291490163238, 9077994736731300711, 14586069155036100770, 1275567076589399404],
        y: [15254394179475184984, 4300413298620210498, 10148128438355415995, 7292206992328756304],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [7960650550461533833, 6752854485708698976, 7033117147444881223, 3794673124853157169],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1312-1327

    let mut p1 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [7960650550461533833, 6752854485708698976, 7033117147444881223, 3794673124853157169],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5550006413009698729, 2930477944108794843, 4206160142528515078, 11862148329463583523],
        y: [7472242686678486130, 6550614526735030299, 16155668332989636091, 14732040278589264792],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // secp256k1_dbl test rows: 1328-1343

    let mut p1 = SyscallPoint256 {
        x: [545887436851369351, 6828787688065214038, 3784847408168804653, 5801960250918850699],
        y: [7960650550461533833, 6752854485708698976, 7033117147444881223, 3794673124853157169],
    };
    syscall_secp256k1_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [5550006413009698729, 2930477944108794843, 4206160142528515078, 11862148329463583523],
        y: [7472242686678486130, 6550614526735030299, 16155668332989636091, 14732040278589264792],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    let mut a: [u64; 4] = [0, 0, 0, 0];
    let mut b: [u64; 4] = [0, 0, 0, 0];
    let mut c: [u64; 4] = [0, 0, 0, 0];
    let mut dl: [u64; 4] = [0, 0, 0, 0];
    let mut dh: [u64; 4] = [0, 0, 0, 0];

    let mut params =
        SyscallArith256Params { a: &mut a, b: &mut b, c: &mut c, dh: &mut dh, dl: &mut dl };

    // arith256 test rows: 1344-1359

    params.a = &[3, 0, 0, 0];
    params.b = &[2, 0, 0, 0];
    params.c = &[5, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [11, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1360-1375

    params.a = &[256, 0, 0, 0];
    params.b = &[256, 0, 0, 0];
    params.c = &[1, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [65537, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1376-1391

    params.a = &[3000, 0, 0, 0];
    params.b = &[2000, 0, 0, 0];
    params.c = &[5000, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [6005000, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1392-1407

    params.a = &[3000000, 0, 0, 0];
    params.b = &[2000000, 0, 0, 0];
    params.c = &[5000000, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [6000005000000, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1408-1423

    params.a = &[3000, 0, 0, 0];
    params.b = &[0, 0, 0, 0];
    params.c = &[5000, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] = [5000, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1424-1439

    params.a = &[0, 0, 0, 9223372036854775808];
    params.b = &[2, 0, 0, 0];
    params.c = &[0, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [1, 0, 0, 0];
    let expected_dl: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1440-1455

    params.a =
        &[18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    params.b =
        &[18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    params.c =
        &[18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    let expected_dl: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1456-1471

    params.a =
        &[18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    params.b = &[1, 0, 0, 0];
    params.c =
        &[18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [1, 0, 0, 0];
    let expected_dl: [u64; 4] =
        [18446744073709551614, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1472-1487

    params.a = &[7713719039128253086, 115615546558, 0, 0];
    params.b = &[10656898944539337297, 2453633705698497226, 159552453, 0];
    params.c = &[1, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] =
        [18446744073709551615, 18446744073709551615, 18446744073709551615, 18446744073709551615];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1488-1503

    params.a = &[0, 0, 0, 0];
    params.b =
        &[5641043740449624970, 17935565655897260830, 10919558233487242038, 3259728400919159662];
    params.c =
        &[2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] =
        [2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1504-1519

    params.a =
        &[14543826280514596025, 9925309151025471942, 15693957349391226432, 1303992629676031264];
    params.b = &[0, 0, 0, 0];
    params.c =
        &[8758098300086079933, 8458090185970427871, 5608800379645947347, 3254741872956128470];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] = [0, 0, 0, 0];
    let expected_dl: [u64; 4] =
        [8758098300086079933, 8458090185970427871, 5608800379645947347, 3254741872956128470];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1520-1535

    params.a =
        &[16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504];
    params.b =
        &[7203210682968997592, 1683754083127282338, 5544086711222400467, 2169034962190395798];
    params.c = &[0, 0, 0, 0];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [4920193930127254026, 12651897792310999332, 15756748985538480733, 358927687627160255];
    let expected_dl: [u64; 4] =
        [8652960039961832592, 12927669010041577485, 186790233820823996, 4193027692932975106];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1536-1551

    params.a =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    params.b =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    params.c =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [2805173416851059596, 12685379358730704390, 6456595594210759196, 659149217016364956];
    let expected_dl: [u64; 4] =
        [18389266602179718250, 1045007305792878195, 10520359139510940287, 15277423945471533726];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1552-1567

    params.a =
        &[9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371];
    params.b =
        &[13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604];
    params.c =
        &[4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [13767190121689476520, 8180501038057058095, 10787668698697595931, 62355106935493271];
    let expected_dl: [u64; 4] =
        [2966147972534030794, 14236193498970964075, 9032432248339320385, 9039414898496554729];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1568-1583

    params.a =
        &[18322129971448504228, 1931565055368554727, 4329275120939973020, 12978697249981708710];
    params.b =
        &[280285223898405502, 11284537880113667004, 1081332520087288237, 13072869521125875881];
    params.c =
        &[10747199766730330840, 7794942346027476440, 9925182310152147232, 2506352177963258844];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [2915064742398828162, 13497111676907046358, 11533134330377006094, 9197764929422936304];
    let expected_dl: [u64; 4] =
        [8567555132443528592, 4413536587579917121, 15525761641803697026, 7375841439625782474];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1584-1599

    params.a =
        &[3601750688034868637, 11098567879892209091, 7853054493001661040, 13127796090247981965];
    params.b = &[6450262964717846419, 6206609616313831266, 9102905784272360915, 34732001983190336];
    params.c =
        &[13756415383517927123, 5969167424200594595, 11472493900790927461, 10161930015752951061];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [1142448829767690416, 12893764248253524065, 16461049376350285663, 24717350553545190];
    let expected_dl: [u64; 4] =
        [786030360820878074, 10547436729874534204, 14317391299827766634, 3869960813368558602];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1600-1615

    params.a =
        &[9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371];
    params.b =
        &[13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604];
    params.c =
        &[4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [13767190121689476520, 8180501038057058095, 10787668698697595931, 62355106935493271];
    let expected_dl: [u64; 4] =
        [2966147972534030794, 14236193498970964075, 9032432248339320385, 9039414898496554729];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1616-1631

    params.a =
        &[18183646675237997858, 5913221654135725266, 17004692625211814591, 3035855206098274375];
    params.b =
        &[3815866324375555432, 14662508343725318569, 12256559516963360580, 3331835286132085115];
    params.c =
        &[10680278636993256106, 4812199420528396217, 9545827554963751537, 1694214479444147175];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [11710853863803600850, 18391770452823106496, 3335851138642602120, 548333595286441921];
    let expected_dl: [u64; 4] =
        [5045461017808906874, 16256148593343272435, 16431119418264968873, 4607304688942990376];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1632-1647

    params.a =
        &[14699522009175466360, 11292225231260079918, 12582817354618069472, 2778240163156501704];
    params.b =
        &[14480032510786034726, 7480003072321104223, 1473877341807557712, 2130521741231527403];
    params.c = &[4417907801686297355, 4846544247752331473, 6679274100623874803, 456596546189276312];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [17941566077044267147, 942742814844597660, 6745108453302082356, 320875111961004726];
    let expected_dl: [u64; 4] =
        [7297425682003354331, 5961782815478584844, 7750380610128238341, 2252978709107933634];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1648-1663

    params.a = &[824538892198020416, 1283184167359828537, 3302650312620060185, 1668607930946766365];
    params.b =
        &[15992270325266652171, 244875674963749358, 16263365658449982185, 1009731516739052561];
    params.c =
        &[15029516448026007800, 17584874768126114656, 15015380991638676598, 1031683227781833221];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [12049004044701019445, 475563049094645182, 2626306304469407688, 91335685594453864];
    let expected_dl: [u64; 4] =
        [7399793004524163768, 12412931489802804564, 5975542197948186163, 12225294084083706661];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1664-1679

    params.a =
        &[10915932687312257019, 14233946165038456235, 1876757076466232141, 2076699543628163449];
    params.b =
        &[16860477699524267357, 16339470532078613786, 18262037762087167615, 2278840021002137163];
    params.c = &[4444768305875197474, 1939922989497411867, 4214143816538787860, 199856975344428270];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [9133399237091422853, 8764338955411059823, 1396169034942836388, 256547497634635773];
    let expected_dl: [u64; 4] =
        [10380609131116583761, 13484704121849969925, 2893271877616049675, 2329960432030967557];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1680-1695

    params.a =
        &[16309166084141857452, 9809239868572571135, 17798590001567589395, 392134240976170952];
    params.b =
        &[5621663831382770427, 17130837217801050487, 15171331323744008816, 2274912516172977562];
    params.c =
        &[6330576003640702598, 10187177508499355552, 2162002880016689336, 1701055434502454977];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [1695030648842173568, 2557875980344829879, 17536610177559952956, 48359270842168222];
    let expected_dl: [u64; 4] =
        [857299831180105002, 17185712846273419885, 12702389114230039187, 11635640292219264917];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1696-1711

    params.a =
        &[14533180969308295304, 15121196567945333062, 4122092302346196175, 22116339228426949];
    params.b =
        &[16483324805901717203, 18393952827148097689, 8231368508345815366, 1607401212644271174];
    params.c =
        &[8463282738341103067, 2967457933044332033, 4676291696582175467, 3288997381478435379];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [13935278472984479548, 21581279228334666, 8415675991825411096, 1927160172709906];
    let expected_dl: [u64; 4] =
        [4011259815493162483, 9569014989288692352, 5432734981949033185, 12346885909656755315];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1712-1727

    params.a =
        &[1552441276585533365, 14380987881094484584, 17148433926179488449, 3103348277562900476];
    params.b =
        &[3607635386551753131, 12073442209700630885, 1210144169000380915, 3445928647902604400];
    params.c =
        &[8577567489996952073, 1415993803136667909, 5856414073842050221, 2600260715055878473];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [3798051534132069030, 9201456459030708830, 6533660738218263030, 579718387773062795];
    let expected_dl: [u64; 4] =
        [12447936204358937840, 16589259119206248492, 11274326848600662637, 6981364893452544481];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1728-1743

    params.a =
        &[14085307310069053384, 1313323579751204585, 2230069526089941229, 1318948901456383028];
    params.b =
        &[15746949163550439651, 11469107117602407345, 4268298800428165798, 1491530148446061347];
    params.c =
        &[2439604640165946174, 8802471795462665784, 16196845910038099790, 2650363650529992213];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [3534637649847741171, 7299526022291431728, 6034446249566918840, 106644947364220876];
    let expected_dl: [u64; 4] =
        [256349604355889558, 3220143636565549075, 13775613494325210539, 9124052010478233060];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1744-1759

    params.a =
        &[7894415325517401629, 6208933359299202927, 5310537751821163315, 3347590468685507572];
    params.b =
        &[18167574372806497787, 3382742257014476574, 14102026903974844419, 3249677631575321162];
    params.c =
        &[6550702927005300678, 5200508652508272258, 14628177090059000521, 818099213527558581];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [8524318219397626410, 17032758725496279318, 13996088335842411883, 589729538301899767];
    let expected_dl: [u64; 4] =
        [18413696389611138869, 5850738641225425712, 13835927216744258706, 4072188601118047154];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1760-1775

    params.a =
        &[13981651947569222700, 3540900621375102018, 13287653658183285971, 1243049703052596388];
    params.b =
        &[4522079574557097203, 15223085964013319536, 4163384081032712963, 1897124140102238721];
    params.c =
        &[8484639459381010211, 7011310773972233473, 16158615368361125457, 1177999319848184147];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [3811536305311278330, 4051355591301262293, 15830684234031590970, 127839340622118441];
    let expected_dl: [u64; 4] =
        [16698190416501298407, 11790156726582432063, 8992685523755047723, 9598396682485581277];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    // arith256 test rows: 1776-1791

    params.a =
        &[13970229013151504741, 8476296752562947313, 11810450538887363942, 511990551865481398];
    params.b =
        &[11990850244716481796, 14558188671963395327, 9424388055416098482, 1459171711273467932];
    params.c =
        &[16528603495754341937, 8893271371239080203, 9406449307822347647, 250213327518958686];
    syscall_arith256(&mut params);
    let expected_dh: [u64; 4] =
        [4910774022637574197, 12870152955407492665, 17746475360205808972, 40499403403452059];
    let expected_dl: [u64; 4] =
        [3242244678432810181, 2099669192879440901, 14496343886419199978, 10002311647969911313];
    assert_eq!(params.dh, &expected_dh);
    assert_eq!(params.dl, &expected_dl);

    let mut a: [u64; 4] = [0, 0, 0, 0];
    let mut b: [u64; 4] = [0, 0, 0, 0];
    let mut c: [u64; 4] = [0, 0, 0, 0];
    let mut module: [u64; 4] = [0, 0, 0, 0];
    let mut d: [u64; 4] = [0, 0, 0, 0];

    let mut params = SyscallArith256ModParams {
        a: &mut a,
        b: &mut b,
        c: &mut c,
        module: &mut module,
        d: &mut d,
    };

    // arith256_mod test rows: 1792-1807

    params.a = &[0, 0, 0, 0];
    params.b = &[0, 0, 0, 0];
    params.c = &[0, 0, 0, 0];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1808-1823

    params.a = &[1, 0, 0, 0];
    params.b = &[0, 0, 0, 0];
    params.c = &[0, 0, 0, 0];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1824-1839

    params.a = &[0, 0, 0, 0];
    params.b = &[1, 0, 0, 0];
    params.c = &[0, 0, 0, 0];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1840-1855

    params.a = &[0, 0, 0, 0];
    params.b = &[0, 0, 0, 0];
    params.c = &[1, 0, 0, 0];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1856-1871

    params.a =
        &[9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371];
    params.b =
        &[13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604];
    params.c =
        &[4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1872-1887

    params.a =
        &[18322129971448504228, 1931565055368554727, 4329275120939973020, 12978697249981708710];
    params.b =
        &[280285223898405502, 11284537880113667004, 1081332520087288237, 13072869521125875881];
    params.c =
        &[10747199766730330840, 7794942346027476440, 9925182310152147232, 2506352177963258844];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1888-1903

    params.a =
        &[3601750688034868637, 11098567879892209091, 7853054493001661040, 13127796090247981965];
    params.b = &[6450262964717846419, 6206609616313831266, 9102905784272360915, 34732001983190336];
    params.c =
        &[13756415383517927123, 5969167424200594595, 11472493900790927461, 10161930015752951061];
    params.module = &[1, 0, 0, 0];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1904-1919

    params.a =
        &[9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371];
    params.b =
        &[13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604];
    params.c =
        &[4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478];
    params.module =
        &[16619467820888189833, 10877150673258265262, 10728815452881265760, 216848425711951146];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [6969085588596054193, 17294800763519702586, 2297270722269116445, 64363319618284025];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1920-1935

    params.a =
        &[18183646675237997858, 5913221654135725266, 17004692625211814591, 3035855206098274375];
    params.b =
        &[3815866324375555432, 14662508343725318569, 12256559516963360580, 3331835286132085115];
    params.c =
        &[10680278636993256106, 4812199420528396217, 9545827554963751537, 1694214479444147175];
    params.module =
        &[14290265255325312041, 3221449844989985051, 14117926452509689807, 1705773849242759208];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [14724416497411134620, 15447058202389846889, 17464262260375210745, 1102516654797031963];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1936-1951

    params.a =
        &[14699522009175466360, 11292225231260079918, 12582817354618069472, 2778240163156501704];
    params.b =
        &[14480032510786034726, 7480003072321104223, 1473877341807557712, 2130521741231527403];
    params.c = &[4417907801686297355, 4846544247752331473, 6679274100623874803, 456596546189276312];
    params.module =
        &[17554725009932780152, 4603450452032535347, 15021622684256251808, 2789050017287097416];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [5139371364774813843, 4123843497394979153, 5587963375085951119, 1601387994715989365];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1952-1967

    params.a = &[824538892198020416, 1283184167359828537, 3302650312620060185, 1668607930946766365];
    params.b =
        &[15992270325266652171, 244875674963749358, 16263365658449982185, 1009731516739052561];
    params.c =
        &[15029516448026007800, 17584874768126114656, 15015380991638676598, 1031683227781833221];
    params.module =
        &[16986943764165354890, 14412505814284476410, 16592960690212983967, 972386731777229000];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [2328234509455951846, 3625611611412616383, 12246451855854867035, 339551502582366576];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1968-1983

    params.a =
        &[10915932687312257019, 14233946165038456235, 1876757076466232141, 2076699543628163449];
    params.b =
        &[16860477699524267357, 16339470532078613786, 18262037762087167615, 2278840021002137163];
    params.c = &[4444768305875197474, 1939922989497411867, 4214143816538787860, 199856975344428270];
    params.module =
        &[15690993799012359266, 13925548266012435130, 3272366628288741674, 3483440725996556673];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [17044858325470885851, 17884162890535599815, 11834017901293318921, 3036567093482370445];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 1984-1999

    params.a =
        &[16309166084141857452, 9809239868572571135, 17798590001567589395, 392134240976170952];
    params.b =
        &[5621663831382770427, 17130837217801050487, 15171331323744008816, 2274912516172977562];
    params.c =
        &[6330576003640702598, 10187177508499355552, 2162002880016689336, 1701055434502454977];
    params.module =
        &[6042457498590366555, 3929315885146284526, 11720228675087261929, 960276666354821767];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [14410141474911749754, 17019551091793440719, 9841036973109907299, 270889429155754241];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2000-2015

    params.a =
        &[14533180969308295304, 15121196567945333062, 4122092302346196175, 22116339228426949];
    params.b =
        &[16483324805901717203, 18393952827148097689, 8231368508345815366, 1607401212644271174];
    params.c =
        &[8463282738341103067, 2967457933044332033, 4676291696582175467, 3288997381478435379];
    params.module =
        &[14517856955707246743, 6909717146772162154, 4225348332245104118, 251109779456144592];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [4763933176239486312, 5800120547297740758, 18415418338610646318, 66468322114194979];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2016-2031

    params.a =
        &[1552441276585533365, 14380987881094484584, 17148433926179488449, 3103348277562900476];
    params.b =
        &[3607635386551753131, 12073442209700630885, 1210144169000380915, 3445928647902604400];
    params.c =
        &[8577567489996952073, 1415993803136667909, 5856414073842050221, 2600260715055878473];
    params.module =
        &[6213571909784689117, 6086935747297776195, 589455143744304937, 1339041837956071838];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [10687539600612385234, 13529445508220421442, 17401340882628433339, 689568644776373272];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2032-2047

    params.a =
        &[14085307310069053384, 1313323579751204585, 2230069526089941229, 1318948901456383028];
    params.b =
        &[15746949163550439651, 11469107117602407345, 4268298800428165798, 1491530148446061347];
    params.c =
        &[2439604640165946174, 8802471795462665784, 16196845910038099790, 2650363650529992213];
    params.module =
        &[3592895757868207738, 11105631678955540198, 9197205780301054125, 3418225828951993858];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [6745622268140103172, 5912865753703323101, 7312459677893958849, 1903135534741160267];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2048-2063

    params.a =
        &[7894415325517401629, 6208933359299202927, 5310537751821163315, 3347590468685507572];
    params.b =
        &[18167574372806497787, 3382742257014476574, 14102026903974844419, 3249677631575321162];
    params.c =
        &[6550702927005300678, 5200508652508272258, 14628177090059000521, 818099213527558581];
    params.module =
        &[7054306415440348267, 14567819963952156007, 4465768169752394732, 1228538945855076105];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [10966464611923472817, 4021213191024813726, 2457113499103756917, 870595216135483619];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2064-2079

    params.a =
        &[13981651947569222700, 3540900621375102018, 13287653658183285971, 1243049703052596388];
    params.b =
        &[4522079574557097203, 15223085964013319536, 4163384081032712963, 1897124140102238721];
    params.c =
        &[8484639459381010211, 7011310773972233473, 16158615368361125457, 1177999319848184147];
    params.module =
        &[7304236200783344061, 5292418479036885921, 6694470597827982082, 916507037960048990];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [12228301495889953910, 10774745575034942662, 6018576667479930433, 427975101709100386];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2080-2095

    params.a =
        &[13970229013151504741, 8476296752562947313, 11810450538887363942, 511990551865481398];
    params.b =
        &[11990850244716481796, 14558188671963395327, 9424388055416098482, 1459171711273467932];
    params.c =
        &[16528603495754341937, 8893271371239080203, 9406449307822347647, 250213327518958686];
    params.module =
        &[17875918351627132749, 3264646250175604994, 4721293699900829255, 482440734473027493];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [6554798537177776941, 1991947186318904955, 10029122483581743702, 201825843517986662];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2096-2111

    params.a = &[0, 0, 0, 0];
    params.b =
        &[5641043740449624970, 17935565655897260830, 10919558233487242038, 3259728400919159662];
    params.c =
        &[2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554];
    params.module =
        &[2760980708294393707, 372860918073165892, 9122612075875888799, 219633912322601253];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [6684279249143303223, 1124425694883114464, 14162876425333976385, 15844759273387286];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2112-2127

    params.a =
        &[14543826280514596025, 9925309151025471942, 15693957349391226432, 1303992629676031264];
    params.b = &[0, 0, 0, 0];
    params.c =
        &[8758098300086079933, 8458090185970427871, 5608800379645947347, 3254741872956128470];
    params.module =
        &[17860359904402995876, 210711486840455477, 13545863734865992770, 478428012731885078];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [12276403315925414373, 7193821264927695003, 16567338338997748807, 384173796564817997];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2128-2143

    params.a =
        &[16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504];
    params.b =
        &[7203210682968997592, 1683754083127282338, 5544086711222400467, 2169034962190395798];
    params.c = &[0, 0, 0, 0];
    params.module =
        &[8023954341856169226, 7388703250239832174, 14581628861610779812, 1463541573151624535];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] =
        [10766147760862618552, 17068920724662870862, 9174344223129520445, 62162162692712926];
    assert_eq!(params.d, &expected_d);

    // arith256_mod test rows: 2144-2159

    params.a =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    params.b =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    params.c =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    params.module =
        &[4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665];
    syscall_arith256_mod(&mut params);
    let expected_d: [u64; 4] = [0, 0, 0, 0];
    assert_eq!(params.d, &expected_d);

    let mut params = SyscallBn254CurveAddParams { p1: &mut p1, p2: &p2 };
    // bn254_curve_add test rows: 2160-2175

    let mut p1 = SyscallPoint256 {
        x: [136421207046694529, 11580962506345346338, 15045721281068118004, 1910168462334480628],
        y: [2069880773141906408, 3649825404379682499, 10801511224640664032, 2330817072853753920],
    };
    let p2 = SyscallPoint256 {
        x: [2133523020497556758, 14733549296897507656, 15468364035426577274, 2123014373763398227],
        y: [15049836288745330173, 8795076105344891771, 12865189604260467652, 1527750621661879953],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [12541044391030193619, 16411833633080722648, 6219634386058607483, 2807518484600989269],
        y: [4053535436916716034, 817072964997249589, 7358859730546624038, 3254678688946667385],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2176-2191

    let mut p1 = SyscallPoint256 {
        x: [14032305933869867633, 9498427857577218255, 17025053772983406230, 1810025498305355698],
        y: [6638371163938426880, 13793107905154293171, 18197282389652694744, 1147912865408077293],
    };
    let p2 = SyscallPoint256 {
        x: [10067246450197445536, 4015154726906101922, 14737761653438415152, 2412389853439793659],
        y: [3268522452073386547, 13109914509961628332, 10592520965871805456, 2621469115456485841],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [9162497766846339242, 7148892007007653543, 17025628240951950355, 1258712913762089509],
        y: [1639695979112720534, 11112515231299045924, 8766069288333094891, 1562391528700554328],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2192-2207

    let mut p1 = SyscallPoint256 {
        x: [1729097349008212333, 5867408082516145206, 11997434802196686048, 2037571654367798046],
        y: [18025681993342317303, 17861846547834775759, 11751957001397522898, 1536236073118116023],
    };
    let p2 = SyscallPoint256 {
        x: [2126945495814237851, 2741222541289861821, 16661493764304077760, 112157748232547108],
        y: [15534310077994536189, 8322535670575553828, 2124005179395394300, 1322657064725676069],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [17390251598831943460, 5573992617463629526, 16958926037133361761, 2890293950891946619],
        y: [13064623766317807775, 7995185467926072946, 6655640817961539055, 3218528231751514479],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2208-2223

    let mut p1 = SyscallPoint256 {
        x: [7103153090501987613, 16395629468827439604, 15589517216987209300, 2977265366807226392],
        y: [17724926075245342326, 7197175621924126023, 8623421472085409870, 3250542558428371998],
    };
    let p2 = SyscallPoint256 {
        x: [6335118184882910552, 14112740015582311319, 118285272384200625, 1950029000669704765],
        y: [16079599549419502535, 18279077277919913532, 9414712250447933571, 2527911835974468347],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [9146997136928750984, 4653803619774932347, 8707966285890329556, 1733345261267306798],
        y: [155981336317978689, 10843301756093748508, 11596133235167993340, 2253207070539405202],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2224-2239

    let mut p1 = SyscallPoint256 {
        x: [5042551283629501982, 9098827109791554429, 3877335541049799662, 1495314379429267192],
        y: [1237164267775934060, 15440107231156592067, 1440003007629195621, 2331818089787692166],
    };
    let p2 = SyscallPoint256 {
        x: [3593636384556206298, 2204347309174112349, 15478463248482116686, 2751568283451721275],
        y: [14463161128550353319, 9104596725513128612, 5375951496123583879, 3346053994694149423],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1011572927635872872, 335543691249083198, 10190331521592434749, 1014378544010189531],
        y: [3738933338756733376, 3176186415712995344, 8465617633691082377, 1083621176788547981],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2240-2255

    let mut p1 = SyscallPoint256 {
        x: [9116092690944463720, 17501883535858711204, 1982770219207597088, 1413643580259598594],
        y: [15219861118526282271, 10549034698057911894, 2401241823570592914, 1563367210829521638],
    };
    let p2 = SyscallPoint256 {
        x: [10600761993326003836, 10791777326623310323, 12016520397940900012, 1263593984382251969],
        y: [3984540930278729671, 17940209602895127483, 3568616630407348, 306752131529951634],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8675193157521607812, 2654170217823062848, 14840830741347589345, 2748907656049002688],
        y: [1583541833850142796, 2005835802146142825, 2581419127503931828, 2319401025455588474],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2256-2271

    let mut p1 = SyscallPoint256 {
        x: [16458898882940603825, 1090049237948012308, 3514239332132672661, 2912058909291996784],
        y: [10669416399910448355, 9340300227388611652, 9349903450626044019, 1479177365200878182],
    };
    let p2 = SyscallPoint256 {
        x: [5221042818911006861, 7324920964252381577, 1052414550332830282, 3429739222930938216],
        y: [14740823531673045410, 17476912973648885000, 12025634059669269901, 2734819145780168629],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [6576858153451927412, 16215252353898404542, 16625426446301342934, 1721239489123618143],
        y: [9826016768056827621, 215298992312024795, 1374206023063047301, 2334767615075778715],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2272-2287

    let mut p1 = SyscallPoint256 {
        x: [9426429320604972655, 6664135994160145395, 1242463247163314523, 1209609508562861045],
        y: [9353808696079110496, 11628915309956872698, 13413694616250023186, 1485301098164398230],
    };
    let p2 = SyscallPoint256 {
        x: [9447067173224302319, 7091081279095888322, 8383405770867814056, 144968304166016106],
        y: [11981660203311179066, 3118757259639723967, 13888189168070967953, 2743277973433134800],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [14623940981137844047, 8337668033535330077, 4583782627259144748, 1655332839327331225],
        y: [12851283414261229103, 4240879911450987351, 2748540788028768871, 2380605686026649665],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2288-2303

    let mut p1 = SyscallPoint256 {
        x: [12887285387485578998, 16930711087741954386, 2961310383821261513, 521940065233512776],
        y: [7818397435023207885, 8452876838205044297, 6664448290597623841, 830841879672115031],
    };
    let p2 = SyscallPoint256 {
        x: [14456102252930446407, 5363648689824182112, 14092348397230844221, 251908710464502990],
        y: [14673581160375642647, 5760595908617067855, 15138877736343891786, 3011577770074605792],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [14949506964549588896, 16714562270036241365, 13263526777754172188, 38472124009772432],
        y: [14516352048407724334, 12129404545546990368, 6175346048741530276, 2531522152591778174],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2304-2319

    let mut p1 = SyscallPoint256 {
        x: [9986153622399502006, 8695049810162732943, 11113081449277494422, 2850876012622768797],
        y: [18172075822145644311, 3588558502053459953, 14179298248657266912, 1364492022358379171],
    };
    let p2 = SyscallPoint256 {
        x: [17030961368186640897, 3000010308829572317, 13161705877690475162, 2133639159347392985],
        y: [11045727285021901830, 8423041171021035348, 11394350450378430782, 366821010944834953],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [3349497437855587161, 2658474580477314782, 12810846578154505098, 594616661911362889],
        y: [8262355988922475946, 1765936188007418423, 2069455719949205983, 1731449954968223729],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2320-2335

    let mut p1 = SyscallPoint256 {
        x: [16068467053958200571, 14000033459877307772, 15678299828185440346, 2405705603235917503],
        y: [7103811975376036784, 13792340381860555670, 12907959132183089728, 2733833021427000329],
    };
    let p2 = SyscallPoint256 {
        x: [16003329087005584745, 1367016322579775075, 17321817307132895990, 2099194762580763582],
        y: [2858839762055914409, 2727294882380527952, 4873202373367173333, 2302788396252925041],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8777053376839715963, 6730928363875890938, 4823036058475416210, 3045776927643215873],
        y: [2104275866206935630, 9831192761962224937, 114757674106015052, 2778416939358228283],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2336-2351

    let mut p1 = SyscallPoint256 {
        x: [16032276844660526296, 14008732083320528740, 6579768766599417307, 2614423009001920652],
        y: [16246497347026745435, 2795759423010462441, 17605727431321556257, 2768528718744074772],
    };
    let p2 = SyscallPoint256 {
        x: [13066116803950007327, 5497142431904762446, 3435212204578038129, 2437355106532889217],
        y: [8236377490561268780, 13150702675247412498, 18117019769925410273, 2586906691867320409],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [2025901749886931977, 425329922497200863, 15681670252208907753, 2479464780460318495],
        y: [11787946264151954153, 2050708597481230373, 8222445419132203059, 482746845714008840],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2352-2367

    let mut p1 = SyscallPoint256 {
        x: [11052244829818642235, 12668693133952007894, 1296638867959740840, 1652791037107421004],
        y: [12931225715483189984, 16746426474997829702, 12517971416952285579, 2177803429284681263],
    };
    let p2 = SyscallPoint256 {
        x: [10451133715650547144, 13727214479560066733, 13204975961249648620, 3117389249458635646],
        y: [16269171191104760163, 13303452073674701375, 14138015394503456319, 2079030115455412731],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [8644571173112732148, 4622478696682485817, 6400934551926538587, 3030732388943818402],
        y: [5677292641217951576, 8955446743047908305, 4774999867768688522, 2938872543099126691],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2368-2383

    let mut p1 = SyscallPoint256 {
        x: [12926337569739115720, 18369244042231480866, 7199674158569028189, 629382597256567315],
        y: [15480380107477629255, 14462198685675367686, 17109741300224796188, 1575874721648541986],
    };
    let p2 = SyscallPoint256 {
        x: [16721509371926746823, 14931271742266400684, 8639674276518665066, 376222935965499664],
        y: [10342749841335782157, 2626710268725771846, 686654063333589881, 2429030890852100800],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [3170976499745427376, 4435677914649643808, 8495645934859004723, 3179111914628294846],
        y: [18210272879216275576, 15956950282605968252, 12566151727072776061, 1344272916529662310],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_add test rows: 2384-2399

    let mut p1 = SyscallPoint256 {
        x: [1937747923122538908, 1973324843328483090, 18142721628580188222, 2340501145950218557],
        y: [4703919470647230067, 10779413178007862371, 11339051302474013312, 1212824066902237910],
    };
    let p2 = SyscallPoint256 {
        x: [13514185463848566744, 16303451592415587669, 11454991405554316314, 2074786116747213803],
        y: [6215561102844887725, 9765353320242779493, 12761554255656424377, 3362982526011321696],
    };
    params.p1 = &mut p1;
    params.p2 = &p2;
    syscall_bn254_curve_add(&mut params);
    let p3 = SyscallPoint256 {
        x: [1988899826776024073, 6263940785541754410, 12804075266116178733, 824066112053521922],
        y: [6523803231338234751, 17167368501758989829, 13151069636843539260, 2060995759643982023],
    };
    assert_eq!(params.p1.x, p3.x);
    assert_eq!(params.p1.y, p3.y);

    // bn254_curve_dbl test rows: 2400-2415

    let mut p1 = SyscallPoint256 {
        x: [2973253715786760732, 8957458960778036024, 6600871244942108885, 3395737379058558924],
        y: [4392230418324009663, 15894107491113890022, 17544861834956655362, 1975449426606873387],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [13579162267802329004, 8400118881432133322, 16501799921375299183, 515806700569267367],
        y: [15577354893667875031, 13686997197935726975, 11913685884420866357, 2755474458789950601],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2416-2431

    let mut p1 = SyscallPoint256 {
        x: [466558952353936437, 15776321311946329581, 16676479768452871650, 3158029796715456879],
        y: [451857229953296464, 2286071045784985245, 10469843473648670917, 3386929897029099288],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1444076991615535864, 4007629647716678853, 9775135502551639941, 1015210763670569166],
        y: [16470200770811193428, 12249622095020734367, 10862233287287514499, 3322816692763020964],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2432-2447

    let mut p1 = SyscallPoint256 {
        x: [18244161654603702032, 5425825200936987837, 175277047442999828, 1507295215590018202],
        y: [7587167199285532959, 11412121055934119212, 13392813158387261776, 1379139579479746398],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [9649625230492309259, 4259087554689622478, 15964892050738273623, 612548851984988383],
        y: [2487507157561047257, 5116768584946657594, 6694142314031220201, 719454577136123513],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2448-2463

    let mut p1 = SyscallPoint256 {
        x: [17669022402617184397, 5209507611413536192, 1843782295254024969, 859115421570468114],
        y: [18118438105331949148, 470806797267869636, 1230242989845094728, 518831476204271015],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [8955520867202922051, 11281858165879155002, 12523215036875299904, 227033172911778833],
        y: [15349691289203267827, 9501443908779048535, 10311507353512715064, 267938451108782764],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2464-2479

    let mut p1 = SyscallPoint256 {
        x: [4270386339521394353, 10466423505332527404, 16355285925382911740, 838895242390116328],
        y: [17937551459873285115, 1677093624780219483, 3266601617215521887, 1121011437693420174],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1184291857964957837, 8714676347049502817, 14452991746956334663, 524261146238079686],
        y: [13236521403913501868, 4809254225257383405, 12775598836962034961, 2229832129487851753],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2480-2495

    let mut p1 = SyscallPoint256 {
        x: [15854427591445058513, 736155668191151480, 3802522833797165547, 25813298347967139],
        y: [11820495643089594471, 11373557967537483628, 4098557169417834674, 2745172105221403841],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [4983271152563837186, 17062070446834085391, 7993947405464830498, 1485147227845742434],
        y: [7453640341241161485, 15807889270692625401, 17997721697433161365, 2725384878812907887],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2496-2511

    let mut p1 = SyscallPoint256 {
        x: [6715422073207144971, 1795856110543142414, 1855942553495072856, 2180424335926088285],
        y: [10965573859985023012, 16215678377382286771, 7422161024457084639, 1972519222392715500],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [1590144765506176380, 6760386668714735454, 8102992589454630565, 2313294421151835326],
        y: [5298795089251379707, 1596236029029100616, 8288876494332499402, 3092631540678381981],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2512-2527

    let mut p1 = SyscallPoint256 {
        x: [7182908352790325918, 1647605780884394596, 7940071073993604711, 883922140090564750],
        y: [10309057419581850851, 13306115010458460289, 11762746997805207259, 2286387498270410519],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [9311906531250817911, 15734338046559985216, 15738572957873562994, 3346006387072307191],
        y: [1661071121432847938, 17446773090151260373, 8771799380882114594, 770964512851852260],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2528-2543

    let mut p1 = SyscallPoint256 {
        x: [12925925090896520377, 6654205315158408550, 16408893888490671050, 420583302104738107],
        y: [16242098476677854559, 3083346988979281844, 6565979508886510518, 2400998761885936634],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [2336437301190187243, 6091662243852304358, 9271067100922870770, 2185952553286110966],
        y: [18274516110081036421, 9372052403470777645, 9261903915074581288, 724389382631930958],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2544-2559

    let mut p1 = SyscallPoint256 {
        x: [14799842676309061429, 13908060759642015740, 5222692408506960236, 1763761250409391673],
        y: [5498072717710077042, 13427934482652588180, 16697597582401517061, 3088780726377118894],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [6199683524210436034, 6385092654427225753, 10604236120448466789, 2459237164414346368],
        y: [12987925432983306437, 12931388864098467928, 17807075740898010343, 943707147332083463],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2560-2575

    let mut p1 = SyscallPoint256 {
        x: [6997706357129618733, 13768248249926056388, 12789537670567414583, 3094941386580460184],
        y: [10703403729533138608, 11269133980072723369, 14416708628816728788, 788259195434776358],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [3942047847987215512, 10668505255803466621, 3590684563780241044, 1317324026180301670],
        y: [4854814707145279503, 255634651475395492, 6541731221002096077, 1464902910643925507],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2576-2591

    let mut p1 = SyscallPoint256 {
        x: [12998215823271800957, 17469880633379109536, 3307177212842959880, 2734211140364181454],
        y: [4289686915942664267, 7944968869834224949, 4916967433604202791, 984417339209723088],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [17342241404422097732, 12846276262649581995, 2473176533819870889, 3352349296121084976],
        y: [2443120067100224681, 14678301556802809122, 552622445678280548, 411774718166903777],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2592-2607

    let mut p1 = SyscallPoint256 {
        x: [11168290218284672317, 13055848893554033058, 10518703377429073633, 2684346615852449868],
        y: [7733001340066649010, 926044126095071057, 9231791107232793893, 511811551928461334],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [16693839976173329346, 3828867815863476429, 12592405986810716410, 2075558889222485695],
        y: [14099722790415076967, 3328563156155568143, 7030865973422196624, 95745516966863370],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2608-2623

    let mut p1 = SyscallPoint256 {
        x: [10236753742504416338, 680445124966543322, 3216067664632535286, 2610643584372777288],
        y: [9324457126502011639, 16864621721101349628, 4535953130578646074, 594435440225118415],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [14023501282317679404, 5990376372979554964, 3582158079161249149, 3034359651477805570],
        y: [16105516347158502672, 14620453763320391083, 5174543312561582539, 1108711523244910526],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    // bn254_curve_dbl test rows: 2624-2639

    let mut p1 = SyscallPoint256 {
        x: [12493447835972542528, 13188422351013697901, 16114864060047456162, 162574568017230268],
        y: [9272304904258690271, 6760237032834658942, 3603577630588605141, 1176692479148410544],
    };
    syscall_bn254_curve_dbl(&mut p1);
    let p3 = SyscallPoint256 {
        x: [15160040376694794067, 12003148044313189826, 18438304264779973344, 77745216204838149],
        y: [5906181427586509466, 13809883834763246589, 8447866917983781356, 1777471803573943266],
    };
    assert_eq!(&p1.x, &p3.x);
    assert_eq!(&p1.y, &p3.y);

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let mut params = SyscallBn254ComplexAddParams { f1: &mut f1, f2: &f2 };
    // bn254_complex_add test rows: 2640-2655

    let mut f1 = SyscallComplex256 {
        x: [9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371],
        y: [13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604],
    };
    let f2 = SyscallComplex256 {
        x: [4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478],
        y: [16619467820888189833, 10877150673258265262, 10728815452881265760, 216848425711951146],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [14436228273639006041, 3963118080414487867, 16547414090240622858, 735172603631677849],
        y: [11356663794971335933, 2431378742414251844, 769010105068356826, 2624302918845444751],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2656-2671

    let mut f1 = SyscallComplex256 {
        x: [18183646675237997858, 5913221654135725266, 17004692625211814591, 3035855206098274375],
        y: [3815866324375555432, 14662508343725318569, 12256559516963360580, 3331835286132085115],
    };
    let f2 = SyscallComplex256 {
        x: [10680278636993256106, 4812199420528396217, 9545827554963751537, 1694214479444147175],
        y: [14290265255325312041, 3221449844989985051, 14117926452509689807, 1705773849242759208],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [6084564367242046085, 18255041003895790079, 13269328228900871378, 1243071418739450885],
        y: [13773514708421211210, 6966834044237420599, 13093294018198355638, 1550610868571873658],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2672-2687

    let mut f1 = SyscallComplex256 {
        x: [14699522009175466360, 11292225231260079918, 12582817354618069472, 2778240163156501704],
        y: [14480032510786034726, 7480003072321104223, 1473877341807557712, 2130521741231527403],
    };
    let f2 = SyscallComplex256 {
        x: [4417907801686297355, 4846544247752331473, 6679274100623874803, 456596546189276312],
        y: [17554725009932780152, 4603450452032535347, 15021622684256251808, 2789050017287097416],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [670685737152212099, 16138769479012411392, 815347381532392659, 3234836709345778017],
        y: [9255396575729606999, 1166329379875756550, 3214308074789114771, 1432573491715654154],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2688-2703

    let mut f1 = SyscallComplex256 {
        x: [824538892198020416, 1283184167359828537, 3302650312620060185, 1668607930946766365],
        y: [15992270325266652171, 244875674963749358, 16263365658449982185, 1009731516739052561],
    };
    let f2 = SyscallComplex256 {
        x: [15029516448026007800, 17584874768126114656, 15015380991638676598, 1031683227781833221],
        y: [16986943764165354890, 14412505814284476410, 16592960690212983967, 972386731777229000],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [15854055340224028216, 421314861776391577, 18318031304258736784, 2700291158728599586],
        y: [14532470015722455445, 14657381489248225769, 14409582274953414536, 1982118248516281562],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2704-2719

    let mut f1 = SyscallComplex256 {
        x: [10915932687312257019, 14233946165038456235, 1876757076466232141, 2076699543628163449],
        y: [16860477699524267357, 16339470532078613786, 18262037762087167615, 2278840021002137163],
    };
    let f2 = SyscallComplex256 {
        x: [4444768305875197474, 1939922989497411867, 4214143816538787860, 199856975344428270],
        y: [15690993799012359266, 13925548266012435130, 3272366628288741674, 3483440725996556673],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [15360700993187454493, 16173869154535868102, 6090900893005020001, 2276556518972591719],
        y: [9772110553547418744, 901150579903614280, 8253212439101214541, 2275282480195723171],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2720-2735

    let mut f1 = SyscallComplex256 {
        x: [16309166084141857452, 9809239868572571135, 17798590001567589395, 392134240976170952],
        y: [5621663831382770427, 17130837217801050487, 15171331323744008816, 2274912516172977562],
    };
    let f2 = SyscallComplex256 {
        x: [6330576003640702598, 10187177508499355552, 2162002880016689336, 1701055434502454977],
        y: [6042457498590366555, 3929315885146284526, 11720228675087261929, 960276666354821767],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [4192998014073008434, 1549673303362375072, 1513848807874727116, 2093189675478625930],
        y: [11664121329973136982, 2613409029237783397, 8444815925121719130, 3235189182527799330],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2736-2751

    let mut f1 = SyscallComplex256 {
        x: [14533180969308295304, 15121196567945333062, 4122092302346196175, 22116339228426949],
        y: [16483324805901717203, 18393952827148097689, 8231368508345815366, 1607401212644271174],
    };
    let f2 = SyscallComplex256 {
        x: [8463282738341103067, 2967457933044332033, 4676291696582175467, 3288997381478435379],
        y: [14517856955707246743, 6909717146772162154, 4225348332245104118, 251109779456144592],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [4549719633939846755, 18088654500989665096, 8798383998928371642, 3311113720706862328],
        y: [12554437687899412330, 6856925900210708228, 12456716840590919485, 1858510992100415766],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2752-2767

    let mut f1 = SyscallComplex256 {
        x: [1552441276585533365, 14380987881094484584, 17148433926179488449, 3103348277562900476],
        y: [3607635386551753131, 12073442209700630885, 1210144169000380915, 3445928647902604400],
    };
    let f2 = SyscallComplex256 {
        x: [8577567489996952073, 1415993803136667909, 5856414073842050221, 2600260715055878473],
        y: [6213571909784689117, 6086935747297776195, 589455143744304937, 1339041837956071838],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [5797391895302829175, 4879857539753269472, 9723656048746843921, 2216610725815808284],
        y: [5488590425056785985, 7243253812520524059, 6965151435179542719, 1297972219055705572],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2768-2783

    let mut f1 = SyscallComplex256 {
        x: [14085307310069053384, 1313323579751204585, 2230069526089941229, 1318948901456383028],
        y: [15746949163550439651, 11469107117602407345, 4268298800428165798, 1491530148446061347],
    };
    let f2 = SyscallComplex256 {
        x: [2439604640165946174, 8802471795462665784, 16196845910038099790, 2650363650529992213],
        y: [3592895757868207738, 11105631678955540198, 9197205780301054125, 3418225828951993858],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [12192295078955343295, 17645415304445538964, 5145723484853346269, 482314285183404576],
        y: [15007228050138991126, 11657614652080064522, 184312629454525174, 1422757710595084540],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2784-2799

    let mut f1 = SyscallComplex256 {
        x: [7894415325517401629, 6208933359299202927, 5310537751821163315, 3347590468685507572],
        y: [18167574372806497787, 3382742257014476574, 14102026903974844419, 3249677631575321162],
    };
    let f2 = SyscallComplex256 {
        x: [6550702927005300678, 5200508652508272258, 14628177090059000521, 818099213527558581],
        y: [7054306415440348267, 14567819963952156007, 4465768169752394732, 1228538945855076105],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [10112501381243046044, 492317867329592164, 6657522890605469087, 678691415410095488],
        y: [2442519843257638175, 7033438076488749561, 5286603122452544402, 991218310627426602],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2800-2815

    let mut f1 = SyscallComplex256 {
        x: [13981651947569222700, 3540900621375102018, 13287653658183285971, 1243049703052596388],
        y: [4522079574557097203, 15223085964013319536, 4163384081032712963, 1897124140102238721],
    };
    let f2 = SyscallComplex256 {
        x: [8484639459381010211, 7011310773972233473, 16158615368361125457, 1177999319848184147],
        y: [7304236200783344061, 5292418479036885921, 6694470597827982082, 916507037960048990],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [4019547333240681295, 10552211395347335492, 10999524952834859812, 2421049022900780536],
        y: [11826315775340441264, 2068760369340653841, 10857854678860695046, 2813631178062287711],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2816-2831

    let mut f1 = SyscallComplex256 {
        x: [13970229013151504741, 8476296752562947313, 11810450538887363942, 511990551865481398],
        y: [11990850244716481796, 14558188671963395327, 9424388055416098482, 1459171711273467932],
    };
    let f2 = SyscallComplex256 {
        x: [16528603495754341937, 8893271371239080203, 9406449307822347647, 250213327518958686],
        y: [17875918351627132749, 3264646250175604994, 4721293699900829255, 482440734473027493],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [12052088435196295062, 17369568123802027517, 2770155773000159973, 762203879384440085],
        y: [11420024522634062929, 17822834922139000322, 14145681755316927737, 1941612445746495425],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2832-2847

    let mut f1 = SyscallComplex256 {
        x: [0, 0, 0, 0],
        y: [5641043740449624970, 17935565655897260830, 10919558233487242038, 3259728400919159662],
    };
    let f2 = SyscallComplex256 {
        x: [2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554],
        y: [2760980708294393707, 372860918073165892, 9122612075875888799, 219633912322601253],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554],
        y: [8402024448744018677, 18308426573970426722, 1595426235653579221, 3479362313241760916],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2848-2863

    let mut f1 = SyscallComplex256 {
        x: [14543826280514596025, 9925309151025471942, 15693957349391226432, 1303992629676031264],
        y: [0, 0, 0, 0],
    };
    let f2 = SyscallComplex256 {
        x: [8758098300086079933, 8458090185970427871, 5608800379645947347, 3254741872956128470],
        y: [17860359904402995876, 210711486840455477, 13545863734865992770, 478428012731885078],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [522563635611468079, 7466275192518016793, 8021565777762479030, 1071736235829189069],
        y: [17860359904402995876, 210711486840455477, 13545863734865992770, 478428012731885078],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2864-2879

    let mut f1 = SyscallComplex256 {
        x: [16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504],
        y: [7203210682968997592, 1683754083127282338, 5544086711222400467, 2169034962190395798],
    };
    let f2 = SyscallComplex256 {
        x: [0, 0, 0, 0],
        y: [8023954341856169226, 7388703250239832174, 14581628861610779812, 1463541573151624535],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504],
        y: [10894548153545510555, 16602077262598783107, 6844523621558485529, 145578268539049668],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2880-2895

    let mut f1 = SyscallComplex256 {
        x: [14622897380343555797, 5165855638358375151, 10634209670893898754, 3270712738274947396],
        y: [11805571479997144868, 1873240993939869089, 2536953398218471227, 2201196215210731682],
    };
    let f2 = SyscallComplex256 {
        x: [18333499169494873014, 11639475012973159166, 11629272760731921316, 2867130213923064265],
        y: [0, 0, 0, 0],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [10177035604849220932, 5888206506853651297, 8982290480351125321, 2650844685395040996],
        y: [11805571479997144868, 1873240993939869089, 2536953398218471227, 2201196215210731682],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2896-2911

    let mut f1 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    let f2 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 {
        x: [4332616871279656261, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656261, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2912-2927

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_add test rows: 2928-2943

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [1, 0, 0, 0], y: [0, 0, 0, 0] };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_add(&mut params);
    let f3 = SyscallComplex256 { x: [1, 0, 0, 0], y: [0, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    let mut params = SyscallBn254ComplexSubParams { f1: &mut f1, f2: &f2 };
    // bn254_complex_sub test rows: 2944-2959

    let mut f1 = SyscallComplex256 {
        x: [9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371],
        y: [13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604],
    };
    let f2 = SyscallComplex256 {
        x: [4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478],
        y: [16619467820888189833, 10877150673258265262, 10728815452881265760, 216848425711951146],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [5202688393769609149, 18389602538262691937, 4123204730318432062, 220399933758796892],
        y: [15011216300614059499, 17570565543316824550, 16204867346724928536, 2190606067421542457],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 2960-2975

    let mut f1 = SyscallComplex256 {
        x: [18183646675237997858, 5913221654135725266, 17004692625211814591, 3035855206098274375],
        y: [3815866324375555432, 14662508343725318569, 12256559516963360580, 3331835286132085115],
    };
    let f2 = SyscallComplex256 {
        x: [10680278636993256106, 4812199420528396217, 9545827554963751537, 1694214479444147175],
        y: [14290265255325312041, 3221449844989985051, 14117926452509689807, 1705773849242759208],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [7503368038244741752, 1101022233607329049, 7458865070248063054, 1341640726654127200],
        y: [7972345142759795007, 11441058498735333517, 16585377138163222389, 1626061436889325906],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 2976-2991

    let mut f1 = SyscallComplex256 {
        x: [14699522009175466360, 11292225231260079918, 12582817354618069472, 2778240163156501704],
        y: [14480032510786034726, 7480003072321104223, 1473877341807557712, 2130521741231527403],
    };
    let f2 = SyscallComplex256 {
        x: [4417907801686297355, 4846544247752331473, 6679274100623874803, 456596546189276312],
        y: [17554725009932780152, 4603450452032535347, 15021622684256251808, 2789050017287097416],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [10281614207489169005, 6445680983507748445, 5903543253994194669, 2321643616967225392],
        y: [1257924372132910837, 13793676764766451897, 18180190682535552269, 2828469990747400651],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 2992-3007

    let mut f1 = SyscallComplex256 {
        x: [824538892198020416, 1283184167359828537, 3302650312620060185, 1668607930946766365],
        y: [15992270325266652171, 244875674963749358, 16263365658449982185, 1009731516739052561],
    };
    let f2 = SyscallComplex256 {
        x: [15029516448026007800, 17584874768126114656, 15015380991638676598, 1031683227781833221],
        y: [16986943764165354890, 14412505814284476410, 16592960690212983967, 972386731777229000],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [4241766517881564232, 2145053472943265496, 6734013394690935202, 636924703164933143],
        y: [17452070634810848897, 4279113934388824563, 18117149041946549833, 37344784961823560],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3008-3023

    let mut f1 = SyscallComplex256 {
        x: [10915932687312257019, 14233946165038456235, 1876757076466232141, 2076699543628163449],
        y: [16860477699524267357, 16339470532078613786, 18262037762087167615, 2278840021002137163],
    };
    let f2 = SyscallComplex256 {
        x: [4444768305875197474, 1939922989497411867, 4214143816538787860, 199856975344428270],
        y: [15690993799012359266, 13925548266012435130, 3272366628288741674, 3483440725996556673],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [6471164381437059545, 12294023175541044368, 16109357333636995897, 1876842568283735178],
        y: [5502100771791564354, 13331046410544061677, 9824119011363569074, 2282397561808551156],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3024-3039

    let mut f1 = SyscallComplex256 {
        x: [16309166084141857452, 9809239868572571135, 17798590001567589395, 392134240976170952],
        y: [5621663831382770427, 17130837217801050487, 15171331323744008816, 2274912516172977562],
    };
    let f2 = SyscallComplex256 {
        x: [6330576003640702598, 10187177508499355552, 2162002880016689336, 1701055434502454977],
        y: [6042457498590366555, 3929315885146284526, 11720228675087261929, 960276666354821767],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [14311206951780811117, 10539186504551098604, 10471034999116043192, 2178077073276686641],
        y: [18025950406501955488, 13201521332654765960, 3451102648656746887, 1314635849818155795],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3040-3055

    let mut f1 = SyscallComplex256 {
        x: [14533180969308295304, 15121196567945333062, 4122092302346196175, 22116339228426949],
        y: [16483324805901717203, 18393952827148097689, 8231368508345815366, 1607401212644271174],
    };
    let f2 = SyscallComplex256 {
        x: [8463282738341103067, 2967457933044332033, 4676291696582175467, 3288997381478435379],
        y: [14517856955707246743, 6909717146772162154, 4225348332245104118, 251109779456144592],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [10402515102246848500, 4624118705669332434, 12726992557038715458, 220117224552962235],
        y: [1965467850194470460, 11484235680375935535, 4006020176100711248, 1356291433188126582],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3056-3071

    let mut f1 = SyscallComplex256 {
        x: [1552441276585533365, 14380987881094484584, 17148433926179488449, 3103348277562900476],
        y: [3607635386551753131, 12073442209700630885, 1210144169000380915, 3445928647902604400],
    };
    let f2 = SyscallComplex256 {
        x: [8577567489996952073, 1415993803136667909, 5856414073842050221, 2600260715055878473],
        y: [6213571909784689117, 6086935747297776195, 589455143744304937, 1339041837956071838],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [11421617860298132908, 12964994077957816674, 11292019852337438228, 503087562507022003],
        y: [15840807550476615630, 5986506462402854689, 620689025256075978, 2106886809946532562],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3072-3087

    let mut f1 = SyscallComplex256 {
        x: [14085307310069053384, 1313323579751204585, 2230069526089941229, 1318948901456383028],
        y: [15746949163550439651, 11469107117602407345, 4268298800428165798, 1491530148446061347],
    };
    let f2 = SyscallComplex256 {
        x: [2439604640165946174, 8802471795462665784, 16196845910038099790, 2650363650529992213],
        y: [3592895757868207738, 11105631678955540198, 9197205780301054125, 3418225828951993858],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [15978319541182763473, 3427975928766421822, 17761159641036087804, 2155583517729361479],
        y: [16486670276961888176, 11280599583124750168, 8352284971401806422, 1560302586297038154],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3088-3103

    let mut f1 = SyscallComplex256 {
        x: [7894415325517401629, 6208933359299202927, 5310537751821163315, 3347590468685507572],
        y: [18167574372806497787, 3382742257014476574, 14102026903974844419, 3249677631575321162],
    };
    let f2 = SyscallComplex256 {
        x: [6550702927005300678, 5200508652508272258, 14628177090059000521, 818099213527558581],
        y: [7054306415440348267, 14567819963952156007, 4465768169752394732, 1228538945855076105],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [1343712398512100951, 1008424706790930669, 9129104735471714410, 2529491255157948990],
        y: [11113267957366149520, 7261666366771872183, 9636258734222449686, 2021138685720245057],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3104-3119

    let mut f1 = SyscallComplex256 {
        x: [13981651947569222700, 3540900621375102018, 13287653658183285971, 1243049703052596388],
        y: [4522079574557097203, 15223085964013319536, 4163384081032712963, 1897124140102238721],
    };
    let f2 = SyscallComplex256 {
        x: [8484639459381010211, 7011310773972233473, 16158615368361125457, 1177999319848184147],
        y: [7304236200783344061, 5292418479036885921, 6694470597827982082, 916507037960048990],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [5497012488188212489, 14976333921112420161, 15575782363531712129, 65050383204412240],
        y: [15664587447483304758, 9930667484976433614, 15915657556914282497, 980617102142189730],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3120-3135

    let mut f1 = SyscallComplex256 {
        x: [13970229013151504741, 8476296752562947313, 11810450538887363942, 511990551865481398],
        y: [11990850244716481796, 14558188671963395327, 9424388055416098482, 1459171711273467932],
    };
    let f2 = SyscallComplex256 {
        x: [16528603495754341937, 8893271371239080203, 9406449307822347647, 250213327518958686],
        y: [17875918351627132749, 3264646250175604994, 4721293699900829255, 482440734473027493],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [15888369591106714420, 18029769455033418725, 2404001231065016294, 261777224346522712],
        y: [12561675966798900663, 11293542421787790332, 4703094355515269227, 976730976800440439],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3136-3151

    let mut f1 = SyscallComplex256 {
        x: [0, 0, 0, 0],
        y: [5641043740449624970, 17935565655897260830, 10919558233487242038, 3259728400919159662],
    };
    let f2 = SyscallComplex256 {
        x: [2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554],
        y: [2760980708294393707, 372860918073165892, 9122612075875888799, 219633912322601253],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [2290178154373936121, 7928393859228939096, 8845487367689929217, 2372983945916577111],
        y: [2880063032155231263, 17562704737824094938, 1796946157611353239, 3040094488596558409],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3152-3167

    let mut f1 = SyscallComplex256 {
        x: [14543826280514596025, 9925309151025471942, 15693957349391226432, 1303992629676031264],
        y: [0, 0, 0, 0],
    };
    let f2 = SyscallComplex256 {
        x: [8758098300086079933, 8458090185970427871, 5608800379645947347, 3254741872956128470],
        y: [17860359904402995876, 210711486840455477, 13545863734865992770, 478428012731885078],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [10118344851708172355, 12384343109532927092, 4919604847310422218, 1536249023522873460],
        y: [4919001040586212003, 10706412657637427543, 18182072290118253595, 3008570254071085586],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3168-3183

    let mut f1 = SyscallComplex256 {
        x: [16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504],
        y: [7203210682968997592, 1683754083127282338, 5544086711222400467, 2169034962190395798],
    };
    let f2 = SyscallComplex256 {
        x: [0, 0, 0, 0],
        y: [8023954341856169226, 7388703250239832174, 14581628861610779812, 1463541573151624535],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504],
        y: [17626000414822379982, 12741794906597001779, 9409201923321172270, 705493389038771262],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3184-3199

    let mut f1 = SyscallComplex256 {
        x: [14622897380343555797, 5165855638358375151, 10634209670893898754, 3270712738274947396],
        y: [11805571479997144868, 1873240993939869089, 2536953398218471227, 2201196215210731682],
    };
    let f2 = SyscallComplex256 {
        x: [18333499169494873014, 11639475012973159166, 11629272760731921316, 2867130213923064265],
        y: [0, 0, 0, 0],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [14736142284558234399, 11973124699094767600, 17451680983871529053, 403582524351883130],
        y: [11805571479997144868, 1873240993939869089, 2536953398218471227, 2201196215210731682],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3200-3215

    let mut f1 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    let f2 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3216-3231

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_sub test rows: 3232-3247

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [1, 0, 0, 0], y: [0, 0, 0, 0] };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_sub(&mut params);
    let f3 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [0, 0, 0, 0],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    let mut params = SyscallBn254ComplexMulParams { f1: &mut f1, f2: &f2 };
    // bn254_complex_mul test rows: 3248-3263

    let mut f1 = SyscallComplex256 {
        x: [9819458333704307595, 11176360309338589902, 1111937373424751652, 477786268695237371],
        y: [13183940047792697716, 10000972142865538197, 8486938725896642681, 2407454493133493604],
    };
    let f2 = SyscallComplex256 {
        x: [4616769939934698446, 11233501844785449581, 15435476716815871205, 257386334936440478],
        y: [16619467820888189833, 10877150673258265262, 10728815452881265760, 216848425711951146],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [12505766644108406325, 3233624380560306535, 13685731888535029860, 2353014048686721875],
        y: [6062278900219095506, 183076157889869867, 16507411407929210602, 896565569621886355],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3264-3279

    let mut f1 = SyscallComplex256 {
        x: [18183646675237997858, 5913221654135725266, 17004692625211814591, 3035855206098274375],
        y: [3815866324375555432, 14662508343725318569, 12256559516963360580, 3331835286132085115],
    };
    let f2 = SyscallComplex256 {
        x: [10680278636993256106, 4812199420528396217, 9545827554963751537, 1694214479444147175],
        y: [14290265255325312041, 3221449844989985051, 14117926452509689807, 1705773849242759208],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [2969429478073203422, 1303361849039615678, 8055434794620988610, 1006551153287171468],
        y: [17991300239933643445, 8306193239281937177, 17693013511640767963, 3333995345296179294],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3280-3295

    let mut f1 = SyscallComplex256 {
        x: [14699522009175466360, 11292225231260079918, 12582817354618069472, 2778240163156501704],
        y: [14480032510786034726, 7480003072321104223, 1473877341807557712, 2130521741231527403],
    };
    let f2 = SyscallComplex256 {
        x: [4417907801686297355, 4846544247752331473, 6679274100623874803, 456596546189276312],
        y: [17554725009932780152, 4603450452032535347, 15021622684256251808, 2789050017287097416],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [14790590202054549016, 13416857653267188865, 12259470251650530952, 863367272062870662],
        y: [4038481909524953748, 6286055649404921892, 16122380214421169322, 846411477219728294],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3296-3311

    let mut f1 = SyscallComplex256 {
        x: [824538892198020416, 1283184167359828537, 3302650312620060185, 1668607930946766365],
        y: [15992270325266652171, 244875674963749358, 16263365658449982185, 1009731516739052561],
    };
    let f2 = SyscallComplex256 {
        x: [15029516448026007800, 17584874768126114656, 15015380991638676598, 1031683227781833221],
        y: [16986943764165354890, 14412505814284476410, 16592960690212983967, 972386731777229000],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [7448640897112043391, 13103912446082364804, 121709064341639793, 1060705880189202848],
        y: [8967142239798892684, 8601504842842315999, 14009225853138029413, 608594233032225906],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3312-3327

    let mut f1 = SyscallComplex256 {
        x: [10915932687312257019, 14233946165038456235, 1876757076466232141, 2076699543628163449],
        y: [16860477699524267357, 16339470532078613786, 18262037762087167615, 2278840021002137163],
    };
    let f2 = SyscallComplex256 {
        x: [4444768305875197474, 1939922989497411867, 4214143816538787860, 199856975344428270],
        y: [15690993799012359266, 13925548266012435130, 3272366628288741674, 3483440725996556673],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [16320244829529534397, 14688214302078314545, 15850068237202854468, 620689605082212435],
        y: [6672001322012006364, 4019195930041468307, 13997493784790578331, 1736594340453795971],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3328-3343

    let mut f1 = SyscallComplex256 {
        x: [16309166084141857452, 9809239868572571135, 17798590001567589395, 392134240976170952],
        y: [5621663831382770427, 17130837217801050487, 15171331323744008816, 2274912516172977562],
    };
    let f2 = SyscallComplex256 {
        x: [6330576003640702598, 10187177508499355552, 2162002880016689336, 1701055434502454977],
        y: [6042457498590366555, 3929315885146284526, 11720228675087261929, 960276666354821767],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [13075915760749477109, 6444142042795961397, 17404250655902230946, 178711769253923936],
        y: [6373494970361850189, 2248701559844004852, 13527031422475826030, 603034259248833353],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3344-3359

    let mut f1 = SyscallComplex256 {
        x: [14533180969308295304, 15121196567945333062, 4122092302346196175, 22116339228426949],
        y: [16483324805901717203, 18393952827148097689, 8231368508345815366, 1607401212644271174],
    };
    let f2 = SyscallComplex256 {
        x: [8463282738341103067, 2967457933044332033, 4676291696582175467, 3288997381478435379],
        y: [14517856955707246743, 6909717146772162154, 4225348332245104118, 251109779456144592],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [7476870214995388280, 18363610646754960425, 10387263917542875254, 1708536486835065897],
        y: [2686575857482980268, 8506695492277838444, 6393305615946706963, 3446062381320742232],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3360-3375

    let mut f1 = SyscallComplex256 {
        x: [1552441276585533365, 14380987881094484584, 17148433926179488449, 3103348277562900476],
        y: [3607635386551753131, 12073442209700630885, 1210144169000380915, 3445928647902604400],
    };
    let f2 = SyscallComplex256 {
        x: [8577567489996952073, 1415993803136667909, 5856414073842050221, 2600260715055878473],
        y: [6213571909784689117, 6086935747297776195, 589455143744304937, 1339041837956071838],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [4406937830853806410, 15266737569067502856, 510718984966618257, 1354204748260646634],
        y: [2697229002600624426, 586464696522165552, 12200906027722010583, 1319318597158004546],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3376-3391

    let mut f1 = SyscallComplex256 {
        x: [14085307310069053384, 1313323579751204585, 2230069526089941229, 1318948901456383028],
        y: [15746949163550439651, 11469107117602407345, 4268298800428165798, 1491530148446061347],
    };
    let f2 = SyscallComplex256 {
        x: [2439604640165946174, 8802471795462665784, 16196845910038099790, 2650363650529992213],
        y: [3592895757868207738, 11105631678955540198, 9197205780301054125, 3418225828951993858],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [12137280823533019925, 2303388261471351507, 1578992201812570648, 1731617878688619912],
        y: [11162892558684808868, 9795497321556576870, 8340205860744136523, 599218868266755795],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3392-3407

    let mut f1 = SyscallComplex256 {
        x: [7894415325517401629, 6208933359299202927, 5310537751821163315, 3347590468685507572],
        y: [18167574372806497787, 3382742257014476574, 14102026903974844419, 3249677631575321162],
    };
    let f2 = SyscallComplex256 {
        x: [6550702927005300678, 5200508652508272258, 14628177090059000521, 818099213527558581],
        y: [7054306415440348267, 14567819963952156007, 4465768169752394732, 1228538945855076105],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [7377659921954974931, 8379801879278412689, 13771842180792100502, 2647475857660445711],
        y: [12032207591593507226, 1979542638100360688, 190974785640599873, 3004829516099640875],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3408-3423

    let mut f1 = SyscallComplex256 {
        x: [13981651947569222700, 3540900621375102018, 13287653658183285971, 1243049703052596388],
        y: [4522079574557097203, 15223085964013319536, 4163384081032712963, 1897124140102238721],
    };
    let f2 = SyscallComplex256 {
        x: [8484639459381010211, 7011310773972233473, 16158615368361125457, 1177999319848184147],
        y: [7304236200783344061, 5292418479036885921, 6694470597827982082, 916507037960048990],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [7015591303176738602, 13516754081082240467, 8392664460745423754, 1941039109069261455],
        y: [12044794565310785684, 7980930235905132999, 17663324448874543867, 2867750612932145088],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3424-3439

    let mut f1 = SyscallComplex256 {
        x: [13970229013151504741, 8476296752562947313, 11810450538887363942, 511990551865481398],
        y: [11990850244716481796, 14558188671963395327, 9424388055416098482, 1459171711273467932],
    };
    let f2 = SyscallComplex256 {
        x: [16528603495754341937, 8893271371239080203, 9406449307822347647, 250213327518958686],
        y: [17875918351627132749, 3264646250175604994, 4721293699900829255, 482440734473027493],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [11409688825706647234, 15467297225008027756, 3682612147155000343, 2768508972458560690],
        y: [12763637549396752142, 2715231923641577465, 9889269762530557378, 1968723813486632462],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3440-3455

    let mut f1 = SyscallComplex256 {
        x: [0, 0, 0, 0],
        y: [5641043740449624970, 17935565655897260830, 10919558233487242038, 3259728400919159662],
    };
    let f2 = SyscallComplex256 {
        x: [2042438716905720142, 2988730285248943925, 4435704583584765532, 1114014320886393554],
        y: [2760980708294393707, 372860918073165892, 9122612075875888799, 219633912322601253],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [15593996269331516578, 10804385065142664386, 1426993230195180266, 3170680930233772598],
        y: [8378594565422288107, 6406846856437595083, 2269045162306775797, 692335889589457323],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3456-3471

    let mut f1 = SyscallComplex256 {
        x: [14543826280514596025, 9925309151025471942, 15693957349391226432, 1303992629676031264],
        y: [0, 0, 0, 0],
    };
    let f2 = SyscallComplex256 {
        x: [8758098300086079933, 8458090185970427871, 5608800379645947347, 3254741872956128470],
        y: [17860359904402995876, 210711486840455477, 13545863734865992770, 478428012731885078],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [5170431588339662195, 5630510666107664544, 6270395399736046155, 372500419545933398],
        y: [12314540981563966046, 7138430603954821962, 3045283854192833531, 3140325592038789294],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3472-3487

    let mut f1 = SyscallComplex256 {
        x: [16263600177686926934, 1070520514103037330, 3378925449179257950, 3052531337687770504],
        y: [7203210682968997592, 1683754083127282338, 5544086711222400467, 2169034962190395798],
    };
    let f2 = SyscallComplex256 {
        x: [0, 0, 0, 0],
        y: [8023954341856169226, 7388703250239832174, 14581628861610779812, 1463541573151624535],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [2254188046736485991, 3734218616134968757, 5827835250833608451, 2587242432251881903],
        y: [16645051945075607717, 7412371406037424382, 3371502814130323112, 3251256282528484019],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3488-3503

    let mut f1 = SyscallComplex256 {
        x: [14622897380343555797, 5165855638358375151, 10634209670893898754, 3270712738274947396],
        y: [11805571479997144868, 1873240993939869089, 2536953398218471227, 2201196215210731682],
    };
    let f2 = SyscallComplex256 {
        x: [18333499169494873014, 11639475012973159166, 11629272760731921316, 2867130213923064265],
        y: [0, 0, 0, 0],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 {
        x: [17887350965314140106, 16741053136279549780, 10267507430244567425, 41388177363490101],
        y: [12582095642143025065, 7163425657813513802, 4222203549658407555, 345735027377861780],
    };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3504-3519

    let mut f1 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    let f2 = SyscallComplex256 {
        x: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
        y: [4332616871279656262, 10917124144477883021, 13281191951274694749, 3486998266802970665],
    };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 { x: [0, 0, 0, 0], y: [2, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3520-3535

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);

    // bn254_complex_mul test rows: 3536-3551

    let mut f1 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    let f2 = SyscallComplex256 { x: [1, 0, 0, 0], y: [0, 0, 0, 0] };
    params.f1 = &mut f1;
    params.f2 = &f2;
    syscall_bn254_complex_mul(&mut params);
    let f3 = SyscallComplex256 { x: [0, 0, 0, 0], y: [0, 0, 0, 0] };
    assert_eq!(params.f1.x, f3.x);
    assert_eq!(params.f1.y, f3.y);
}
