use ziskos::bn254::fp6::{
    add_fp6_bn254, dbl_fp6_bn254, inv_fp6_bn254, mul_fp6_bn254, neg_fp6_bn254,
    sparse_mula_fp6_bn254, square_fp6_bn254, sub_fp6_bn254,
};

pub fn fp6_tests() {
    // Addition
    let a = [
        0xE5FB842A4DF31747,
        0x116F9C965ECA1608,
        0xACA55A7F0124463F,
        0x081B086896B74A4E,
        0x57BBAE68E5A9D427,
        0x818F8573C830F337,
        0x33CB3ACBFE4791E2,
        0x21A1477E05FD095C,
        0x9A9B21F9DC9B54A9,
        0x85AB013D9573C561,
        0x6CF4804BD6BAB2A0,
        0x114FA2E24C4F1EC6,
        0x2C7315D18BC6F8D2,
        0x89B16898DB1DB7F2,
        0x1B297C26A8199CE0,
        0x0E7E3C50AA643ADC,
        0xD5B9EBDD461B81C8,
        0x408331F84C943234,
        0x75FCB01551904F3D,
        0x1E25D0A67C2E4439,
        0x2A7FAF772EFF7A12,
        0xC635AFC074284193,
        0xC4ECF3D7D2A2F04F,
        0x2D96573B5D4B5363,
    ];
    let b = [
        0x2B774AD2E7EDA435,
        0x31C6C0A657ABF6FC,
        0xE2AC5EE730A6C5DF,
        0x2A553E284AB70E68,
        0x52794ADCA60C5C76,
        0xB7B4F6F08AEDDC10,
        0xD9836236C1BF3638,
        0x110C3234DE851E57,
        0x33735766F04A6BF8,
        0xC782A79F97707F37,
        0xE01587108C4225FF,
        0x2998D2605A7F1383,
        0x630A25A67363B9B9,
        0x657505C4E235990E,
        0xFA72D575200E99D1,
        0x1F332FC730348C7C,
        0x4F1519B2DFAC803D,
        0x8018796A675047F2,
        0x895CA80E2B3B7D0A,
        0x0748D963FD4F8F0C,
        0x5AE5A4755100B181,
        0x630DB8F4E60642D1,
        0x8C913C1C16941924,
        0x0A19917AC6B0F906,
    ];
    let res = add_fp6_bn254(&a, &b);
    let res_exp = [
        0xD55242E65D63BE35,
        0xABB4F2AB4E044277,
        0xD70173AFB049B3C0,
        0x020BF81E003CB88D,
        0x6E146D2EB3393356,
        0xA1C311D2EAAD04BA,
        0x54FE574C3E856FBD,
        0x02492B400350878A,
        0x91EDED49F468C35A,
        0xB5AC3E4BC4727A0B,
        0x94B9C1A5E17B8042,
        0x0A8426CFC59C9220,
        0x8F7D3B77FF2AB28B,
        0xEF266E5DBD535100,
        0x159C519BC82836B1,
        0x2DB16C17DA98C759,
        0x24CF059025C80205,
        0xC09BAB62B3E47A27,
        0xFF5958237CCBCC47,
        0x256EAA0A797DD345,
        0x4944C7D5A7832E4C,
        0x91C1FE23F1BCB9D7,
        0x992DEA3D67B5B116,
        0x074B9A4342CAAC40,
    ];
    assert_eq!(res, res_exp);

    // Doubling
    let a = [
        0xE5FB842A4DF31747,
        0x116F9C965ECA1608,
        0xACA55A7F0124463F,
        0x081B086896B74A4E,
        0x57BBAE68E5A9D427,
        0x818F8573C830F337,
        0x33CB3ACBFE4791E2,
        0x21A1477E05FD095C,
        0x9A9B21F9DC9B54A9,
        0x85AB013D9573C561,
        0x6CF4804BD6BAB2A0,
        0x114FA2E24C4F1EC6,
        0x2C7315D18BC6F8D2,
        0x89B16898DB1DB7F2,
        0x1B297C26A8199CE0,
        0x0E7E3C50AA643ADC,
        0xD5B9EBDD461B81C8,
        0x408331F84C943234,
        0x75FCB01551904F3D,
        0x1E25D0A67C2E4439,
        0x2A7FAF772EFF7A12,
        0xC635AFC074284193,
        0xC4ECF3D7D2A2F04F,
        0x2D96573B5D4B5363,
    ];
    let res = dbl_fp6_bn254(&a);
    let res_exp = [
        0xCBF708549BE62E8E,
        0x22DF392CBD942C11,
        0x594AB4FE02488C7E,
        0x103610D12D6E949D,
        0x7356D0BAF2D6AB07,
        0x6B9DA05627F01BE1,
        0xAF462FE17B0DCB67,
        0x12DE40892AC8728E,
        0x353643F3B936A952,
        0x0B56027B2AE78AC3,
        0xD9E90097AD756541,
        0x229F45C4989E3D8C,
        0x58E62BA3178DF1A4,
        0x1362D131B63B6FE4,
        0x3652F84D503339C1,
        0x1CFC78A154C875B8,
        0x6F534BA3B3BA0649,
        0xE984F95F30B699DC,
        0x33A91A74219F461C,
        0x0BE752DA172AE849,
        0x18DED2D78581F6DD,
        0xF4E9F4EF7FDEB899,
        0xD189A1F923C48841,
        0x2AC86003D965069D,
    ];
    assert_eq!(res, res_exp);

    // Negation
    let a = [
        0xE5FB842A4DF31747,
        0x116F9C965ECA1608,
        0xACA55A7F0124463F,
        0x081B086896B74A4E,
        0x57BBAE68E5A9D427,
        0x818F8573C830F337,
        0x33CB3ACBFE4791E2,
        0x21A1477E05FD095C,
        0x9A9B21F9DC9B54A9,
        0x85AB013D9573C561,
        0x6CF4804BD6BAB2A0,
        0x114FA2E24C4F1EC6,
        0x2C7315D18BC6F8D2,
        0x89B16898DB1DB7F2,
        0x1B297C26A8199CE0,
        0x0E7E3C50AA643ADC,
        0xD5B9EBDD461B81C8,
        0x408331F84C943234,
        0x75FCB01551904F3D,
        0x1E25D0A67C2E4439,
        0x2A7FAF772EFF7A12,
        0xC635AFC074284193,
        0xC4ECF3D7D2A2F04F,
        0x2D96573B5D4B5363,
    ];
    let res = neg_fp6_bn254(&a);
    let res_exp = [
        0x562507EC8A89E600,
        0x8611CDFB09A7B484,
        0x0BAAEB37805D121E,
        0x2849460A4A7A55DB,
        0xE464DDADF2D32920,
        0x15F1E51DA040D755,
        0x84850AEA8339C67B,
        0x0EC306F4DB3496CD,
        0xA1856A1CFBE1A89E,
        0x11D66953D2FE052B,
        0x4B5BC56AAAC6A5BD,
        0x1F14AB9094E28163,
        0x0FAD76454CB60475,
        0x0DD001F88D54129B,
        0x9D26C98FD967BB7D,
        0x21E6122236CD654D,
        0x6666A03992617B7F,
        0x56FE38991BDD9858,
        0x425395A12FF10920,
        0x123E7DCC65035BF0,
        0x11A0DC9FA97D8335,
        0xD14BBAD0F44988FA,
        0xF36351DEAEDE680D,
        0x02CDF73783E64CC5,
    ];
    assert_eq!(res, res_exp);

    // Subtraction
    let a = [
        0xE5FB842A4DF31747,
        0x116F9C965ECA1608,
        0xACA55A7F0124463F,
        0x081B086896B74A4E,
        0x57BBAE68E5A9D427,
        0x818F8573C830F337,
        0x33CB3ACBFE4791E2,
        0x21A1477E05FD095C,
        0x9A9B21F9DC9B54A9,
        0x85AB013D9573C561,
        0x6CF4804BD6BAB2A0,
        0x114FA2E24C4F1EC6,
        0x2C7315D18BC6F8D2,
        0x89B16898DB1DB7F2,
        0x1B297C26A8199CE0,
        0x0E7E3C50AA643ADC,
        0xD5B9EBDD461B81C8,
        0x408331F84C943234,
        0x75FCB01551904F3D,
        0x1E25D0A67C2E4439,
        0x2A7FAF772EFF7A12,
        0xC635AFC074284193,
        0xC4ECF3D7D2A2F04F,
        0x2D96573B5D4B5363,
    ];
    let b = [
        0x2B774AD2E7EDA435,
        0x31C6C0A657ABF6FC,
        0xE2AC5EE730A6C5DF,
        0x2A553E284AB70E68,
        0x52794ADCA60C5C76,
        0xB7B4F6F08AEDDC10,
        0xD9836236C1BF3638,
        0x110C3234DE851E57,
        0x33735766F04A6BF8,
        0xC782A79F97707F37,
        0xE01587108C4225FF,
        0x2998D2605A7F1383,
        0x630A25A67363B9B9,
        0x657505C4E235990E,
        0xFA72D575200E99D1,
        0x1F332FC730348C7C,
        0x4F1519B2DFAC803D,
        0x8018796A675047F2,
        0x895CA80E2B3B7D0A,
        0x0748D963FD4F8F0C,
        0x5AE5A4755100B181,
        0x630DB8F4E60642D1,
        0x8C913C1C16941924,
        0x0A19917AC6B0F906,
    ];
    let res = sub_fp6_bn254(&a, &b);
    let res_exp = [
        0xF6A4C56E3E827059,
        0x772A46816F8FE999,
        0x8249414E51FED8BD,
        0x0E2A18B32D31DC0F,
        0x0542638C3F9D77B1,
        0xC9DA8E833D431727,
        0x5A47D8953C885BA9,
        0x109515492777EB04,
        0xA34856A9C4CDE5F8,
        0x55A9C42F667510B7,
        0x452F3EF1CBF9E4FE,
        0x181B1EF4D301AB6C,
        0x05897C41F0E03C60,
        0xBBBDCD656159E971,
        0xD906EC68098C5B6C,
        0x1FAF5AFC5B614E88,
        0x86A4D22A666F018B,
        0xC06AB88DE543EA42,
        0xECA008072654D232,
        0x16DCF7427EDEB52C,
        0xCF9A0B01DDFEC891,
        0x6327F6CB8E21FEC1,
        0x385BB7BBBC0ED72B,
        0x237CC5C0969A5A5D,
    ];
    assert_eq!(res, res_exp);

    // Multiplication
    let a = [10, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 13, 0, 0, 0, 7, 0, 0, 0, 5, 0, 0, 0];
    let b = [9, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 0, 0, 0, 14, 0, 0, 0, 2, 0, 0, 0];
    let res = mul_fp6_bn254(&a, &b);
    let res_exp =
        [246, 0, 0, 0, 1968, 0, 0, 0, 746, 0, 0, 0, 988, 0, 0, 0, 173, 0, 0, 0, 123, 0, 0, 0];
    assert_eq!(res, res_exp);

    // Sparse multiplication
    let a = [10, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 13, 0, 0, 0, 7, 0, 0, 0, 5, 0, 0, 0];
    let b = [5, 0, 0, 0, 78, 0, 0, 0];
    let res = sparse_mula_fp6_bn254(&a, &b);
    let res_exp = [
        0x3C208C16D87CEE91,
        0x97816A916871CA8D,
        0xB85045B68181585D,
        0x30644E72E131A029,
        0x00000000000012B0,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x3C208C16D87CFCDD,
        0x97816A916871CA8D,
        0xB85045B68181585D,
        0x30644E72E131A029,
        0x0000000000000316,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x3C208C16D87CF96A,
        0x97816A916871CA8D,
        0xB85045B68181585D,
        0x30644E72E131A029,
        0x00000000000001C7,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
    ];
    assert_eq!(res, res_exp);

    // Square
    let a = [10, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 13, 0, 0, 0, 7, 0, 0, 0, 5, 0, 0, 0];
    let res = square_fp6_bn254(&a);
    let res_exp = [
        0x3C208C16D87CFAA3,
        0x97816A916871CA8D,
        0xB85045B68181585D,
        0x30644E72E131A029,
        0x0000000000000814,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x00000000000000C2,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x00000000000003A6,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x3C208C16D87CFD2F,
        0x97816A916871CA8D,
        0xB85045B68181585D,
        0x30644E72E131A029,
        0x0000000000000102,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
    ];
    assert_eq!(res, res_exp);

    // Inversion
    let a = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
    let res = inv_fp6_bn254(&a);
    let res_exp = a;
    assert_eq!(res, res_exp);

    let a = [10, 0, 0, 0, 2, 0, 0, 0, 5, 0, 0, 0, 13, 0, 0, 0, 7, 0, 0, 0, 5, 0, 0, 0];
    let res = inv_fp6_bn254(&a);
    let res_exp = [
        0x6240B994364C79E5,
        0x4EAD81860AB1E070,
        0x5995C6DBE1ED797A,
        0x0CC96E26AC6D0405,
        0x7D3413FD2F5E56F0,
        0x6FCBBDFC8CDBEADA,
        0x693474AA91944433,
        0x27D36D31D1387D4C,
        0xF7D4F13887EE9272,
        0x67F836F469FE0141,
        0xCDD39AF8FC00F286,
        0x280A645514F18174,
        0xCC95F13D3F413ED0,
        0xECF3EA474787AA83,
        0x77920E99535EE2AA,
        0x275E9054AAEB1A60,
        0x7D3439A5CD021350,
        0xDC6A5CE2BBDE0387,
        0x11493540D45FE7C9,
        0x1F48719DD50C65B0,
        0xA4DC04EC46120399,
        0x2CF2F1394552B6AC,
        0x96CB2BB6EB07A722,
        0x12646EFAA8DC59B3,
    ];
    assert_eq!(res, res_exp);
}
