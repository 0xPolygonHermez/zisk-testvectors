use ziskos::{
    compress_cyclo_bn254, decompress_cyclo_bn254, exp_by_x_cyclo_bn254, square_cyclo_bn254,
};

pub fn cyclotomic_tests() {
    // Compression and decompression: It must happen that D(C(a)) = a
    let a = [
        0x7085DE193B138426,
        0xC1F75626D129BB9D,
        0xF171A5964B4A73FC,
        0x1C79A2B7E874428F,
        0x9A4BD8B15FFFCAC6,
        0x1B72528B54157232,
        0x4C2E5F2DA100C8B9,
        0x075AB44C97D1EEE9,
        0x157673D3A1975EFB,
        0x9768379537CAA262,
        0x00F10AFC48A14223,
        0x19E16F30945592CA,
        0x69C8048AAD2DC026,
        0xB07860CFFC55B9D0,
        0x593534D0F4D63776,
        0x1E06F68EC21E6B71,
        0x06D65CFFF8ECD53B,
        0x850CFA3FAA2B6FF0,
        0xE640E217E4EA51E3,
        0x2C4B5C50BB0E0500,
        0x5FF98BFC6420F102,
        0xB15E8F84A1D9FD4D,
        0x790AEEB5CB1B85D8,
        0x283AB2523808F078,
        0x94436E55D2AD8A6F,
        0xF1A03FFB3CC9919C,
        0x0EA42AC90778E6BB,
        0x01E9F266D91EF4E2,
        0x09AC1D4996D80AA9,
        0xE1352C3622C0E05D,
        0x7D0A84779BC0A069,
        0x0BDC2CC4D585D479,
        0x2C95B3E5217D910D,
        0x1E48A80FECF18466,
        0xEEEEE24ADECDCB68,
        0x05DC3C18107C1FA0,
        0xE71ED1D2B7EFED2E,
        0xA30C782FE6E4A035,
        0x2D30EBD5043C6DA0,
        0x03212A0434BD6D7E,
        0xC35E88D1267354D6,
        0x253292D914F2FBA5,
        0x6BDAE62A12D9689A,
        0x18B92E8A03207996,
        0x66B0E885C52C7681,
        0xD34DCE7958CE53F6,
        0x7E5223D72CB1DC02,
        0x1EA5A9B287822FE1,
    ];
    let res = compress_cyclo_bn254(&a);
    let res_exp = [
        0x157673D3A1975EFB,
        0x9768379537CAA262,
        0x00F10AFC48A14223,
        0x19E16F30945592CA,
        0x69C8048AAD2DC026,
        0xB07860CFFC55B9D0,
        0x593534D0F4D63776,
        0x1E06F68EC21E6B71,
        0x2C95B3E5217D910D,
        0x1E48A80FECF18466,
        0xEEEEE24ADECDCB68,
        0x05DC3C18107C1FA0,
        0xE71ED1D2B7EFED2E,
        0xA30C782FE6E4A035,
        0x2D30EBD5043C6DA0,
        0x03212A0434BD6D7E,
        0x06D65CFFF8ECD53B,
        0x850CFA3FAA2B6FF0,
        0xE640E217E4EA51E3,
        0x2C4B5C50BB0E0500,
        0x5FF98BFC6420F102,
        0xB15E8F84A1D9FD4D,
        0x790AEEB5CB1B85D8,
        0x283AB2523808F078,
        0xC35E88D1267354D6,
        0x253292D914F2FBA5,
        0x6BDAE62A12D9689A,
        0x18B92E8A03207996,
        0x66B0E885C52C7681,
        0xD34DCE7958CE53F6,
        0x7E5223D72CB1DC02,
        0x1EA5A9B287822FE1,
    ];
    assert_eq!(res, res_exp);

    let b = a;
    let a = res;
    let res = decompress_cyclo_bn254(&a);
    let res_exp = b;
    assert_eq!(res, res_exp);

    // (decompression with a2 = 0)
    let a = [
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x2C95B3E5217D910D,
        0x1E48A80FECF18466,
        0xEEEEE24ADECDCB68,
        0x05DC3C18107C1FA0,
        0xE71ED1D2B7EFED2E,
        0xA30C782FE6E4A035,
        0x2D30EBD5043C6DA0,
        0x03212A0434BD6D7E,
        0x06D65CFFF8ECD53B,
        0x850CFA3FAA2B6FF0,
        0xE640E217E4EA51E3,
        0x2C4B5C50BB0E0500,
        0x5FF98BFC6420F102,
        0xB15E8F84A1D9FD4D,
        0x790AEEB5CB1B85D8,
        0x283AB2523808F078,
        0xC35E88D1267354D6,
        0x253292D914F2FBA5,
        0x6BDAE62A12D9689A,
        0x18B92E8A03207996,
        0x66B0E885C52C7681,
        0xD34DCE7958CE53F6,
        0x7E5223D72CB1DC02,
        0x1EA5A9B287822FE1,
    ];
    let res = decompress_cyclo_bn254(&a);
    let res_exp = [
        0x65E6244B530130ED,
        0x26457D646E833CFC,
        0x52003F24A3581366,
        0x06D0ABC5722E4E4E,
        0xAA0ACC34B8ECDB8C,
        0xABC2BC3A4A8056E5,
        0xCDFEB265D186933C,
        0x0EEE2BEFF33367DB,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x06D65CFFF8ECD53B,
        0x850CFA3FAA2B6FF0,
        0xE640E217E4EA51E3,
        0x2C4B5C50BB0E0500,
        0x5FF98BFC6420F102,
        0xB15E8F84A1D9FD4D,
        0x790AEEB5CB1B85D8,
        0x283AB2523808F078,
        0x10F228B58D759432,
        0xFFAAA95842DF3FA4,
        0xDAF0B30659F7B990,
        0x2B9BF9DDA2630300,
        0xEEA7751EF683A440,
        0x39CC24EDD7F914CE,
        0xA49C07F4415208A8,
        0x155FA1AEC445A4C5,
        0x2C95B3E5217D910D,
        0x1E48A80FECF18466,
        0xEEEEE24ADECDCB68,
        0x05DC3C18107C1FA0,
        0xE71ED1D2B7EFED2E,
        0xA30C782FE6E4A035,
        0x2D30EBD5043C6DA0,
        0x03212A0434BD6D7E,
        0xC35E88D1267354D6,
        0x253292D914F2FBA5,
        0x6BDAE62A12D9689A,
        0x18B92E8A03207996,
        0x66B0E885C52C7681,
        0xD34DCE7958CE53F6,
        0x7E5223D72CB1DC02,
        0x1EA5A9B287822FE1,
    ];
    assert_eq!(res, res_exp);

    // Squaring: It must happen that D(C(a²)) = a²
    let a = [
        0x157673D3A1975EFB,
        0x9768379537CAA262,
        0x00F10AFC48A14223,
        0x19E16F30945592CA,
        0x69C8048AAD2DC026,
        0xB07860CFFC55B9D0,
        0x593534D0F4D63776,
        0x1E06F68EC21E6B71,
        0x2C95B3E5217D910D,
        0x1E48A80FECF18466,
        0xEEEEE24ADECDCB68,
        0x05DC3C18107C1FA0,
        0xE71ED1D2B7EFED2E,
        0xA30C782FE6E4A035,
        0x2D30EBD5043C6DA0,
        0x03212A0434BD6D7E,
        0x06D65CFFF8ECD53B,
        0x850CFA3FAA2B6FF0,
        0xE640E217E4EA51E3,
        0x2C4B5C50BB0E0500,
        0x5FF98BFC6420F102,
        0xB15E8F84A1D9FD4D,
        0x790AEEB5CB1B85D8,
        0x283AB2523808F078,
        0xC35E88D1267354D6,
        0x253292D914F2FBA5,
        0x6BDAE62A12D9689A,
        0x18B92E8A03207996,
        0x66B0E885C52C7681,
        0xD34DCE7958CE53F6,
        0x7E5223D72CB1DC02,
        0x1EA5A9B287822FE1,
    ];
    let res = square_cyclo_bn254(&a);
    let res_exp = [
        0x73647B2638B5B5CA,
        0xE7426CD320A659F0,
        0xB8A4A629ABB87F83,
        0x1FBAD19D45D4B91F,
        0xF6A92643AAEF7BA6,
        0x5F959DF84D0741F0,
        0x0D79E3EEDC145504,
        0x22B33F0DF73F1E13,
        0xBA45931E976F488B,
        0x41934A66530C3C42,
        0x877C86EBF229EE21,
        0x22E3C188AD4A273F,
        0x627150F9B986BC2D,
        0x93D01357BCF2D03C,
        0x5D078CF441EBA715,
        0x1311A144A74F82EE,
        0xD569CDE9C690B278,
        0x96BFDC02DC720814,
        0x4085B7E6A49F7385,
        0x0F28D843A4826516,
        0x190ABAB89F963F75,
        0x3545A52BC23A0658,
        0x3971F77F8147146A,
        0x260C4831D421E60E,
        0x412483A5AE02797A,
        0x8FD022B086FE1912,
        0xC06D5165242C292B,
        0x29FA73ED6614343F,
        0x08845AA6ED8F2261,
        0xFA1057CEC21AC6B3,
        0x29D1D4C3831ACF00,
        0x000503CFB1C76D21,
    ];
    assert_eq!(res, res_exp);

    let a = res;
    let res = decompress_cyclo_bn254(&a);
    let res_exp = [
        0xB9D2AC6B1DB3F403,
        0xB1AA40742816EEF4,
        0x1D02B721F6FAEFDC,
        0x04A370DC0C25EA60,
        0x3CA272A1E8E5C24B,
        0x7429D3D26F2E8253,
        0xD1D9D0D859226DBC,
        0x04154D4E027C2FDB,
        0x73647B2638B5B5CA,
        0xE7426CD320A659F0,
        0xB8A4A629ABB87F83,
        0x1FBAD19D45D4B91F,
        0xF6A92643AAEF7BA6,
        0x5F959DF84D0741F0,
        0x0D79E3EEDC145504,
        0x22B33F0DF73F1E13,
        0xD569CDE9C690B278,
        0x96BFDC02DC720814,
        0x4085B7E6A49F7385,
        0x0F28D843A4826516,
        0x190ABAB89F963F75,
        0x3545A52BC23A0658,
        0x3971F77F8147146A,
        0x260C4831D421E60E,
        0x2FA599E884F71439,
        0x9E8586E16BBDBFFD,
        0x7F4E6C09E6B965A9,
        0x0C509E7FEEA2B6CE,
        0xC6D454F781A8D6FB,
        0xCB95FBCF8AFC84FD,
        0xAF3DBC842B00FCEF,
        0x21249EC026244346,
        0xBA45931E976F488B,
        0x41934A66530C3C42,
        0x877C86EBF229EE21,
        0x22E3C188AD4A273F,
        0x627150F9B986BC2D,
        0x93D01357BCF2D03C,
        0x5D078CF441EBA715,
        0x1311A144A74F82EE,
        0x412483A5AE02797A,
        0x8FD022B086FE1912,
        0xC06D5165242C292B,
        0x29FA73ED6614343F,
        0x08845AA6ED8F2261,
        0xFA1057CEC21AC6B3,
        0x29D1D4C3831ACF00,
        0x000503CFB1C76D21,
    ];
    assert_eq!(res, res_exp);

    // Exponentiation by x using the compression/decompression technique
    let a = [0; 48];
    let res = exp_by_x_cyclo_bn254(&a);
    let res_exp = a;
    assert_eq!(res, res_exp);

    let mut a = [0; 48];
    a[0] = 1;
    let res = exp_by_x_cyclo_bn254(&a);
    let res_exp = a;
    assert_eq!(res, res_exp);

    let a = [
        0x7085DE193B138426,
        0xC1F75626D129BB9D,
        0xF171A5964B4A73FC,
        0x1C79A2B7E874428F,
        0x9A4BD8B15FFFCAC6,
        0x1B72528B54157232,
        0x4C2E5F2DA100C8B9,
        0x075AB44C97D1EEE9,
        0x157673D3A1975EFB,
        0x9768379537CAA262,
        0x00F10AFC48A14223,
        0x19E16F30945592CA,
        0x69C8048AAD2DC026,
        0xB07860CFFC55B9D0,
        0x593534D0F4D63776,
        0x1E06F68EC21E6B71,
        0x06D65CFFF8ECD53B,
        0x850CFA3FAA2B6FF0,
        0xE640E217E4EA51E3,
        0x2C4B5C50BB0E0500,
        0x5FF98BFC6420F102,
        0xB15E8F84A1D9FD4D,
        0x790AEEB5CB1B85D8,
        0x283AB2523808F078,
        0x94436E55D2AD8A6F,
        0xF1A03FFB3CC9919C,
        0x0EA42AC90778E6BB,
        0x01E9F266D91EF4E2,
        0x09AC1D4996D80AA9,
        0xE1352C3622C0E05D,
        0x7D0A84779BC0A069,
        0x0BDC2CC4D585D479,
        0x2C95B3E5217D910D,
        0x1E48A80FECF18466,
        0xEEEEE24ADECDCB68,
        0x05DC3C18107C1FA0,
        0xE71ED1D2B7EFED2E,
        0xA30C782FE6E4A035,
        0x2D30EBD5043C6DA0,
        0x03212A0434BD6D7E,
        0xC35E88D1267354D6,
        0x253292D914F2FBA5,
        0x6BDAE62A12D9689A,
        0x18B92E8A03207996,
        0x66B0E885C52C7681,
        0xD34DCE7958CE53F6,
        0x7E5223D72CB1DC02,
        0x1EA5A9B287822FE1,
    ];
    let res = exp_by_x_cyclo_bn254(&a);
    let res_exp = [
        0xA339FC19399C8FCC,
        0x1C3A9719D1CC373F,
        0x4C1270DB9D45D256,
        0x130FF2E6E85F8AC7,
        0xE18A756C82DB8BF7,
        0x2A5A608DA5865D83,
        0x4A5168CD84528AD7,
        0x132B6697FAD496AE,
        0xE1AFAFC403939B1D,
        0xCBAC0805E503FD63,
        0x8692A057912D5D2F,
        0x2AE88834EA26FB20,
        0xE30DD06AC8DA1EB8,
        0x990A77FE291D3BAC,
        0x6882C88F5524E012,
        0x22BC7AECD2F3BEB4,
        0xD37EE7ED214D16DF,
        0x0A8351EB44488EDE,
        0xF4D5B82E43C2B339,
        0x271547B5976B5473,
        0x0E1C121F08CCD44B,
        0x24F372B5C815C65F,
        0x93D9D091717DE527,
        0x124A43233B3E569D,
        0x9D054E3C6379BC20,
        0x8B73EE50F7F68B22,
        0xF1AE801590B1EA16,
        0x245E99159B410E57,
        0x0332679856928291,
        0x0CE6662357B122F7,
        0x21497855EF918598,
        0x19CC97AF043FEB4B,
        0xDB380FD5AB4A7770,
        0xDD086C2E5AB15448,
        0xA710D35F981C7BFB,
        0x1451DF1F188D82A6,
        0xAF76A9211EA1ADCD,
        0x73CC965B956FFFCA,
        0x34AC30ED233AFBB0,
        0x2899B63798B1CB59,
        0xF3D2D11225E9BD82,
        0xEA7E2103A4B69D34,
        0x9C3456BFA96911B5,
        0x1EF6A30FE3AFDF1E,
        0xDEB4A4E48E77F734,
        0x90BF91B925DF33D5,
        0x3ED3C34E49161BDC,
        0x2CBA6E19A3250365,
    ];
    assert_eq!(res, res_exp);
}
