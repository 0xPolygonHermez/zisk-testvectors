use ziskos::bn254::cyclotomic::{
    compress_cyclo_bn254, decompress_cyclo_bn254, exp_by_x_cyclo_bn254, square_cyclo_bn254,
};

pub fn cyclotomic_tests() {
    // Compression and decompression: It must happen that D(C(a)) = a
    let a = [
        0x84588BE1F12C2852,
        0x7FA4D371791B4BB2,
        0x6CDE6CC6B474B035,
        0x1697874B55917927,
        0x7CCE979F33AFD120,
        0x7E2F91AD30042F8D,
        0x56BDE072776E564B,
        0x2A33F1D487BF084B,
        0x8B4F1EDD63FA6D6D,
        0x573C2CE899880DB4,
        0x444BCFE88E20CB2F,
        0x0CB41979D3AF1A48,
        0x44AE9A5D44719721,
        0x6D81C1DE649285F0,
        0x0DEC1CCD0EBA3843,
        0x179160621575D8C0,
        0xF8EB2691DE241763,
        0x375DA02D95D481A6,
        0xF19067B526C7A6EA,
        0x28256B928B4F07D4,
        0x846FC0D0B6BE84A6,
        0x2F16FCEB52794541,
        0xBBDE57BA7F3E45CC,
        0x0DF3BA45CA25A811,
        0xE1E25DBC27F09A3F,
        0x3C16B75CA78E12BA,
        0x2C2A4B0C6AE8D6D4,
        0x1F97A286DC93B0DD,
        0xFCBFA45CD019CEB5,
        0x000D4229E817455A,
        0x5083F0FF4FD1A346,
        0x14F80439A1DA39D7,
        0xAF4449B438527652,
        0x3F555153F54BB49B,
        0x87E19AFF7013F879,
        0x0A07C4A49ECAA5AC,
        0x1674E87C9D64703E,
        0x07BFCE74999AA9C0,
        0x7F8EAF6896391A7A,
        0x0EBA9B83BD80F039,
        0xEE552D6010461ADD,
        0xAEBA576A4D35653B,
        0x6E38F40F96913C9C,
        0x1FB61BD087BEE1BC,
        0x6FD67CD614FBF479,
        0x945FA0705666DFF9,
        0xE5BEB08E4AC99063,
        0x13C2400154DB50F4,
    ];
    let res = compress_cyclo_bn254(&a);
    let res_exp = [
        0xE1E25DBC27F09A3F,
        0x3C16B75CA78E12BA,
        0x2C2A4B0C6AE8D6D4,
        0x1F97A286DC93B0DD,
        0xFCBFA45CD019CEB5,
        0x000D4229E817455A,
        0x5083F0FF4FD1A346,
        0x14F80439A1DA39D7,
        0xF8EB2691DE241763,
        0x375DA02D95D481A6,
        0xF19067B526C7A6EA,
        0x28256B928B4F07D4,
        0x846FC0D0B6BE84A6,
        0x2F16FCEB52794541,
        0xBBDE57BA7F3E45CC,
        0x0DF3BA45CA25A811,
        0x8B4F1EDD63FA6D6D,
        0x573C2CE899880DB4,
        0x444BCFE88E20CB2F,
        0x0CB41979D3AF1A48,
        0x44AE9A5D44719721,
        0x6D81C1DE649285F0,
        0x0DEC1CCD0EBA3843,
        0x179160621575D8C0,
        0xEE552D6010461ADD,
        0xAEBA576A4D35653B,
        0x6E38F40F96913C9C,
        0x1FB61BD087BEE1BC,
        0x6FD67CD614FBF479,
        0x945FA0705666DFF9,
        0xE5BEB08E4AC99063,
        0x13C2400154DB50F4,
    ];
    assert_eq!(res, res_exp);

    let res = decompress_cyclo_bn254(&res);
    let res_exp = a;
    assert_eq!(res, res_exp);

    // (decompression with a2 = 0)
    let a = [
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x2C95B3E5217D910D,
        0x1E48A80FECF18466,
        0xEEEEE24ADECDCB68,
        0x05DC3C18107C1FA0,
        0xE71ED1D2B7EFED2E,
        0xA30C782FE6E4A035,
        0x2D30EBD5043C6DA0,
        0x03212A0434BD6D7E,
        0x06D65CFFF8ECD53B,
        0x850CFA3FAA2B6FF0,
        0xE640E217E4EA51E3,
        0x2C4B5C50BB0E0500,
        0x5FF98BFC6420F102,
        0xB15E8F84A1D9FD4D,
        0x790AEEB5CB1B85D8,
        0x283AB2523808F078,
        0xC35E88D1267354D6,
        0x253292D914F2FBA5,
        0x6BDAE62A12D9689A,
        0x18B92E8A03207996,
        0x66B0E885C52C7681,
        0xD34DCE7958CE53F6,
        0x7E5223D72CB1DC02,
        0x1EA5A9B287822FE1,
    ];
    let res = decompress_cyclo_bn254(&a);
    let res_exp = [
        0x65E6244B530130ED,
        0x26457D646E833CFC,
        0x52003F24A3581366,
        0x06D0ABC5722E4E4E,
        0xAA0ACC34B8ECDB8C,
        0xABC2BC3A4A8056E5,
        0xCDFEB265D186933C,
        0x0EEE2BEFF33367DB,
        0x06D65CFFF8ECD53B,
        0x850CFA3FAA2B6FF0,
        0xE640E217E4EA51E3,
        0x2C4B5C50BB0E0500,
        0x5FF98BFC6420F102,
        0xB15E8F84A1D9FD4D,
        0x790AEEB5CB1B85D8,
        0x283AB2523808F078,
        0x2C95B3E5217D910D,
        0x1E48A80FECF18466,
        0xEEEEE24ADECDCB68,
        0x05DC3C18107C1FA0,
        0xE71ED1D2B7EFED2E,
        0xA30C782FE6E4A035,
        0x2D30EBD5043C6DA0,
        0x03212A0434BD6D7E,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x0000000000000000,
        0x10F228B58D759432,
        0xFFAAA95842DF3FA4,
        0xDAF0B30659F7B990,
        0x2B9BF9DDA2630300,
        0xEEA7751EF683A440,
        0x39CC24EDD7F914CE,
        0xA49C07F4415208A8,
        0x155FA1AEC445A4C5,
        0xC35E88D1267354D6,
        0x253292D914F2FBA5,
        0x6BDAE62A12D9689A,
        0x18B92E8A03207996,
        0x66B0E885C52C7681,
        0xD34DCE7958CE53F6,
        0x7E5223D72CB1DC02,
        0x1EA5A9B287822FE1,
    ];
    assert_eq!(res, res_exp);

    // Squaring: It must happen that D(C(a²)) = a²
    let a = [
        0x157673D3A1975EFB,
        0x9768379537CAA262,
        0x00F10AFC48A14223,
        0x19E16F30945592CA,
        0x69C8048AAD2DC026,
        0xB07860CFFC55B9D0,
        0x593534D0F4D63776,
        0x1E06F68EC21E6B71,
        0x2C95B3E5217D910D,
        0x1E48A80FECF18466,
        0xEEEEE24ADECDCB68,
        0x05DC3C18107C1FA0,
        0xE71ED1D2B7EFED2E,
        0xA30C782FE6E4A035,
        0x2D30EBD5043C6DA0,
        0x03212A0434BD6D7E,
        0x06D65CFFF8ECD53B,
        0x850CFA3FAA2B6FF0,
        0xE640E217E4EA51E3,
        0x2C4B5C50BB0E0500,
        0x5FF98BFC6420F102,
        0xB15E8F84A1D9FD4D,
        0x790AEEB5CB1B85D8,
        0x283AB2523808F078,
        0xC35E88D1267354D6,
        0x253292D914F2FBA5,
        0x6BDAE62A12D9689A,
        0x18B92E8A03207996,
        0x66B0E885C52C7681,
        0xD34DCE7958CE53F6,
        0x7E5223D72CB1DC02,
        0x1EA5A9B287822FE1,
    ];
    let res = square_cyclo_bn254(&a);
    let res_exp = [
        0x73647B2638B5B5CA,
        0xE7426CD320A659F0,
        0xB8A4A629ABB87F83,
        0x1FBAD19D45D4B91F,
        0xF6A92643AAEF7BA6,
        0x5F959DF84D0741F0,
        0x0D79E3EEDC145504,
        0x22B33F0DF73F1E13,
        0xBA45931E976F488B,
        0x41934A66530C3C42,
        0x877C86EBF229EE21,
        0x22E3C188AD4A273F,
        0x627150F9B986BC2D,
        0x93D01357BCF2D03C,
        0x5D078CF441EBA715,
        0x1311A144A74F82EE,
        0xD569CDE9C690B278,
        0x96BFDC02DC720814,
        0x4085B7E6A49F7385,
        0x0F28D843A4826516,
        0x190ABAB89F963F75,
        0x3545A52BC23A0658,
        0x3971F77F8147146A,
        0x260C4831D421E60E,
        0x412483A5AE02797A,
        0x8FD022B086FE1912,
        0xC06D5165242C292B,
        0x29FA73ED6614343F,
        0x08845AA6ED8F2261,
        0xFA1057CEC21AC6B3,
        0x29D1D4C3831ACF00,
        0x000503CFB1C76D21,
    ];
    assert_eq!(res, res_exp);

    let a = res;
    let res = decompress_cyclo_bn254(&a);
    let res_exp = [
        0xB9D2AC6B1DB3F403,
        0xB1AA40742816EEF4,
        0x1D02B721F6FAEFDC,
        0x04A370DC0C25EA60,
        0x3CA272A1E8E5C24B,
        0x7429D3D26F2E8253,
        0xD1D9D0D859226DBC,
        0x04154D4E027C2FDB,
        0xD569CDE9C690B278,
        0x96BFDC02DC720814,
        0x4085B7E6A49F7385,
        0x0F28D843A4826516,
        0x190ABAB89F963F75,
        0x3545A52BC23A0658,
        0x3971F77F8147146A,
        0x260C4831D421E60E,
        0xBA45931E976F488B,
        0x41934A66530C3C42,
        0x877C86EBF229EE21,
        0x22E3C188AD4A273F,
        0x627150F9B986BC2D,
        0x93D01357BCF2D03C,
        0x5D078CF441EBA715,
        0x1311A144A74F82EE,
        0x73647B2638B5B5CA,
        0xE7426CD320A659F0,
        0xB8A4A629ABB87F83,
        0x1FBAD19D45D4B91F,
        0xF6A92643AAEF7BA6,
        0x5F959DF84D0741F0,
        0x0D79E3EEDC145504,
        0x22B33F0DF73F1E13,
        0x2FA599E884F71439,
        0x9E8586E16BBDBFFD,
        0x7F4E6C09E6B965A9,
        0x0C509E7FEEA2B6CE,
        0xC6D454F781A8D6FB,
        0xCB95FBCF8AFC84FD,
        0xAF3DBC842B00FCEF,
        0x21249EC026244346,
        0x412483A5AE02797A,
        0x8FD022B086FE1912,
        0xC06D5165242C292B,
        0x29FA73ED6614343F,
        0x08845AA6ED8F2261,
        0xFA1057CEC21AC6B3,
        0x29D1D4C3831ACF00,
        0x000503CFB1C76D21,
    ];
    assert_eq!(res, res_exp);

    // Exponentiation by x using the compression/decompression technique
    let a = [0; 48];
    let res = exp_by_x_cyclo_bn254(&a);
    let res_exp = a;
    assert_eq!(res, res_exp);

    let mut a = [0; 48];
    a[0] = 1;
    let res = exp_by_x_cyclo_bn254(&a);
    let res_exp = a;
    assert_eq!(res, res_exp);

    let a = [
        0x84588BE1F12C2852,
        0x7FA4D371791B4BB2,
        0x6CDE6CC6B474B035,
        0x1697874B55917927,
        0x7CCE979F33AFD120,
        0x7E2F91AD30042F8D,
        0x56BDE072776E564B,
        0x2A33F1D487BF084B,
        0x8B4F1EDD63FA6D6D,
        0x573C2CE899880DB4,
        0x444BCFE88E20CB2F,
        0x0CB41979D3AF1A48,
        0x44AE9A5D44719721,
        0x6D81C1DE649285F0,
        0x0DEC1CCD0EBA3843,
        0x179160621575D8C0,
        0xF8EB2691DE241763,
        0x375DA02D95D481A6,
        0xF19067B526C7A6EA,
        0x28256B928B4F07D4,
        0x846FC0D0B6BE84A6,
        0x2F16FCEB52794541,
        0xBBDE57BA7F3E45CC,
        0x0DF3BA45CA25A811,
        0xE1E25DBC27F09A3F,
        0x3C16B75CA78E12BA,
        0x2C2A4B0C6AE8D6D4,
        0x1F97A286DC93B0DD,
        0xFCBFA45CD019CEB5,
        0x000D4229E817455A,
        0x5083F0FF4FD1A346,
        0x14F80439A1DA39D7,
        0xAF4449B438527652,
        0x3F555153F54BB49B,
        0x87E19AFF7013F879,
        0x0A07C4A49ECAA5AC,
        0x1674E87C9D64703E,
        0x07BFCE74999AA9C0,
        0x7F8EAF6896391A7A,
        0x0EBA9B83BD80F039,
        0xEE552D6010461ADD,
        0xAEBA576A4D35653B,
        0x6E38F40F96913C9C,
        0x1FB61BD087BEE1BC,
        0x6FD67CD614FBF479,
        0x945FA0705666DFF9,
        0xE5BEB08E4AC99063,
        0x13C2400154DB50F4,
    ];
    let res = exp_by_x_cyclo_bn254(&a);
    let res_exp = [
        0x03B6F5F8C7FE33F0,
        0xFEAE30D8FA73039E,
        0x81C666C3389B5331,
        0x027E502AD25C8D59,
        0x809AE7FEBD1777F2,
        0x01099D404A7BC6B8,
        0xC0F58B84B6C82D53,
        0x2BB6316608E7A23E,
        0xA30FF962542D7130,
        0xF710CD4F1702ECBA,
        0x3E6700A0F8126ADA,
        0x2577D06A77507040,
        0xD07F5AE14686177E,
        0x9E31D40F026F7876,
        0x9E749FFB9D911156,
        0x2C8652F141D759A7,
        0x78BCD6916C9C85D1,
        0x7CEE7EEA4547C72C,
        0x7039357D070385A7,
        0x0C8580A8DC577B2F,
        0x712A244871EEE678,
        0x25678B1152E7F4B5,
        0x912AB5081AD1754F,
        0x056F6A46FF65D3E2,
        0x428B7CFDC6ED9602,
        0x2F1686AF70CE76D9,
        0x137C956F4A5244DC,
        0x13353327DFBC001C,
        0xC82E6481B9C7AEB5,
        0x2A45F5A340182841,
        0x892763E7913F0526,
        0x24166FF520A50988,
        0xA2586383B1F9AF6F,
        0x8F874ED8919F4EF4,
        0xA9EA6074F707CEB5,
        0x21F7750B7B03D2D9,
        0x43052FA177C90034,
        0xD6212824F88A022A,
        0x2461D92D9AC941F4,
        0x12090B811B4FD14E,
        0x216C3A19C38E9608,
        0x25B0D3FD3D57AD52,
        0x0009AE0C6CFF0613,
        0x2E336F7AAC1EC2B4,
        0xC264CCEB4665A116,
        0xD0CE1F8A644DF7DA,
        0x780720244510CC8C,
        0x1C921022C560F587,
    ];
    assert_eq!(res, res_exp);
}
